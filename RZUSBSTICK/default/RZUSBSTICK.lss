
RZUSBSTICK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00005d38  00005dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000010d9  00800190  00800190  00005e5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005e5c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000ab0  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001016e  00000000  00000000  0000693c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004c56  00000000  00000000  00016aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004e75  00000000  00000000  0001b700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001d1c  00000000  00000000  00020578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000045eb  00000000  00000000  00022294  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008aa6  00000000  00000000  0002687f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000948  00000000  00000000  0002f325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__vector_16>
      44:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__vector_17>
      48:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__vector_20>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      84:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	53 09       	sbc	r21, r3
      9a:	4c 06       	cpc	r4, r28
      9c:	76 06       	cpc	r7, r22
      9e:	a6 07       	cpc	r26, r22
      a0:	a6 07       	cpc	r26, r22
      a2:	a6 07       	cpc	r26, r22
      a4:	a6 07       	cpc	r26, r22
      a6:	44 07       	cpc	r20, r20
      a8:	9c 07       	cpc	r25, r28
      aa:	a0 07       	cpc	r26, r16
      ac:	a3 07       	cpc	r26, r19
      ae:	a6 07       	cpc	r26, r22
      b0:	a6 07       	cpc	r26, r22
      b2:	a6 07       	cpc	r26, r22
      b4:	b0 07       	cpc	r27, r16
      b6:	b3 07       	cpc	r27, r19
      b8:	5d 09       	sbc	r21, r13
      ba:	5d 09       	sbc	r21, r13
      bc:	5d 09       	sbc	r21, r13
      be:	5d 09       	sbc	r21, r13
      c0:	5d 09       	sbc	r21, r13
      c2:	5d 09       	sbc	r21, r13
      c4:	5d 09       	sbc	r21, r13
      c6:	5d 09       	sbc	r21, r13
      c8:	b9 07       	cpc	r27, r25
      ca:	5d 09       	sbc	r21, r13
      cc:	5d 09       	sbc	r21, r13
      ce:	5d 09       	sbc	r21, r13
      d0:	5d 09       	sbc	r21, r13
      d2:	5d 09       	sbc	r21, r13
      d4:	5d 09       	sbc	r21, r13
      d6:	5d 09       	sbc	r21, r13
      d8:	5d 09       	sbc	r21, r13
      da:	e5 07       	cpc	r30, r21
      dc:	38 08       	sbc	r3, r8
      de:	5e 08       	sbc	r5, r14
      e0:	71 08       	sbc	r7, r1
      e2:	b9 08       	sbc	r11, r9
      e4:	05 09       	sbc	r16, r5
      e6:	45 09       	sbc	r20, r5
      e8:	ba 0d       	add	r27, r10
      ea:	b0 0d       	add	r27, r0
      ec:	be 0d       	add	r27, r14
      ee:	be 0d       	add	r27, r14
      f0:	b2 0d       	add	r27, r2
      f2:	be 0d       	add	r27, r14
      f4:	b2 0d       	add	r27, r2
      f6:	be 0d       	add	r27, r14
      f8:	be 0d       	add	r27, r14
      fa:	b4 0d       	add	r27, r4
      fc:	be 0d       	add	r27, r14
      fe:	b6 0d       	add	r27, r6
     100:	b8 0d       	add	r27, r8
     102:	bc 0d       	add	r27, r12
     104:	7f 20       	and	r7, r15
     106:	1c 20       	and	r1, r12
     108:	cb 20       	and	r12, r11
     10a:	51 20       	and	r5, r1
     10c:	cb 20       	and	r12, r11
     10e:	e4 1f       	adc	r30, r20
     110:	3c 1f       	adc	r19, r28
     112:	cb 20       	and	r12, r11
     114:	c8 1f       	adc	r28, r24
     116:	05 20       	and	r0, r5
     118:	b7 20       	and	r11, r7

0000011a <__trampolines_end>:
     11a:	ba 26       	eor	r11, r26
     11c:	78 5b       	subi	r23, 0xB8	; 184
     11e:	ce 74       	andi	r28, 0x4E	; 78
     120:	b8 16       	cp	r11, r24
     122:	2a ef       	ldi	r18, 0xFA	; 250
     124:	f3 cc       	rjmp	.-1562   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
     126:	8b 4e       	sbci	r24, 0xEB	; 235
     128:	53 0a       	sbc	r5, r19
     12a:	e2 d7       	rcall	.+4036   	; 0x10f0 <cmd_if_dispatch+0x4a0>
     12c:	b7 3c       	cpi	r27, 0xC7	; 199
     12e:	56 4c       	sbci	r21, 0xC6	; 198
     130:	b5 66       	ori	r27, 0x65	; 101
     132:	db 1e       	adc	r13, r27
     134:	57 ee       	ldi	r21, 0xE7	; 231
     136:	e6 f4       	brtc	.+56     	; 0x170 <__trampolines_end+0x56>
     138:	43 1a       	sub	r4, r19
     13a:	06 df       	rcall	.-500    	; 0xffffff48 <__eeprom_end+0xff7eff48>
     13c:	cd 9f       	mul	r28, r29
     13e:	86 3e       	cpi	r24, 0xE6	; 230
     140:	8a 79       	andi	r24, 0x9A	; 154
     142:	3a 04       	cpc	r3, r10
     144:	09 7c       	andi	r16, 0xC9	; 201
     146:	1f bb       	out	0x1f, r17	; 31
     148:	12 a0       	ldd	r1, Z+34	; 0x22
     14a:	77 9b       	sbis	0x0e, 7	; 14
     14c:	40 fc       	sbrc	r4, 0
     14e:	00 ad       	ldd	r16, Z+56	; 0x38
     150:	31 6f       	ori	r19, 0xF1	; 241
     152:	9a a6       	std	Y+42, r9	; 0x2a
     154:	9e 15       	cp	r25, r14
     156:	0d 6c       	ori	r16, 0xCD	; 205
     158:	44 70       	andi	r20, 0x04	; 4
     15a:	35 f0       	brhs	.+12     	; 0x168 <__trampolines_end+0x4e>
     15c:	64 d6       	rcall	.+3272   	; 0xe26 <cmd_if_dispatch+0x1d6>
     15e:	7e 48       	sbci	r23, 0x8E	; 142
     160:	3d 50       	subi	r19, 0x0D	; 13
     162:	62 2f       	mov	r22, r18
     164:	c6 30       	cpi	r28, 0x06	; 6
     166:	e7 60       	ori	r30, 0x07	; 7
     168:	f8 dc       	rcall	.-1552   	; 0xfffffb5a <__eeprom_end+0xff7efb5a>
     16a:	5c 5f       	subi	r21, 0xFC	; 252
     16c:	08 c3       	rjmp	.+1552   	; 0x77e <air_capture_jammer_on+0x18>
     16e:	b9 13       	cpse	r27, r25
     170:	a8 be       	out	0x38, r10	; 56
     172:	e9 7a       	andi	r30, 0xA9	; 169
     174:	81 65       	ori	r24, 0x51	; 81
     176:	bc d2       	rcall	.+1400   	; 0x6f0 <air_capture_open_stream+0x78>
     178:	2e 55       	subi	r18, 0x5E	; 94
     17a:	e5 90       	lpm	r14, Z+
     17c:	f7 a7       	std	Z+47, r31	; 0x2f
     17e:	7b c2       	rjmp	.+1270   	; 0x676 <air_capture_set_channel+0x58>
     180:	c1 ea       	ldi	r28, 0xA1	; 161
     182:	4a ae       	std	Y+58, r4	; 0x3a
     184:	93 f2       	brvs	.-92     	; 0x12a <__trampolines_end+0x10>
     186:	ff b3       	in	r31, 0x1f	; 31
     188:	c5 67       	ori	r28, 0x75	; 117
     18a:	39 98       	cbi	0x07, 1	; 7
     18c:	49 05       	cpc	r20, r9
     18e:	2c 3f       	cpi	r18, 0xFC	; 252
     190:	38 8d       	ldd	r19, Y+24	; 0x18
     192:	d3 ca       	rjmp	.-2650   	; 0xfffff73a <__eeprom_end+0xff7ef73a>
     194:	2d e0       	ldi	r18, 0x0D	; 13
     196:	b2 00       	.word	0x00b2	; ????
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d0 e2       	ldi	r29, 0x20	; 32
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61

000001a6 <__do_copy_data>:
     1a6:	11 e0       	ldi	r17, 0x01	; 1
     1a8:	a0 e0       	ldi	r26, 0x00	; 0
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	e8 e3       	ldi	r30, 0x38	; 56
     1ae:	fd e5       	ldi	r31, 0x5D	; 93
     1b0:	00 e0       	ldi	r16, 0x00	; 0
     1b2:	0b bf       	out	0x3b, r16	; 59
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x14>
     1b6:	07 90       	elpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a0 39       	cpi	r26, 0x90	; 144
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0x10>

000001c0 <__do_clear_bss>:
     1c0:	22 e1       	ldi	r18, 0x12	; 18
     1c2:	a0 e9       	ldi	r26, 0x90	; 144
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a9 36       	cpi	r26, 0x69	; 105
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ef 1b 	call	0x37de	; 0x37de <main>
     1d4:	0c 94 15 2e 	jmp	0x5c2a	; 0x5c2a <exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <air_capture_callback>:
 *  exploit that it takes 16 cycles to clock out one byte over the SPI as master at
 *  the highest possible speed.
 *
 *  \param[in] isr_event Event signaled by the radio transceiver.
 */
static void air_capture_callback(uint8_t isr_event) {
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
    /* Mask the two different events interesting in this application:
     * - TRX_END: Complete frame received.
     * - RX_START: SFD of new frame received.
     */
    if (RF230_TRX_END_MASK == (isr_event & RF230_TRX_END_MASK)) {
     1e0:	83 ff       	sbrs	r24, 3
     1e2:	74 c0       	rjmp	.+232    	; 0x2cc <air_capture_callback+0xf0>
    /* End of frame indicated. Upload it if there is packets in the pool left. */
        if (0 == items_free) { nmbr_of_frames_missed++; return; }
     1e4:	80 91 94 01 	lds	r24, 0x0194
     1e8:	81 11       	cpse	r24, r1
     1ea:	0a c0       	rjmp	.+20     	; 0x200 <air_capture_callback+0x24>
     1ec:	80 91 b2 01 	lds	r24, 0x01B2
     1f0:	90 91 b3 01 	lds	r25, 0x01B3
     1f4:	01 96       	adiw	r24, 0x01	; 1
     1f6:	90 93 b3 01 	sts	0x01B3, r25
     1fa:	80 93 b2 01 	sts	0x01B2, r24
     1fe:	92 c0       	rjmp	.+292    	; 0x324 <air_capture_callback+0x148>
        
        RF230_SS_LOW();
     200:	28 98       	cbi	0x05, 0	; 5
        
        SPDR = RF230_TRX_CMD_FR; // Send Frame Read Command.
     202:	80 e2       	ldi	r24, 0x20	; 32
     204:	8e bd       	out	0x2e, r24	; 46
        
        /* Get ACDU while waiting for SPI to finish data transmission. */
        acdu_t *this_acdu = acdu_fifo[fifo_head];
     206:	80 91 97 01 	lds	r24, 0x0197
     20a:	e8 2f       	mov	r30, r24
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	e8 56       	subi	r30, 0x68	; 104
     214:	fe 4f       	sbci	r31, 0xFE	; 254
     216:	01 90       	ld	r0, Z+
     218:	f0 81       	ld	r31, Z
     21a:	e0 2d       	mov	r30, r0
        if ((AC_ACDU_FIFO_SIZE - 1) == fifo_head) {
     21c:	89 30       	cpi	r24, 0x09	; 9
     21e:	19 f4       	brne	.+6      	; 0x226 <air_capture_callback+0x4a>
            fifo_head = 0;
     220:	10 92 97 01 	sts	0x0197, r1
     224:	03 c0       	rjmp	.+6      	; 0x22c <air_capture_callback+0x50>
        } else {
            fifo_head++;
     226:	8f 5f       	subi	r24, 0xFF	; 255
     228:	80 93 97 01 	sts	0x0197, r24
        } // END: if ((AC_ACDU_FIFO_SIZE - 1) == fifo_head) ...
        
        items_used++;
     22c:	80 91 95 01 	lds	r24, 0x0195
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	80 93 95 01 	sts	0x0195, r24
        items_free--;
     236:	80 91 94 01 	lds	r24, 0x0194
     23a:	81 50       	subi	r24, 0x01	; 1
     23c:	80 93 94 01 	sts	0x0194, r24
        
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
     240:	0d b4       	in	r0, 0x2d	; 45
     242:	07 fe       	sbrs	r0, 7
     244:	fd cf       	rjmp	.-6      	; 0x240 <air_capture_callback+0x64>
        uint8_t frame_length = SPDR;
     246:	8e b5       	in	r24, 0x2e	; 46
        
        SPDR = frame_length;
     248:	8e bd       	out	0x2e, r24	; 46
        
        /* Set ACDU ID and RSSI while waiting for SPI to finish data transmission. */
        this_acdu->ac_id = EVENT_STREAM_AC_DATA;
     24a:	80 e5       	ldi	r24, 0x50	; 80
     24c:	80 83       	st	Z, r24
        this_acdu->rssi = acdu_rssi;
     24e:	80 91 b1 01 	lds	r24, 0x01B1
     252:	86 83       	std	Z+6, r24	; 0x06
        
        uint8_t *frame = this_acdu->frame;
        
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
     254:	0d b4       	in	r0, 0x2d	; 45
     256:	07 fe       	sbrs	r0, 7
     258:	fd cf       	rjmp	.-6      	; 0x254 <air_capture_callback+0x78>
        frame_length = (SPDR & 0x7F); // Real frame length returned from the radio transceiver. And with mask to avoid overflow.
     25a:	8e b5       	in	r24, 0x2e	; 46
     25c:	8f 77       	andi	r24, 0x7F	; 127
        
        /* Calculate the length of the stored ACDU in bytes. The mystical 10 bytes
         * added is the length of the non-variable length fields in an ACDU.
         */
        this_acdu->length = frame_length + 10;
     25e:	9a e0       	ldi	r25, 0x0A	; 10
     260:	98 0f       	add	r25, r24
     262:	91 83       	std	Z+1, r25	; 0x01
        *frame = frame_length;
     264:	80 87       	std	Z+8, r24	; 0x08
        frame++;
     266:	ef 01       	movw	r28, r30
     268:	29 96       	adiw	r28, 0x09	; 9
        
        frame_length++; // Add one byte to the length for LQI.
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	28 0f       	add	r18, r24
        
        SPDR = frame_length;
     26e:	2e bd       	out	0x2e, r18	; 46
        
        /* Set ACDU timestamp while waiting for SPI to finish data transmission. */
        this_acdu->time_stamp = acdu_time_stamp;
     270:	80 91 ad 01 	lds	r24, 0x01AD
     274:	90 91 ae 01 	lds	r25, 0x01AE
     278:	a0 91 af 01 	lds	r26, 0x01AF
     27c:	b0 91 b0 01 	lds	r27, 0x01B0
     280:	82 83       	std	Z+2, r24	; 0x02
     282:	93 83       	std	Z+3, r25	; 0x03
     284:	a4 83       	std	Z+4, r26	; 0x04
     286:	b5 83       	std	Z+5, r27	; 0x05
        
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();   
     288:	0d b4       	in	r0, 0x2d	; 45
     28a:	07 fe       	sbrs	r0, 7
     28c:	fd cf       	rjmp	.-6      	; 0x288 <air_capture_callback+0xac>
        
        /* Upload frame. */
        do {
            uint8_t const temp_data = SPDR;
     28e:	8e b5       	in	r24, 0x2e	; 46
            SPDR = temp_data; // Any data will do, and tempData is readily available. Saving cycles.
     290:	8e bd       	out	0x2e, r24	; 46
            
            *frame = temp_data;      
     292:	89 93       	st	Y+, r24
                
            frame++;
            frame_length--;
     294:	21 50       	subi	r18, 0x01	; 1
            RF230_WAIT_FOR_SPI_TX_COMPLETE();
     296:	0d b4       	in	r0, 0x2d	; 45
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <air_capture_callback+0xba>
        } while (0 != frame_length);
     29c:	21 11       	cpse	r18, r1
     29e:	f7 cf       	rjmp	.-18     	; 0x28e <air_capture_callback+0xb2>

        RF230_SS_HIGH();
     2a0:	28 9a       	sbi	0x05, 0	; 5
        
        /* Read CRC flag. */
        RF230_QUICK_SUBREGISTER_READ(RG_PHY_RSSI , 0x80, 7, (this_acdu->crc));
     2a2:	28 98       	cbi	0x05, 0	; 5
     2a4:	86 e8       	ldi	r24, 0x86	; 134
     2a6:	8e bd       	out	0x2e, r24	; 46
     2a8:	0d b4       	in	r0, 0x2d	; 45
     2aa:	07 fe       	sbrs	r0, 7
     2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <air_capture_callback+0xcc>
     2ae:	8e b5       	in	r24, 0x2e	; 46
     2b0:	87 83       	std	Z+7, r24	; 0x07
     2b2:	8e bd       	out	0x2e, r24	; 46
     2b4:	0d b4       	in	r0, 0x2d	; 45
     2b6:	07 fe       	sbrs	r0, 7
     2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <air_capture_callback+0xd8>
     2ba:	8e b5       	in	r24, 0x2e	; 46
     2bc:	87 83       	std	Z+7, r24	; 0x07
     2be:	28 9a       	sbi	0x05, 0	; 5
     2c0:	87 81       	ldd	r24, Z+7	; 0x07
     2c2:	88 1f       	adc	r24, r24
     2c4:	88 27       	eor	r24, r24
     2c6:	88 1f       	adc	r24, r24
     2c8:	87 83       	std	Z+7, r24	; 0x07
     2ca:	2c c0       	rjmp	.+88     	; 0x324 <air_capture_callback+0x148>
    } else if (RF230_RX_START_MASK == (isr_event & RF230_RX_START_MASK)) {
     2cc:	82 ff       	sbrs	r24, 2
     2ce:	25 c0       	rjmp	.+74     	; 0x31a <air_capture_callback+0x13e>
        /* Start of frame indicated. Read RSSI and timestamp the frame. */
        acdu_time_stamp = vrt_timer_get_tick_cnt() / AC_TICK_PER_US;
     2d0:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <vrt_timer_get_tick_cnt>
     2d4:	96 95       	lsr	r25
     2d6:	87 95       	ror	r24
     2d8:	77 95       	ror	r23
     2da:	67 95       	ror	r22
     2dc:	60 93 ad 01 	sts	0x01AD, r22
     2e0:	70 93 ae 01 	sts	0x01AE, r23
     2e4:	80 93 af 01 	sts	0x01AF, r24
     2e8:	90 93 b0 01 	sts	0x01B0, r25
        RF230_QUICK_SUBREGISTER_READ(0x06, 0x1F, 0, acdu_rssi);
     2ec:	28 98       	cbi	0x05, 0	; 5
     2ee:	86 e8       	ldi	r24, 0x86	; 134
     2f0:	8e bd       	out	0x2e, r24	; 46
     2f2:	0d b4       	in	r0, 0x2d	; 45
     2f4:	07 fe       	sbrs	r0, 7
     2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <air_capture_callback+0x116>
     2f8:	8e b5       	in	r24, 0x2e	; 46
     2fa:	80 93 b1 01 	sts	0x01B1, r24
     2fe:	8e bd       	out	0x2e, r24	; 46
     300:	0d b4       	in	r0, 0x2d	; 45
     302:	07 fe       	sbrs	r0, 7
     304:	fd cf       	rjmp	.-6      	; 0x300 <air_capture_callback+0x124>
     306:	8e b5       	in	r24, 0x2e	; 46
     308:	80 93 b1 01 	sts	0x01B1, r24
     30c:	28 9a       	sbi	0x05, 0	; 5
     30e:	80 91 b1 01 	lds	r24, 0x01B1
     312:	8f 71       	andi	r24, 0x1F	; 31
     314:	80 93 b1 01 	sts	0x01B1, r24
     318:	05 c0       	rjmp	.+10     	; 0x324 <air_capture_callback+0x148>
    } else {
        /* Unknow interrupt occured for this mode. No special handling will
         * be done, except incrementing a statistical variable.
         */
        ac_unknown_isr++;
     31a:	80 91 ac 01 	lds	r24, 0x01AC
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	80 93 ac 01 	sts	0x01AC, r24
    } // END: if (RF230_TRX_END_MASK == (isr_event & RF230_TRX_END_MASK)) ...
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <air_capture_init>:
    
    return rf230_init_status;
}


bool air_capture_init(void) {
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
    /* Initialize local variable. */
    nmbr_of_frames        = 0;
     32e:	10 92 b5 01 	sts	0x01B5, r1
     332:	10 92 b4 01 	sts	0x01B4, r1
    nmbr_of_frames_missed = 0;
     336:	10 92 b3 01 	sts	0x01B3, r1
     33a:	10 92 b2 01 	sts	0x01B2, r1
    acdu_rssi             = 0;
     33e:	10 92 b1 01 	sts	0x01B1, r1
    acdu_time_stamp       = 0;
     342:	10 92 ad 01 	sts	0x01AD, r1
     346:	10 92 ae 01 	sts	0x01AE, r1
     34a:	10 92 af 01 	sts	0x01AF, r1
     34e:	10 92 b0 01 	sts	0x01B0, r1
    ac_unknown_isr        = 0;
     352:	10 92 ac 01 	sts	0x01AC, r1
    
    fifo_head  = 0;
     356:	10 92 97 01 	sts	0x0197, r1
    fifo_tail  = 0;
     35a:	10 92 96 01 	sts	0x0196, r1
    items_used = 0;
     35e:	10 92 95 01 	sts	0x0195, r1
    items_free = AC_ACDU_FIFO_SIZE;
     362:	8a e0       	ldi	r24, 0x0A	; 10
     364:	80 93 94 01 	sts	0x0194, r24
    
    bytes_left = 0;
     368:	10 92 93 01 	sts	0x0193, r1
    packets_left = 0;
     36c:	10 92 92 01 	sts	0x0192, r1
    data_ptr = NULL;
     370:	10 92 91 01 	sts	0x0191, r1
     374:	10 92 90 01 	sts	0x0190, r1
 *
 *  \retval true The radio transceiver was started successfully.
 *  \retval false The radio transceiver could not be started.
 */
static bool init_rf(void) {
    (bool)rf230_init();
     378:	0e 94 96 1a 	call	0x352c	; 0x352c <rf230_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37c:	8b ef       	ldi	r24, 0xFB	; 251
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <air_capture_init+0x56>
     384:	00 c0       	rjmp	.+0      	; 0x386 <air_capture_init+0x5c>
     386:	00 00       	nop
    
    delay_us(TIME_TO_ENTER_P_ON);
    
    rf230_set_tst_low();
     388:	2e 98       	cbi	0x05, 6	; 5
    rf230_set_rst_low();
     38a:	2d 98       	cbi	0x05, 5	; 5
    rf230_set_slptr_low();
     38c:	2c 98       	cbi	0x05, 4	; 5
     38e:	90 e1       	ldi	r25, 0x10	; 16
     390:	9a 95       	dec	r25
     392:	f1 f7       	brne	.-4      	; 0x390 <air_capture_init+0x66>
    delay_us(TIME_RESET);    
    rf230_set_rst_high();
     394:	2d 9a       	sbi	0x05, 5	; 5
     396:	8f e5       	ldi	r24, 0x5F	; 95
     398:	99 e0       	ldi	r25, 0x09	; 9
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <air_capture_init+0x70>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <air_capture_init+0x76>
     3a0:	00 00       	nop
     3a2:	8f e5       	ldi	r24, 0x5F	; 95
     3a4:	99 e0       	ldi	r25, 0x09	; 9
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <air_capture_init+0x7c>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <air_capture_init+0x82>
     3ac:	00 00       	nop
    
    /* Could be that we were sleeping before we got here. */
    delay_us(TIME_SLEEP_TO_TRX_OFF);
    
    /* Force transition to TRX_OFF and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     3ae:	23 e0       	ldi	r18, 0x03	; 3
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	6f e1       	ldi	r22, 0x1F	; 31
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
     3ba:	8b ef       	ldi	r24, 0xFB	; 251
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <air_capture_init+0x94>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <air_capture_init+0x9a>
     3c4:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool rf230_init_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	6f e1       	ldi	r22, 0x1F	; 31
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     3d0:	88 30       	cpi	r24, 0x08	; 8
     3d2:	71 f5       	brne	.+92     	; 0x430 <air_capture_init+0x106>
    } else {
        
        /* Enable automatic CRC generation and set the ISR mask. */
        rf230_subregister_write(SR_CLKM_SHA_SEL, 0);
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	43 e0       	ldi	r20, 0x03	; 3
     3d8:	68 e0       	ldi	r22, 0x08	; 8
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_subregister_write(SR_CLKM_CTRL, 0);
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	67 e0       	ldi	r22, 0x07	; 7
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_subregister_write(SR_TX_AUTO_CRC_ON, 1);
     3ec:	21 e0       	ldi	r18, 0x01	; 1
     3ee:	47 e0       	ldi	r20, 0x07	; 7
     3f0:	60 e8       	ldi	r22, 0x80	; 128
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_register_write(RG_IRQ_MASK, AC_SUPPORTED_INTERRUPT_MASK);
     3f8:	6c e0       	ldi	r22, 0x0C	; 12
     3fa:	8e e0       	ldi	r24, 0x0E	; 14
     3fc:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
        
        RF230_ENABLE_TRX_ISR();
     400:	80 91 6f 00 	lds	r24, 0x006F
     404:	80 62       	ori	r24, 0x20	; 32
     406:	80 93 6f 00 	sts	0x006F, r24
     40a:	c8 e9       	ldi	r28, 0x98	; 152
     40c:	d1 e0       	ldi	r29, 0x01	; 1
    }
    
    /* Set-up the fifo of ACDUs: allocate memory and store the pointers in the FIFO. */
    for (uint8_t i = 0; i < AC_ACDU_FIFO_SIZE; i++) {
        
        acdu_t *acdu = (acdu_t *)vrt_mem_alloc(sizeof(acdu_t));
     40e:	89 e8       	ldi	r24, 0x89	; 137
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
        
        if (NULL == acdu) {
     416:	00 97       	sbiw	r24, 0x00	; 0
     418:	59 f0       	breq	.+22     	; 0x430 <air_capture_init+0x106>
            goto init_failed;
        } else {
            acdu_fifo[i] = acdu;
     41a:	89 93       	st	Y+, r24
     41c:	99 93       	st	Y+, r25
    if (true != init_rf()) {
        goto init_failed;
    }
    
    /* Set-up the fifo of ACDUs: allocate memory and store the pointers in the FIFO. */
    for (uint8_t i = 0; i < AC_ACDU_FIFO_SIZE; i++) {
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	cc 3a       	cpi	r28, 0xAC	; 172
     422:	d9 07       	cpc	r29, r25
     424:	a1 f7       	brne	.-24     	; 0x40e <air_capture_init+0xe4>
        } else {
            acdu_fifo[i] = acdu;
        }
    }
    
    ac_state = AC_IDLE;
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	80 93 00 01 	sts	0x0100, r24
    return true;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0f c0       	rjmp	.+30     	; 0x44e <air_capture_init+0x124>
    /* Following label defines what to do if if the initialization fails. */
    init_failed:
    
    
    /* Disable the radio transceiver and release the memory. */
    rf230_deinit();
     430:	0e 94 ad 1a 	call	0x355a	; 0x355a <rf230_deinit>
     434:	c8 e9       	ldi	r28, 0x98	; 152
     436:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
        vrt_mem_free(acdu_fifo[i]);
     438:	88 81       	ld	r24, Y
     43a:	99 81       	ldd	r25, Y+1	; 0x01
     43c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
        acdu_fifo[i] = (acdu_t *)NULL;
     440:	19 92       	st	Y+, r1
     442:	19 92       	st	Y+, r1
    init_failed:
    
    
    /* Disable the radio transceiver and release the memory. */
    rf230_deinit();
    for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	cc 3a       	cpi	r28, 0xAC	; 172
     448:	d8 07       	cpc	r29, r24
     44a:	b1 f7       	brne	.-20     	; 0x438 <air_capture_init+0x10e>
        vrt_mem_free(acdu_fifo[i]);
        acdu_fifo[i] = (acdu_t *)NULL;
    }
    
    return false;
     44c:	80 e0       	ldi	r24, 0x00	; 0
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <air_capture_deinit>:


void air_capture_deinit(void) {
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
    /* Ensure that the AirCapture application has been running and memory allocated
     * before it can be teared down.
     */
    if (AC_NOT_INITIALIZED != ac_state) {
     458:	80 91 00 01 	lds	r24, 0x0100
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	89 f0       	breq	.+34     	; 0x482 <air_capture_deinit+0x2e>
     460:	c8 e9       	ldi	r28, 0x98	; 152
     462:	d1 e0       	ldi	r29, 0x01	; 1
        /* Free allocated memory. */
        for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
            vrt_mem_free(acdu_fifo[i]);
     464:	88 81       	ld	r24, Y
     466:	99 81       	ldd	r25, Y+1	; 0x01
     468:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
            acdu_fifo[i] = (acdu_t *)NULL;
     46c:	19 92       	st	Y+, r1
     46e:	19 92       	st	Y+, r1
    /* Ensure that the AirCapture application has been running and memory allocated
     * before it can be teared down.
     */
    if (AC_NOT_INITIALIZED != ac_state) {
        /* Free allocated memory. */
        for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	cc 3a       	cpi	r28, 0xAC	; 172
     474:	d8 07       	cpc	r29, r24
     476:	b1 f7       	brne	.-20     	; 0x464 <air_capture_deinit+0x10>
        }
        
        /* Deinit the radio transceiver and set the internal status variable to
         * reflect the new state.
         */
        rf230_deinit();
     478:	0e 94 ad 1a 	call	0x355a	; 0x355a <rf230_deinit>
        ac_state = AC_NOT_INITIALIZED;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 00 01 	sts	0x0100, r24
    } // END: if (AC_NOT_INITIALIZED != ac_state) ...
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <air_capture_task>:

/* This function must be called periodically to get captured data from the 
 * RF230 device driver over the USB interface to the connected PC. Or scan data 
 * to the PC.
 */
void air_capture_task(void) {
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	00 d0       	rcall	.+0      	; 0x48e <air_capture_task+0x6>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
    /* The air_capture_task function has two main function to fullfill:
     * - If the ac_state equals AC_BUSY_CAPTURING it will send AirCapture data if available.
     * - If the ac_state equals AC_BUSY_SCANNING it will send scan data if available.
     */
    if (AC_BUSY_CAPTURING == ac_state) { 
     492:	80 91 00 01 	lds	r24, 0x0100
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	09 f0       	breq	.+2      	; 0x49c <air_capture_task+0x14>
     49a:	b4 c0       	rjmp	.+360    	; 0x604 <air_capture_task+0x17c>
        /* Check if there is data to be transmitted. */
        if (0 == items_used) {
     49c:	80 91 95 01 	lds	r24, 0x0195
     4a0:	88 23       	and	r24, r24
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <air_capture_task+0x1e>
     4a4:	b7 c0       	rjmp	.+366    	; 0x614 <air_capture_task+0x18c>
            return;
        }
        
        /* Select the event EP. */
        UENUM = EP_EVENT;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 93 e9 00 	sts	0x00E9, r24
        
        /* Check that it is possible to fill at least one bank (64 bytes) in the
         * DPRAM.
         */
        if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
     4ac:	80 91 e8 00 	lds	r24, 0x00E8
     4b0:	80 ff       	sbrs	r24, 0
     4b2:	b0 c0       	rjmp	.+352    	; 0x614 <air_capture_task+0x18c>
            return;
        }
        
        /* ACK TX_IN. */
        UEINTX &= ~(1 << TXINI);
     4b4:	80 91 e8 00 	lds	r24, 0x00E8
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	80 93 e8 00 	sts	0x00E8, r24
         * One acdu must be taken from the fifo's tail, however the tail's
         * position will not be updated until the complete acdu is written. This
         * scheme is used to prevent data loss in the event pump, with varying
         * poll frequency from the PC.
         */
        if (0 == bytes_left) {
     4be:	80 91 93 01 	lds	r24, 0x0193
     4c2:	81 11       	cpse	r24, r1
     4c4:	4f c0       	rjmp	.+158    	; 0x564 <air_capture_task+0xdc>
            if (0 == packets_left) {
     4c6:	80 91 92 01 	lds	r24, 0x0192
     4ca:	81 11       	cpse	r24, r1
     4cc:	21 c0       	rjmp	.+66     	; 0x510 <air_capture_task+0x88>
                /* Get new acdu, since all bytes and all packets in transaction
                 * are sent. The calculations below assumes an EP size of 64 bytes.
                 * The driver has been implemented for USB bulk transmission.
                 */
                data_ptr = (uint8_t *)acdu_fifo[fifo_tail];
     4ce:	e0 91 96 01 	lds	r30, 0x0196
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e8 56       	subi	r30, 0x68	; 104
     4da:	fe 4f       	sbci	r31, 0xFE	; 254
     4dc:	01 90       	ld	r0, Z+
     4de:	f0 81       	ld	r31, Z
     4e0:	e0 2d       	mov	r30, r0
     4e2:	f0 93 91 01 	sts	0x0191, r31
     4e6:	e0 93 90 01 	sts	0x0190, r30
                bytes_left = *(data_ptr + 1);
     4ea:	21 81       	ldd	r18, Z+1	; 0x01
     4ec:	20 93 93 01 	sts	0x0193, r18
                packets_left = (uint8_t)(((uint16_t)(bytes_left + 64 - 1)) >> 6);
     4f0:	82 2f       	mov	r24, r18
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	cf 96       	adiw	r24, 0x3f	; 63
     4f6:	56 e0       	ldi	r21, 0x06	; 6
     4f8:	96 95       	lsr	r25
     4fa:	87 95       	ror	r24
     4fc:	5a 95       	dec	r21
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <air_capture_task+0x70>
     500:	80 93 92 01 	sts	0x0192, r24
                if (0 == (bytes_left % 64)) { packets_left++ ; }
     504:	2f 73       	andi	r18, 0x3F	; 63
     506:	71 f5       	brne	.+92     	; 0x564 <air_capture_task+0xdc>
     508:	8f 5f       	subi	r24, 0xFF	; 255
     50a:	80 93 92 01 	sts	0x0192, r24
     50e:	2a c0       	rjmp	.+84     	; 0x564 <air_capture_task+0xdc>
            } else if (1 == packets_left) {
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	39 f5       	brne	.+78     	; 0x562 <air_capture_task+0xda>
                /* Send Zero Length Packet and then update tail pointer. */
                UEINTX &= ~(1 << FIFOCON);
     514:	80 91 e8 00 	lds	r24, 0x00E8
     518:	8f 77       	andi	r24, 0x7F	; 127
     51a:	80 93 e8 00 	sts	0x00E8, r24
                
                /* Update FIFO tail. */
                ENTER_CRITICAL_REGION();
     51e:	8f b7       	in	r24, 0x3f	; 63
     520:	8a 83       	std	Y+2, r24	; 0x02
     522:	f8 94       	cli
                
                if ((AC_ACDU_FIFO_SIZE - 1) == fifo_tail) {
     524:	80 91 96 01 	lds	r24, 0x0196
     528:	89 30       	cpi	r24, 0x09	; 9
     52a:	19 f4       	brne	.+6      	; 0x532 <air_capture_task+0xaa>
                    fifo_tail = 0;
     52c:	10 92 96 01 	sts	0x0196, r1
     530:	03 c0       	rjmp	.+6      	; 0x538 <air_capture_task+0xb0>
                } else {
                    fifo_tail++;
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	80 93 96 01 	sts	0x0196, r24
                } // END: if ((AC_ACDU_FIFO_SIZE - 1) == fifo_tail) ...
                
                items_used--;
     538:	80 91 95 01 	lds	r24, 0x0195
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	80 93 95 01 	sts	0x0195, r24
                items_free++;
     542:	80 91 94 01 	lds	r24, 0x0194
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	80 93 94 01 	sts	0x0194, r24
                
                nmbr_of_frames++;
     54c:	80 91 b4 01 	lds	r24, 0x01B4
     550:	90 91 b5 01 	lds	r25, 0x01B5
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	90 93 b5 01 	sts	0x01B5, r25
     55a:	80 93 b4 01 	sts	0x01B4, r24
                
                LEAVE_CRITICAL_REGION();
     55e:	8a 81       	ldd	r24, Y+2	; 0x02
     560:	4f c0       	rjmp	.+158    	; 0x600 <air_capture_task+0x178>
                return;
            } else {
                /* Turn the orange LED on to signal a level 2. error. The 
                 * application should be restarted.
                 */
                LED_ORANGE_ON();
     562:	76 98       	cbi	0x0e, 6	; 14
            }// END: if (0 == packets_left) ...
        } // END: if ((0 == bytes_left) ...
        
        /* At least one byte to send. */
        do {
            UEDATX = *data_ptr;
     564:	e0 91 90 01 	lds	r30, 0x0190
     568:	f0 91 91 01 	lds	r31, 0x0191
     56c:	80 81       	ld	r24, Z
     56e:	80 93 f1 00 	sts	0x00F1, r24
            data_ptr++;
     572:	80 91 90 01 	lds	r24, 0x0190
     576:	90 91 91 01 	lds	r25, 0x0191
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	90 93 91 01 	sts	0x0191, r25
     580:	80 93 90 01 	sts	0x0190, r24
            bytes_left--;
     584:	80 91 93 01 	lds	r24, 0x0193
     588:	81 50       	subi	r24, 0x01	; 1
     58a:	80 93 93 01 	sts	0x0193, r24
        } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
     58e:	88 23       	and	r24, r24
     590:	21 f0       	breq	.+8      	; 0x59a <air_capture_task+0x112>
     592:	80 91 e8 00 	lds	r24, 0x00E8
     596:	85 fd       	sbrc	r24, 5
     598:	e5 cf       	rjmp	.-54     	; 0x564 <air_capture_task+0xdc>
        
        /* Either 64 bytes or the last byte in a packet is written. */
        packets_left--;
     59a:	80 91 92 01 	lds	r24, 0x0192
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 92 01 	sts	0x0192, r24
        
        /* ACK writing to the bank. */
        UEINTX &= ~(1 << FIFOCON);
     5a4:	80 91 e8 00 	lds	r24, 0x00E8
     5a8:	8f 77       	andi	r24, 0x7F	; 127
     5aa:	80 93 e8 00 	sts	0x00E8, r24
        
        /* Check if it is time to move tail. */
        if ((0 == bytes_left) && (0 == packets_left)) {
     5ae:	80 91 93 01 	lds	r24, 0x0193
     5b2:	81 11       	cpse	r24, r1
     5b4:	2f c0       	rjmp	.+94     	; 0x614 <air_capture_task+0x18c>
     5b6:	80 91 92 01 	lds	r24, 0x0192
     5ba:	81 11       	cpse	r24, r1
     5bc:	2b c0       	rjmp	.+86     	; 0x614 <air_capture_task+0x18c>
            ENTER_CRITICAL_REGION();
     5be:	8f b7       	in	r24, 0x3f	; 63
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	f8 94       	cli
                
            if ((AC_ACDU_FIFO_SIZE - 1) == fifo_tail) {
     5c4:	80 91 96 01 	lds	r24, 0x0196
     5c8:	89 30       	cpi	r24, 0x09	; 9
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <air_capture_task+0x14a>
                fifo_tail = 0;
     5cc:	10 92 96 01 	sts	0x0196, r1
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <air_capture_task+0x150>
            } else {
                fifo_tail++;
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 96 01 	sts	0x0196, r24
            } // END: if ((AC_ACDU_FIFO_SIZE - 1) == fifo_tail) ...
                
            items_used--;
     5d8:	80 91 95 01 	lds	r24, 0x0195
     5dc:	81 50       	subi	r24, 0x01	; 1
     5de:	80 93 95 01 	sts	0x0195, r24
            items_free++;
     5e2:	80 91 94 01 	lds	r24, 0x0194
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 94 01 	sts	0x0194, r24
                
            nmbr_of_frames++;
     5ec:	80 91 b4 01 	lds	r24, 0x01B4
     5f0:	90 91 b5 01 	lds	r25, 0x01B5
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	90 93 b5 01 	sts	0x01B5, r25
     5fa:	80 93 b4 01 	sts	0x01B4, r24
                
            LEAVE_CRITICAL_REGION(); 
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	8f bf       	out	0x3f, r24	; 63
     602:	08 c0       	rjmp	.+16     	; 0x614 <air_capture_task+0x18c>
        } // END: if ((0 == bytes_left) && (0 == packets_left)) ...
    } else if (AC_BUSY_SCANNING == ac_state) {
     604:	80 31       	cpi	r24, 0x10	; 16
     606:	31 f4       	brne	.+12     	; 0x614 <air_capture_task+0x18c>
        /* Not implemented yet, so only a dummy is written for debug purposes. */
        usb_ep_write(EP_EVENT, 8, (uint8_t *)"SCANSCAN");
     608:	47 e8       	ldi	r20, 0x87	; 135
     60a:	51 e0       	ldi	r21, 0x01	; 1
     60c:	68 e0       	ldi	r22, 0x08	; 8
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 54 22 	call	0x44a8	; 0x44a8 <usb_ep_write>
    } else {
        /* Do nothing. Any other state than AC_BUSY_CAPTURING and AC_BUSY_SCANNING
         * does not require any handling.
         */
    } // END: if (AC_BUSY_CAPTURING != ac_state) ...
}
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <air_capture_set_channel>:

/* This function will set new channel for the radio transceiver to work on. */
bool air_capture_set_channel(uint8_t channel) {
     61e:	cf 93       	push	r28
     620:	c8 2f       	mov	r28, r24
    
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_IDLE != ac_state) { return false; }
     622:	80 91 00 01 	lds	r24, 0x0100
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	19 f5       	brne	.+70     	; 0x670 <air_capture_set_channel+0x52>
    if ((channel < AC_MIN_CHANNEL) || (channel > AC_MAX_CHANNEL)) { return false; }
     62a:	85 ef       	ldi	r24, 0xF5	; 245
     62c:	8c 0f       	add	r24, r28
     62e:	80 31       	cpi	r24, 0x10	; 16
     630:	f8 f4       	brcc	.+62     	; 0x670 <air_capture_set_channel+0x52>
    
    /* Force TRX_OFF mode and wait for transition to complete. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     632:	23 e0       	ldi	r18, 0x03	; 3
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	6f e1       	ldi	r22, 0x1F	; 31
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
     63e:	8b ef       	ldi	r24, 0xFB	; 251
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <air_capture_set_channel+0x24>
     646:	00 c0       	rjmp	.+0      	; 0x648 <air_capture_set_channel+0x2a>
     648:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Set channel and verify. */
    bool ac_set_channel_status = false;
    if (TRX_OFF == rf230_subregister_read(SR_TRX_STATUS)) {
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	6f e1       	ldi	r22, 0x1F	; 31
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     654:	88 30       	cpi	r24, 0x08	; 8
     656:	61 f4       	brne	.+24     	; 0x670 <air_capture_set_channel+0x52>
        /* Set the new channel and verify. */
        rf230_subregister_write(SR_CHANNEL, channel);
     658:	2c 2f       	mov	r18, r28
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	6f e1       	ldi	r22, 0x1F	; 31
     65e:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        if (channel != rf230_subregister_read(SR_CHANNEL)) {
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	6f e1       	ldi	r22, 0x1F	; 31
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	c8 13       	cpse	r28, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
            ac_set_channel_status = true;
        } // END: if (channel != rf230_subregister_read(SR_CHANNEL)) ...
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_set_channel_status;
}
     672:	89 2f       	mov	r24, r25
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <air_capture_open_stream>:

/* This function will try to start capturing frames from the air. */
bool air_capture_open_stream(void) {
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return false; }
     682:	80 91 00 01 	lds	r24, 0x0100
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	11 f0       	breq	.+4      	; 0x68e <air_capture_open_stream+0x16>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	48 c0       	rjmp	.+144    	; 0x71e <air_capture_open_stream+0xa6>
    
    /* Initialize the frame pool in the RF230 device driver and set the radio 
     * transceiver in receive mode. 
     */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     68e:	23 e0       	ldi	r18, 0x03	; 3
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	6f e1       	ldi	r22, 0x1F	; 31
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
     69a:	8b ef       	ldi	r24, 0xFB	; 251
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <air_capture_open_stream+0x26>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <air_capture_open_stream+0x2c>
     6a4:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool ac_open_stream_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { 
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	6f e1       	ldi	r22, 0x1F	; 31
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     6b0:	88 30       	cpi	r24, 0x08	; 8
     6b2:	59 f7       	brne	.-42     	; 0x68a <air_capture_open_stream+0x12>
    } else {
        /* Do transition from TRX_OFF to RF_ON. */
        rf230_subregister_write(SR_TRX_CMD, RX_ON);
     6b4:	26 e0       	ldi	r18, 0x06	; 6
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	6f e1       	ldi	r22, 0x1F	; 31
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
     6c0:	87 e6       	ldi	r24, 0x67	; 103
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <air_capture_open_stream+0x4c>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <air_capture_open_stream+0x52>
     6ca:	00 00       	nop
        delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
        
        /* Verify that the state transition to RX_ON was successful. */
        if (RX_ON != rf230_subregister_read(SR_TRX_STATUS)) {
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	6f e1       	ldi	r22, 0x1F	; 31
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     6d6:	86 30       	cpi	r24, 0x06	; 6
     6d8:	c1 f6       	brne	.-80     	; 0x68a <air_capture_open_stream+0x12>
        } else {
            /* Reset the event FIFO. */
            ENTER_CRITICAL_REGION();
     6da:	8f b7       	in	r24, 0x3f	; 63
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	f8 94       	cli
            
            fifo_head = 0;
     6e0:	10 92 97 01 	sts	0x0197, r1
            fifo_tail = 0;
     6e4:	10 92 96 01 	sts	0x0196, r1
            items_used = 0;
     6e8:	10 92 95 01 	sts	0x0195, r1
            items_free = AC_ACDU_FIFO_SIZE;
     6ec:	8a e0       	ldi	r24, 0x0A	; 10
     6ee:	80 93 94 01 	sts	0x0194, r24
            
            bytes_left = 0;
     6f2:	10 92 93 01 	sts	0x0193, r1
            packets_left = 0;
     6f6:	10 92 92 01 	sts	0x0192, r1
            data_ptr = NULL;
     6fa:	10 92 91 01 	sts	0x0191, r1
     6fe:	10 92 90 01 	sts	0x0190, r1
            
            nmbr_of_frames = 0;
     702:	10 92 b5 01 	sts	0x01B5, r1
     706:	10 92 b4 01 	sts	0x01B4, r1
            
            LEAVE_CRITICAL_REGION();
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	8f bf       	out	0x3f, r24	; 63
            
            /* Set callback for captured frames and update AirCapture status. */
            rf230_set_callback_handler(air_capture_callback);
     70e:	8e ee       	ldi	r24, 0xEE	; 238
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 8f 1b 	call	0x371e	; 0x371e <rf230_set_callback_handler>
            ac_state = AC_BUSY_CAPTURING;
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	80 93 00 01 	sts	0x0100, r24
            ac_open_stream_status = true;
     71c:	81 e0       	ldi	r24, 0x01	; 1
        } // END: if (RX_ON != rf230_subregister_read(SR_TRX_STATUS)) ...
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_open_stream_status;
}
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <air_capture_close_stream>:

/* This function stops the radio transceiver from capturing frames. */
bool air_capture_close_stream(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_CAPTURING != ac_state) { return false; }
     726:	80 91 00 01 	lds	r24, 0x0100
     72a:	84 30       	cpi	r24, 0x04	; 4
     72c:	11 f0       	breq	.+4      	; 0x732 <air_capture_close_stream+0xc>
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	08 95       	ret
    
    /* Close stream. */
    rf230_clear_callback_handler();
     732:	0e 94 a1 1b 	call	0x3742	; 0x3742 <rf230_clear_callback_handler>
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     736:	23 e0       	ldi	r18, 0x03	; 3
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	6f e1       	ldi	r22, 0x1F	; 31
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
     742:	8b ef       	ldi	r24, 0xFB	; 251
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <air_capture_close_stream+0x20>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <air_capture_close_stream+0x26>
     74c:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Verify that the TRX_OFF state was entered. */
    bool ac_close_stream_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { 
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	6f e1       	ldi	r22, 0x1F	; 31
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     758:	88 30       	cpi	r24, 0x08	; 8
     75a:	49 f7       	brne	.-46     	; 0x72e <air_capture_close_stream+0x8>
    } else {
        ac_state = AC_IDLE;
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	80 93 00 01 	sts	0x0100, r24
        ac_close_stream_status = true;
     762:	81 e0       	ldi	r24, 0x01	; 1
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_close_stream_status;
}
     764:	08 95       	ret

00000766 <air_capture_jammer_on>:
}

/* This function starts the jammer. */
bool air_capture_jammer_on(void) {
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return false; }
     766:	80 91 00 01 	lds	r24, 0x0100
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	51 f5       	brne	.+84     	; 0x7c2 <air_capture_jammer_on+0x5c>
    
    /* Check that the radio transceiver is in TRX_OFF. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { return false; }
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	6f e1       	ldi	r22, 0x1F	; 31
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	19 f5       	brne	.+70     	; 0x7c2 <air_capture_jammer_on+0x5c>
    
    /* Download set of randomized data and start PBRS mode. See Appendix A in the
     * RF230's datasheet for detailed instructions on how to use the different
     * internal test modes.
     */
    rf230_frame_write_P(sizeof(jammer_frame), jammer_frame);
     77c:	6a e1       	ldi	r22, 0x1A	; 26
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	8f e7       	ldi	r24, 0x7F	; 127
     782:	0e 94 48 1b 	call	0x3690	; 0x3690 <rf230_frame_write_P>
    rf230_register_write(0x36, 0x0F);
     786:	6f e0       	ldi	r22, 0x0F	; 15
     788:	86 e3       	ldi	r24, 0x36	; 54
     78a:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(0x3D, 0x00);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	8d e3       	ldi	r24, 0x3D	; 61
     792:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_set_tst_high();
     796:	2e 9a       	sbi	0x05, 6	; 5
    
    /* Do state transition to PLL_ON and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_PLL_ON);
     798:	29 e0       	ldi	r18, 0x09	; 9
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	6f e1       	ldi	r22, 0x1F	; 31
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
     7a4:	87 e6       	ldi	r24, 0x67	; 103
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <air_capture_jammer_on+0x42>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <air_capture_jammer_on+0x48>
     7ae:	00 00       	nop
    delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
    
    bool ac_jammer_on_status = false;
    if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) { 
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	6f e1       	ldi	r22, 0x1F	; 31
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
     7ba:	89 30       	cpi	r24, 0x09	; 9
     7bc:	21 f0       	breq	.+8      	; 0x7c6 <air_capture_jammer_on+0x60>
        /* Reset the radio transceiver. */
        (bool)rf230_init();
     7be:	0e 94 96 1a 	call	0x352c	; 0x352c <rf230_init>
    
    /* Do state transition to PLL_ON and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_PLL_ON);
    delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
    
    bool ac_jammer_on_status = false;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	08 95       	ret
    if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) { 
        /* Reset the radio transceiver. */
        (bool)rf230_init();
    } else {
        /* Start PBRS mode and update AirCapture status. */
        rf230_register_write(0x02, 0x02);
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
        ac_state = AC_BUSY_JAMMING;
     7ce:	88 e0       	ldi	r24, 0x08	; 8
     7d0:	80 93 00 01 	sts	0x0100, r24
        ac_jammer_on_status = true;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
    } // END: if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_jammer_on_status;
}
     7d6:	08 95       	ret

000007d8 <air_capture_jammer_off>:

/* This function stops the jammer. */
bool air_capture_jammer_off(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_JAMMING != ac_state) { return false; }
     7d8:	80 91 00 01 	lds	r24, 0x0100
     7dc:	88 30       	cpi	r24, 0x08	; 8
     7de:	11 f0       	breq	.+4      	; 0x7e4 <air_capture_jammer_off+0xc>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
    
    /* Stop scan: Reset the radio transceiver by re-initializing it. */ 
    bool ac_jammer_off_status = false;
    if (true != rf230_init()) {
     7e4:	0e 94 96 1a 	call	0x352c	; 0x352c <rf230_init>
     7e8:	88 23       	and	r24, r24
     7ea:	d1 f3       	breq	.-12     	; 0x7e0 <air_capture_jammer_off+0x8>
    } else {
        ac_state = AC_IDLE;
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	90 93 00 01 	sts	0x0100, r25
        ac_jammer_off_status = true;
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_jammer_off_status;
}
     7f2:	08 95       	ret

000007f4 <at24cxx_init>:
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/
bool at24cxx_init(void) {
    /* Enable the TWI module. */
    AT24CXX_PRR &= ~(1 << AT24CXX_PRR_BIT);
     7f4:	e4 e6       	ldi	r30, 0x64	; 100
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	8f 77       	andi	r24, 0x7F	; 127
     7fc:	80 83       	st	Z, r24
    
    /* Set TWI speed. */
    AT24CXX_BRR = AT24CXX_BRR_CONF;
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	80 93 b8 00 	sts	0x00B8, r24
    AT24CXX_SET_PRESCALER(AT24CXX_PRESCALER_CONF);
     804:	e9 eb       	ldi	r30, 0xB9	; 185
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	80 83       	st	Z, r24
    
    return true;
}
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret

00000810 <at24cxx_deinit>:


void at24cxx_deinit(void) {
    /* Disable the TWI module. */
    AT24CXX_PRR |= (1 << AT24CXX_PRR_BIT);
     810:	e4 e6       	ldi	r30, 0x64	; 100
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	80 68       	ori	r24, 0x80	; 128
     818:	80 83       	st	Z, r24
     81a:	08 95       	ret

0000081c <at24cxx_read_byte>:
}


bool at24cxx_read_byte(uint8_t byte_address, uint8_t *read_byte) {
    /* Perform sanity check on function parameters. */
    if (NULL == read_byte) { return false; }
     81c:	61 15       	cp	r22, r1
     81e:	71 05       	cpc	r23, r1
     820:	09 f4       	brne	.+2      	; 0x824 <at24cxx_read_byte+0x8>
     822:	84 c0       	rjmp	.+264    	; 0x92c <at24cxx_read_byte+0x110>
    
    /* Initialize local variable. */
    bool rx_status = false;
    
    /* Send start condition. */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
     824:	94 ea       	ldi	r25, 0xA4	; 164
     826:	90 93 bc 00 	sts	0x00BC, r25
    uint8_t time_out = 0xFF;
     82a:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
     82c:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     82e:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
     832:	27 fd       	sbrc	r18, 7
     834:	02 c0       	rjmp	.+4      	; 0x83a <at24cxx_read_byte+0x1e>
    uint8_t time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     836:	91 11       	cpse	r25, r1
     838:	f9 cf       	rjmp	.-14     	; 0x82c <at24cxx_read_byte+0x10>
             (0 != time_out));
    
    /* Check that the start condition was successfully transmitted. */
    if ((AT24CXX_START != AT24CXX_GET_STATUS()) || (0 == time_out)) {
     83a:	20 91 b9 00 	lds	r18, 0x00B9
     83e:	28 7f       	andi	r18, 0xF8	; 248
     840:	28 30       	cpi	r18, 0x08	; 8
     842:	11 f0       	breq	.+4      	; 0x848 <at24cxx_read_byte+0x2c>
bool at24cxx_read_byte(uint8_t byte_address, uint8_t *read_byte) {
    /* Perform sanity check on function parameters. */
    if (NULL == read_byte) { return false; }
    
    /* Initialize local variable. */
    bool rx_status = false;
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	6b c0       	rjmp	.+214    	; 0x91e <at24cxx_read_byte+0x102>
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
             (0 != time_out));
    
    /* Check that the start condition was successfully transmitted. */
    if ((AT24CXX_START != AT24CXX_GET_STATUS()) || (0 == time_out)) {
     848:	99 23       	and	r25, r25
     84a:	e1 f3       	breq	.-8      	; 0x844 <at24cxx_read_byte+0x28>
        goto quit;
    }
    
    /* Send SLA + W. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_W;
     84c:	90 ea       	ldi	r25, 0xA0	; 160
     84e:	90 93 bb 00 	sts	0x00BB, r25
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
     852:	94 e8       	ldi	r25, 0x84	; 132
     854:	90 93 bc 00 	sts	0x00BC, r25
    
    time_out = 0xFF;
     858:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
     85a:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     85c:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
     860:	27 fd       	sbrc	r18, 7
     862:	02 c0       	rjmp	.+4      	; 0x868 <at24cxx_read_byte+0x4c>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     864:	91 11       	cpse	r25, r1
     866:	f9 cf       	rjmp	.-14     	; 0x85a <at24cxx_read_byte+0x3e>
             (0 != time_out));
    
    /* Check that the SLA + W was ACK'ed. */
    if (AT24CXX_MT_SLA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
     868:	20 91 b9 00 	lds	r18, 0x00B9
     86c:	28 7f       	andi	r18, 0xF8	; 248
     86e:	28 31       	cpi	r18, 0x18	; 24
     870:	49 f7       	brne	.-46     	; 0x844 <at24cxx_read_byte+0x28>
     872:	99 23       	and	r25, r25
     874:	39 f3       	breq	.-50     	; 0x844 <at24cxx_read_byte+0x28>
        goto quit;
    }
    
    /* Send address. */
    AT24CXX_DATA_REG = byte_address;
     876:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
     87a:	84 e8       	ldi	r24, 0x84	; 132
     87c:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
     880:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
     882:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     884:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
     888:	97 fd       	sbrc	r25, 7
     88a:	02 c0       	rjmp	.+4      	; 0x890 <at24cxx_read_byte+0x74>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     88c:	81 11       	cpse	r24, r1
     88e:	f9 cf       	rjmp	.-14     	; 0x882 <at24cxx_read_byte+0x66>
             (0 != time_out));
    
    /* Check that the address was ACK'ed. */
    if (AT24CXX_MT_DATA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
     890:	90 91 b9 00 	lds	r25, 0x00B9
     894:	98 7f       	andi	r25, 0xF8	; 248
     896:	98 32       	cpi	r25, 0x28	; 40
     898:	a9 f6       	brne	.-86     	; 0x844 <at24cxx_read_byte+0x28>
     89a:	88 23       	and	r24, r24
     89c:	99 f2       	breq	.-90     	; 0x844 <at24cxx_read_byte+0x28>
    }
    
    /* Send Rep. start. Must change to receive mode to fetch data from the AT24CXX 
     * serial EEPROM.
     */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
     89e:	84 ea       	ldi	r24, 0xA4	; 164
     8a0:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
     8a6:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     8a8:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
     8ac:	97 fd       	sbrc	r25, 7
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <at24cxx_read_byte+0x98>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     8b0:	81 11       	cpse	r24, r1
     8b2:	f9 cf       	rjmp	.-14     	; 0x8a6 <at24cxx_read_byte+0x8a>
             (0 != time_out));
    
    if (AT24CXX_REPSTART != AT24CXX_GET_STATUS() || (0 == time_out)) {
     8b4:	90 91 b9 00 	lds	r25, 0x00B9
     8b8:	98 7f       	andi	r25, 0xF8	; 248
     8ba:	90 31       	cpi	r25, 0x10	; 16
     8bc:	19 f6       	brne	.-122    	; 0x844 <at24cxx_read_byte+0x28>
     8be:	88 23       	and	r24, r24
     8c0:	09 f2       	breq	.-126    	; 0x844 <at24cxx_read_byte+0x28>
        goto quit;
    }
    
    /* Send SLA + R. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_R;
     8c2:	81 ea       	ldi	r24, 0xA1	; 161
     8c4:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
     8c8:	84 e8       	ldi	r24, 0x84	; 132
     8ca:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
     8d0:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     8d2:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
     8d6:	97 fd       	sbrc	r25, 7
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <at24cxx_read_byte+0xc2>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     8da:	81 11       	cpse	r24, r1
     8dc:	f9 cf       	rjmp	.-14     	; 0x8d0 <at24cxx_read_byte+0xb4>
             (0 != time_out));
    
    /* Check that the SLA + R was transmitted. */
    if (AT24CXX_MR_SLA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
     8de:	90 91 b9 00 	lds	r25, 0x00B9
     8e2:	98 7f       	andi	r25, 0xF8	; 248
     8e4:	90 34       	cpi	r25, 0x40	; 64
     8e6:	09 f0       	breq	.+2      	; 0x8ea <at24cxx_read_byte+0xce>
     8e8:	ad cf       	rjmp	.-166    	; 0x844 <at24cxx_read_byte+0x28>
     8ea:	88 23       	and	r24, r24
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <at24cxx_read_byte+0xd4>
     8ee:	aa cf       	rjmp	.-172    	; 0x844 <at24cxx_read_byte+0x28>
        goto quit;
    }
    
    /* Poll for data. */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
     8f0:	84 e8       	ldi	r24, 0x84	; 132
     8f2:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
     8f8:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     8fa:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
     8fe:	97 fd       	sbrc	r25, 7
     900:	02 c0       	rjmp	.+4      	; 0x906 <at24cxx_read_byte+0xea>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
     902:	81 11       	cpse	r24, r1
     904:	f9 cf       	rjmp	.-14     	; 0x8f8 <at24cxx_read_byte+0xdc>
             (0 != time_out));
    
    /* Check that the NACK was received. If NACK was received it is time to
     * read data from the TWI data register.
     */
    if (AT24CXX_MR_DATA_NACK == AT24CXX_GET_STATUS() || (0 == time_out)) {
     906:	90 91 b9 00 	lds	r25, 0x00B9
     90a:	98 7f       	andi	r25, 0xF8	; 248
     90c:	98 35       	cpi	r25, 0x58	; 88
     90e:	11 f0       	breq	.+4      	; 0x914 <at24cxx_read_byte+0xf8>
     910:	81 11       	cpse	r24, r1
     912:	98 cf       	rjmp	.-208    	; 0x844 <at24cxx_read_byte+0x28>
        *read_byte = AT24CXX_DATA_REG;
     914:	80 91 bb 00 	lds	r24, 0x00BB
     918:	fb 01       	movw	r30, r22
     91a:	80 83       	st	Z, r24
        rx_status = true;
     91c:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    /* This label is used to terminate the TWI transaction with a stop condition. */
    quit:
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
     91e:	94 e9       	ldi	r25, 0x94	; 148
     920:	90 93 bc 00 	sts	0x00BC, r25
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT);
     924:	90 e8       	ldi	r25, 0x80	; 128
     926:	90 93 bc 00 	sts	0x00BC, r25
    
    return rx_status;
     92a:	08 95       	ret
}


bool at24cxx_read_byte(uint8_t byte_address, uint8_t *read_byte) {
    /* Perform sanity check on function parameters. */
    if (NULL == read_byte) { return false; }
     92c:	80 e0       	ldi	r24, 0x00	; 0
    quit:
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT);
    
    return rx_status;
}
     92e:	08 95       	ret

00000930 <cmd_nwk_data_confirm_callback>:
                           /* NWK Layer callbacks */


static void cmd_nwk_data_confirm_callback(nlde_data_conf_t *ndc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     930:	24 e0       	ldi	r18, 0x04	; 4
     932:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     936:	20 91 e8 00 	lds	r18, 0x00E8
     93a:	2e 7f       	andi	r18, 0xFE	; 254
     93c:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (ndc->Status)) {
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	88 23       	and	r24, r24
     946:	11 f0       	breq	.+4      	; 0x94c <cmd_nwk_data_confirm_callback+0x1c>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     948:	8b e8       	ldi	r24, 0x8B	; 139
     94a:	01 c0       	rjmp	.+2      	; 0x94e <cmd_nwk_data_confirm_callback+0x1e>
    } else {
        Usb_write_byte(RESP_SUCCESS);
     94c:	80 e8       	ldi	r24, 0x80	; 128
     94e:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     952:	80 91 e8 00 	lds	r24, 0x00E8
     956:	8f 77       	andi	r24, 0x7F	; 127
     958:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. */
    MEM_FREE(ndr);
     95c:	80 91 d0 01 	lds	r24, 0x01D0
     960:	90 91 d1 01 	lds	r25, 0x01D1
     964:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>

00000968 <cmd_nwk_leave_confirm_callback>:
}


static void cmd_nwk_leave_confirm_callback(nlme_leave_conf_t *nlc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     968:	24 e0       	ldi	r18, 0x04	; 4
     96a:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     96e:	20 91 e8 00 	lds	r18, 0x00E8
     972:	2e 7f       	andi	r18, 0xFE	; 254
     974:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (nlc->Status)) {
     978:	fc 01       	movw	r30, r24
     97a:	80 85       	ldd	r24, Z+8	; 0x08
     97c:	88 23       	and	r24, r24
     97e:	11 f0       	breq	.+4      	; 0x984 <cmd_nwk_leave_confirm_callback+0x1c>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     980:	8b e8       	ldi	r24, 0x8B	; 139
     982:	01 c0       	rjmp	.+2      	; 0x986 <cmd_nwk_leave_confirm_callback+0x1e>
    } else {
        Usb_write_byte(RESP_SUCCESS);
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     98a:	80 91 e8 00 	lds	r24, 0x00E8
     98e:	8f 77       	andi	r24, 0x7F	; 127
     990:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_leave_request. */
    MEM_FREE(nlr);
     994:	80 91 cc 01 	lds	r24, 0x01CC
     998:	90 91 cd 01 	lds	r25, 0x01CD
     99c:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>

000009a0 <cmd_nwk_discovery_confirm_callback>:
}


static void cmd_nwk_discovery_confirm_callback(nlme_network_discovery_conf_t *ndc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     9a0:	24 e0       	ldi	r18, 0x04	; 4
     9a2:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     9a6:	20 91 e8 00 	lds	r18, 0x00E8
     9aa:	2e 7f       	andi	r18, 0xFE	; 254
     9ac:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (ndc->Status)) {
     9b0:	8f 5b       	subi	r24, 0xBF	; 191
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
     9b8:	88 23       	and	r24, r24
     9ba:	11 f0       	breq	.+4      	; 0x9c0 <cmd_nwk_discovery_confirm_callback+0x20>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     9bc:	8b e8       	ldi	r24, 0x8B	; 139
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <cmd_nwk_discovery_confirm_callback+0x22>
    } else {
        Usb_write_byte(RESP_SUCCESS);
     9c0:	80 e8       	ldi	r24, 0x80	; 128
     9c2:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     9c6:	80 91 e8 00 	lds	r24, 0x00E8
     9ca:	8f 77       	andi	r24, 0x7F	; 127
     9cc:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_discovery_request. */
    MEM_FREE(nndr);
     9d0:	80 91 ca 01 	lds	r24, 0x01CA
     9d4:	90 91 cb 01 	lds	r25, 0x01CB
     9d8:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>

000009dc <cmd_nwk_join_confirm_callback>:
}


static void cmd_nwk_join_confirm_callback(nlme_join_conf_t *njc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     9dc:	24 e0       	ldi	r18, 0x04	; 4
     9de:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     9e2:	20 91 e8 00 	lds	r18, 0x00E8
     9e6:	2e 7f       	andi	r18, 0xFE	; 254
     9e8:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (njc->Status)) {
     9ec:	fc 01       	movw	r30, r24
     9ee:	84 81       	ldd	r24, Z+4	; 0x04
     9f0:	88 23       	and	r24, r24
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <cmd_nwk_join_confirm_callback+0x1c>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     9f4:	8b e8       	ldi	r24, 0x8B	; 139
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <cmd_nwk_join_confirm_callback+0x28>
    } else {
        IEEE802_15_4_SET_RX_ON_WHEN_IDLE(true);
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 bd 11 	sts	0x11BD, r24
        (uint8_t)ieee802_15_4_rx_enable();
     9fe:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <ieee802_15_4_rx_enable>
        Usb_write_byte(RESP_SUCCESS);
     a02:	80 e8       	ldi	r24, 0x80	; 128
     a04:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     a08:	80 91 e8 00 	lds	r24, 0x00E8
     a0c:	8f 77       	andi	r24, 0x7F	; 127
     a0e:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_join_request. */
    MEM_FREE(njr);
     a12:	80 91 ce 01 	lds	r24, 0x01CE
     a16:	90 91 cf 01 	lds	r25, 0x01CF
     a1a:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>

00000a1e <usb_transaction_done>:
                           /* USB callbacks */


static void usb_transaction_done(uint16_t length, uint8_t *data) {
    /* Check that the minimum command length of one byte is received. */
    if (0 == length) {
     a1e:	89 2b       	or	r24, r25
     a20:	51 f4       	brne	.+20     	; 0xa36 <usb_transaction_done+0x18>
        /* Wrong length of command. */
        Usb_select_endpoint(EP_IN);
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
     a28:	80 91 e8 00 	lds	r24, 0x00E8
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_SYNTACTICAL_ERROR);
     a32:	81 e8       	ldi	r24, 0x81	; 129
     a34:	0f c0       	rjmp	.+30     	; 0xa54 <usb_transaction_done+0x36>
        Usb_send_in();
        
        usb_ep_ack_transaction();
    } else if (false == vrt_post_event(cmd_if_dispatch, (void *)data)) {
     a36:	88 e2       	ldi	r24, 0x28	; 40
     a38:	96 e0       	ldi	r25, 0x06	; 6
     a3a:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
     a3e:	81 11       	cpse	r24, r1
     a40:	12 c0       	rjmp	.+36     	; 0xa66 <usb_transaction_done+0x48>
        /* Command could not be posted into the event system, notify the user about this. */
        Usb_select_endpoint(EP_IN);
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
     a48:	80 91 e8 00 	lds	r24, 0x00E8
     a4c:	8e 7f       	andi	r24, 0xFE	; 254
     a4e:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_VRT_KERNEL_ERROR);
     a52:	85 e9       	ldi	r24, 0x95	; 149
     a54:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
     a58:	80 91 e8 00 	lds	r24, 0x00E8
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	80 93 e8 00 	sts	0x00E8, r24
        
        usb_ep_ack_transaction();
     a62:	0c 94 3d 22 	jmp	0x447a	; 0x447a <usb_ep_ack_transaction>
     a66:	08 95       	ret

00000a68 <cmd_nwk_leave_indication>:
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_leave_request. */
    MEM_FREE(nlr);
}


static void cmd_nwk_leave_indication(nlme_leave_ind_t *nli) {
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	1f 92       	push	r1
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is room to add this NWK_EVENT. */
    if (0 == items_free) { nwk_events_missed++; return; }
     a72:	20 91 bc 01 	lds	r18, 0x01BC
     a76:	21 11       	cpse	r18, r1
     a78:	0a c0       	rjmp	.+20     	; 0xa8e <cmd_nwk_leave_indication+0x26>
     a7a:	80 91 b6 01 	lds	r24, 0x01B6
     a7e:	90 91 b7 01 	lds	r25, 0x01B7
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	90 93 b7 01 	sts	0x01B7, r25
     a88:	80 93 b6 01 	sts	0x01B6, r24
     a8c:	30 c0       	rjmp	.+96     	; 0xaee <cmd_nwk_leave_indication+0x86>
    
    uint8_t *this_event = nwk_event_fifo[fifo_head];
     a8e:	a0 91 bf 01 	lds	r26, 0x01BF
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	aa 0f       	add	r26, r26
     a96:	bb 1f       	adc	r27, r27
     a98:	a0 54       	subi	r26, 0x40	; 64
     a9a:	be 4f       	sbci	r27, 0xFE	; 254
     a9c:	0d 90       	ld	r0, X+
     a9e:	bc 91       	ld	r27, X
     aa0:	a0 2d       	mov	r26, r0
    
    ENTER_CRITICAL_REGION();
     aa2:	2f b7       	in	r18, 0x3f	; 63
     aa4:	29 83       	std	Y+1, r18	; 0x01
     aa6:	f8 94       	cli
    
    if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_head) {
     aa8:	20 91 bf 01 	lds	r18, 0x01BF
     aac:	24 30       	cpi	r18, 0x04	; 4
     aae:	19 f4       	brne	.+6      	; 0xab6 <cmd_nwk_leave_indication+0x4e>
        fifo_head = 0;
     ab0:	10 92 bf 01 	sts	0x01BF, r1
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <cmd_nwk_leave_indication+0x54>
    } else {
        fifo_head++;
     ab6:	2f 5f       	subi	r18, 0xFF	; 255
     ab8:	20 93 bf 01 	sts	0x01BF, r18
    }
        
    items_used++;
     abc:	20 91 bd 01 	lds	r18, 0x01BD
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	20 93 bd 01 	sts	0x01BD, r18
    items_free--;
     ac6:	20 91 bc 01 	lds	r18, 0x01BC
     aca:	21 50       	subi	r18, 0x01	; 1
     acc:	20 93 bc 01 	sts	0x01BC, r18
    
    LEAVE_CRITICAL_REGION();
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	2f bf       	out	0x3f, r18	; 63
    
    uint8_t index = 0;
    
    /* Start building the New Leave event. */
    this_event[index++] = EVENT_NWK_LEAVE;
     ad4:	25 e5       	ldi	r18, 0x55	; 85
     ad6:	2c 93       	st	X, r18
    this_event[index++] = 10;
     ad8:	2a e0       	ldi	r18, 0x0A	; 10
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	2c 93       	st	X, r18
     ade:	11 97       	sbiw	r26, 0x01	; 1
    memcpy((void *)(&this_event[index]), (void *)(&(nli->DeviceAddress)), sizeof(uint64_t));
     ae0:	12 96       	adiw	r26, 0x02	; 2
     ae2:	28 e0       	ldi	r18, 0x08	; 8
     ae4:	fc 01       	movw	r30, r24
     ae6:	01 90       	ld	r0, Z+
     ae8:	0d 92       	st	X+, r0
     aea:	2a 95       	dec	r18
     aec:	e1 f7       	brne	.-8      	; 0xae6 <cmd_nwk_leave_indication+0x7e>
    index += sizeof(uint64_t);
}
     aee:	0f 90       	pop	r0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <cmd_nwk_join_indication>:
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_join_request. */
    MEM_FREE(njr);
}


static void cmd_nwk_join_indication(nlme_join_ind_t *nji) {
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	1f 92       	push	r1
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is room to add this NWK_EVENT. */
    if (0 == items_free) { nwk_events_missed++; return; }
     b00:	20 91 bc 01 	lds	r18, 0x01BC
     b04:	21 11       	cpse	r18, r1
     b06:	0a c0       	rjmp	.+20     	; 0xb1c <cmd_nwk_join_indication+0x26>
     b08:	80 91 b6 01 	lds	r24, 0x01B6
     b0c:	90 91 b7 01 	lds	r25, 0x01B7
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	90 93 b7 01 	sts	0x01B7, r25
     b16:	80 93 b6 01 	sts	0x01B6, r24
     b1a:	35 c0       	rjmp	.+106    	; 0xb86 <cmd_nwk_join_indication+0x90>
    
    uint8_t *this_event = nwk_event_fifo[fifo_head];
     b1c:	e0 91 bf 01 	lds	r30, 0x01BF
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	e0 54       	subi	r30, 0x40	; 64
     b28:	fe 4f       	sbci	r31, 0xFE	; 254
     b2a:	a0 81       	ld	r26, Z
     b2c:	b1 81       	ldd	r27, Z+1	; 0x01
    
    ENTER_CRITICAL_REGION();
     b2e:	2f b7       	in	r18, 0x3f	; 63
     b30:	29 83       	std	Y+1, r18	; 0x01
     b32:	f8 94       	cli
    
    if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_head) {
     b34:	20 91 bf 01 	lds	r18, 0x01BF
     b38:	24 30       	cpi	r18, 0x04	; 4
     b3a:	19 f4       	brne	.+6      	; 0xb42 <cmd_nwk_join_indication+0x4c>
        fifo_head = 0;
     b3c:	10 92 bf 01 	sts	0x01BF, r1
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <cmd_nwk_join_indication+0x52>
    } else {
        fifo_head++;
     b42:	2f 5f       	subi	r18, 0xFF	; 255
     b44:	20 93 bf 01 	sts	0x01BF, r18
    }
        
    items_used++;
     b48:	20 91 bd 01 	lds	r18, 0x01BD
     b4c:	2f 5f       	subi	r18, 0xFF	; 255
     b4e:	20 93 bd 01 	sts	0x01BD, r18
    items_free--;
     b52:	20 91 bc 01 	lds	r18, 0x01BC
     b56:	21 50       	subi	r18, 0x01	; 1
     b58:	20 93 bc 01 	sts	0x01BC, r18
    
    LEAVE_CRITICAL_REGION();
     b5c:	29 81       	ldd	r18, Y+1	; 0x01
     b5e:	2f bf       	out	0x3f, r18	; 63
    
    uint8_t index = 0;

    /* Start building the New Join event. */
    this_event[index++] = EVENT_NWK_JOIN;
     b60:	24 e5       	ldi	r18, 0x54	; 84
     b62:	2c 93       	st	X, r18
    this_event[index++] = 12;
     b64:	2c e0       	ldi	r18, 0x0C	; 12
     b66:	11 96       	adiw	r26, 0x01	; 1
     b68:	2c 93       	st	X, r18
     b6a:	11 97       	sbiw	r26, 0x01	; 1
    memcpy((void *)(&this_event[index]), (void *)(&(nji->ShortAddress)), sizeof(uint16_t));
     b6c:	fc 01       	movw	r30, r24
     b6e:	81 91       	ld	r24, Z+
     b70:	91 91       	ld	r25, Z+
     b72:	13 96       	adiw	r26, 0x03	; 3
     b74:	9c 93       	st	X, r25
     b76:	8e 93       	st	-X, r24
     b78:	12 97       	sbiw	r26, 0x02	; 2
    index += sizeof(uint16_t);
    memcpy((void *)(&this_event[index]), (void *)(&(nji->ExtendedAddress)), sizeof(uint64_t));
     b7a:	14 96       	adiw	r26, 0x04	; 4
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	01 90       	ld	r0, Z+
     b80:	0d 92       	st	X+, r0
     b82:	8a 95       	dec	r24
     b84:	e1 f7       	brne	.-8      	; 0xb7e <cmd_nwk_join_indication+0x88>
}
     b86:	0f 90       	pop	r0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <cmd_nwk_data_indication>:
    /* Free any allocated memory. */
    MEM_FREE(ndr);
}


static void cmd_nwk_data_indication(nlde_data_ind_t *ndi) {
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	1f 92       	push	r1
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	dc 01       	movw	r26, r24
    /* Check if there is room to add this NWK_EVENT. */
    if (0 == items_free) { nwk_events_missed++; return; }
     b9a:	80 91 bc 01 	lds	r24, 0x01BC
     b9e:	81 11       	cpse	r24, r1
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <cmd_nwk_data_indication+0x28>
     ba2:	80 91 b6 01 	lds	r24, 0x01B6
     ba6:	90 91 b7 01 	lds	r25, 0x01B7
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	90 93 b7 01 	sts	0x01B7, r25
     bb0:	80 93 b6 01 	sts	0x01B6, r24
     bb4:	49 c0       	rjmp	.+146    	; 0xc48 <cmd_nwk_data_indication+0xba>
    
    uint8_t *this_event = nwk_event_fifo[fifo_head];
     bb6:	e0 91 bf 01 	lds	r30, 0x01BF
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e0 54       	subi	r30, 0x40	; 64
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	01 90       	ld	r0, Z+
     bc6:	f0 81       	ld	r31, Z
     bc8:	e0 2d       	mov	r30, r0
    
    ENTER_CRITICAL_REGION();
     bca:	8f b7       	in	r24, 0x3f	; 63
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	f8 94       	cli
    
    if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_head) {
     bd0:	80 91 bf 01 	lds	r24, 0x01BF
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	19 f4       	brne	.+6      	; 0xbde <cmd_nwk_data_indication+0x50>
        fifo_head = 0;
     bd8:	10 92 bf 01 	sts	0x01BF, r1
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <cmd_nwk_data_indication+0x56>
    } else {
        fifo_head++;
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	80 93 bf 01 	sts	0x01BF, r24
    }
        
    items_used++;
     be4:	80 91 bd 01 	lds	r24, 0x01BD
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	80 93 bd 01 	sts	0x01BD, r24
    items_free--;
     bee:	80 91 bc 01 	lds	r24, 0x01BC
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	80 93 bc 01 	sts	0x01BC, r24
    
    LEAVE_CRITICAL_REGION();
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	8f bf       	out	0x3f, r24	; 63
    
    uint8_t index = 0;
    
    /* Start building the New Data event. */
    this_event[index++] = EVENT_NWK_DATA;
     bfc:	83 e5       	ldi	r24, 0x53	; 83
     bfe:	80 83       	st	Z, r24
    this_event[index++] = 8 + (ndi->NsduLength);
     c00:	16 96       	adiw	r26, 0x06	; 6
     c02:	8c 91       	ld	r24, X
     c04:	16 97       	sbiw	r26, 0x06	; 6
     c06:	88 5f       	subi	r24, 0xF8	; 248
     c08:	81 83       	std	Z+1, r24	; 0x01
    memcpy((void *)(&this_event[index]), (void *)(&(ndi->DstAddr)), sizeof(uint16_t));
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	8d 91       	ld	r24, X+
     c0e:	9c 91       	ld	r25, X
     c10:	12 97       	sbiw	r26, 0x02	; 2
     c12:	93 83       	std	Z+3, r25	; 0x03
     c14:	82 83       	std	Z+2, r24	; 0x02
    index += sizeof(uint16_t);
    memcpy((void *)(&this_event[index]), (void *)(&(ndi->SrcAddr)), sizeof(uint16_t));
     c16:	13 96       	adiw	r26, 0x03	; 3
     c18:	8d 91       	ld	r24, X+
     c1a:	9c 91       	ld	r25, X
     c1c:	14 97       	sbiw	r26, 0x04	; 4
     c1e:	95 83       	std	Z+5, r25	; 0x05
     c20:	84 83       	std	Z+4, r24	; 0x04
    index += sizeof(uint16_t);
    this_event[index++] = ndi->LinkQuality;
     c22:	15 96       	adiw	r26, 0x05	; 5
     c24:	8c 91       	ld	r24, X
     c26:	15 97       	sbiw	r26, 0x05	; 5
     c28:	86 83       	std	Z+6, r24	; 0x06
    this_event[index++] = ndi->NsduLength;
     c2a:	16 96       	adiw	r26, 0x06	; 6
     c2c:	8c 91       	ld	r24, X
     c2e:	16 97       	sbiw	r26, 0x06	; 6
     c30:	87 83       	std	Z+7, r24	; 0x07
    memcpy((void *)(&this_event[index]),(void *)(ndi->Nsdu), (ndi->NsduLength));
     c32:	16 96       	adiw	r26, 0x06	; 6
     c34:	4c 91       	ld	r20, X
     c36:	16 97       	sbiw	r26, 0x06	; 6
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	bd 01       	movw	r22, r26
     c3c:	69 5f       	subi	r22, 0xF9	; 249
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	cf 01       	movw	r24, r30
     c42:	08 96       	adiw	r24, 0x08	; 8
     c44:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
}
     c48:	0f 90       	pop	r0
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <cmd_if_dispatch>:

static void cmd_s2_dispatch(void *raw_cmd){
	
}

static void cmd_if_dispatch(void *raw_cmd) {
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
    
    Usb_select_endpoint(EP_IN);
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     c60:	80 91 e8 00 	lds	r24, 0x00E8
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	80 93 e8 00 	sts	0x00E8, r24
    UEINTX |= (1 << RXOUTI);
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	80 93 e8 00 	sts	0x00E8, r24
    
    /* First byte in all defined commands equals the command type. This byte is
     * used to execute the associated command handler.
     */
    uint8_t cmd = *(uint8_t *)raw_cmd;
     c74:	48 81       	ld	r20, Y
	char * cptr = (char*)raw_cmd;
	if ( cptr[0] == 's' && cptr[1] == '2'){
     c76:	43 37       	cpi	r20, 0x73	; 115
     c78:	29 f4       	brne	.+10     	; 0xc84 <cmd_if_dispatch+0x34>
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	82 33       	cpi	r24, 0x32	; 50
     c7e:	09 f0       	breq	.+2      	; 0xc82 <cmd_if_dispatch+0x32>
     c80:	1c c3       	rjmp	.+1592   	; 0x12ba <cmd_if_dispatch+0x66a>
     c82:	31 c3       	rjmp	.+1634   	; 0x12e6 <cmd_if_dispatch+0x696>
		cmd_s2_dispatch(&cptr[2]);
	}
    else
    switch (cmd) {
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	48 32       	cpi	r20, 0x28	; 40
     c88:	51 05       	cpc	r21, r1
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <cmd_if_dispatch+0x3e>
     c8c:	16 c3       	rjmp	.+1580   	; 0x12ba <cmd_if_dispatch+0x66a>
     c8e:	fa 01       	movw	r30, r20
     c90:	e4 5b       	subi	r30, 0xB4	; 180
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__tablejump2__>
}


static void cmd_if_sign_on(void *cmd_sign_on) {
    /* Respond to the CMD_SIGN_ON. */
    Usb_select_endpoint(EP_IN);
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     c9e:	80 91 e8 00 	lds	r24, 0x00E8
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(RESP_SIGN_ON);
     ca8:	84 e8       	ldi	r24, 0x84	; 132
     caa:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte(10);
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('R');
     cb4:	82 e5       	ldi	r24, 0x52	; 82
     cb6:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('Z');
     cba:	8a e5       	ldi	r24, 0x5A	; 90
     cbc:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('U');
     cc0:	85 e5       	ldi	r24, 0x55	; 85
     cc2:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('S');
     cc6:	83 e5       	ldi	r24, 0x53	; 83
     cc8:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('B');
     ccc:	92 e4       	ldi	r25, 0x42	; 66
     cce:	90 93 f1 00 	sts	0x00F1, r25
	Usb_write_byte('S');
     cd2:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('T');
     cd6:	84 e5       	ldi	r24, 0x54	; 84
     cd8:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('I');
     cdc:	89 e4       	ldi	r24, 0x49	; 73
     cde:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('C');
     ce2:	83 e4       	ldi	r24, 0x43	; 67
     ce4:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('K');
     ce8:	8b e4       	ldi	r24, 0x4B	; 75
     cea:	f0 c2       	rjmp	.+1504   	; 0x12cc <cmd_if_dispatch+0x67c>
static void cmd_get_parameter(void *cmd_get_parameter) {
    /* Cast the raw command into the correct type. */
    cmd_get_parameter_t *cgp = (cmd_get_parameter_t *)cmd_get_parameter;
    
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     cf2:	80 91 e8 00 	lds	r24, 0x00E8
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	80 93 e8 00 	sts	0x00E8, r24
    
    if (PARAM_NWK_MAX_CHILDREN == (cgp->parameter)) {
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	81 11       	cpse	r24, r1
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <cmd_if_dispatch+0xc2>
        Usb_write_byte(RESP_GET_PARAMETER);
     d02:	85 e8       	ldi	r24, 0x85	; 133
     d04:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(0x01);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(ZIGBEE_MAX_NMBR_OF_CHILDREN);
     d0e:	89 e1       	ldi	r24, 0x19	; 25
     d10:	dd c2       	rjmp	.+1466   	; 0x12cc <cmd_if_dispatch+0x67c>
    } else if (PARAM_NWK_MAX_ROUTRES == (cgp->parameter)) {
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	21 f4       	brne	.+8      	; 0xd1e <cmd_if_dispatch+0xce>
        Usb_write_byte(RESP_GET_PARAMETER);
     d16:	95 e8       	ldi	r25, 0x85	; 133
     d18:	90 93 f1 00 	sts	0x00F1, r25
     d1c:	06 c0       	rjmp	.+12     	; 0xd2a <cmd_if_dispatch+0xda>
        Usb_write_byte(0x01);
        Usb_write_byte(ZIGBEE_MAX_NMBR_OF_ROUTERS);
    } else if (PARAM_NWK_MAX_DEPTH == (cgp->parameter)) {
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	39 f4       	brne	.+14     	; 0xd30 <cmd_if_dispatch+0xe0>
        Usb_write_byte(RESP_GET_PARAMETER);
     d22:	85 e8       	ldi	r24, 0x85	; 133
     d24:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(0x01);
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 f1 00 	sts	0x00F1, r24
     d2e:	ce c2       	rjmp	.+1436   	; 0x12cc <cmd_if_dispatch+0x67c>
        Usb_write_byte(ZIGBEE_MAX_NWK_DEPTH);
    } else if (PARAM_SW_REV == (cgp->parameter)) {
     d30:	80 3c       	cpi	r24, 0xC0	; 192
     d32:	61 f4       	brne	.+24     	; 0xd4c <cmd_if_dispatch+0xfc>
        Usb_write_byte(RESP_GET_PARAMETER);
     d34:	85 e8       	ldi	r24, 0x85	; 133
     d36:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(0x02);
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(RZRAVEN_FW_MAJ);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(RZRAVEN_FW_MIN);
     d46:	10 92 f1 00 	sts	0x00F1, r1
     d4a:	c2 c2       	rjmp	.+1412   	; 0x12d0 <cmd_if_dispatch+0x680>
    } else if (PARAM_IEEE_ADDRESS == (cgp->parameter)) {
     d4c:	81 3c       	cpi	r24, 0xC1	; 193
     d4e:	09 f0       	breq	.+2      	; 0xd52 <cmd_if_dispatch+0x102>
     d50:	47 c1       	rjmp	.+654    	; 0xfe0 <cmd_if_dispatch+0x390>
        Usb_write_byte(RESP_GET_PARAMETER);
     d52:	85 e8       	ldi	r24, 0x85	; 133
     d54:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte((ieee_address >> 8*0) & 0xFF);
     d58:	80 91 01 01 	lds	r24, 0x0101
     d5c:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte((ieee_address >> 8*1) & 0xFF);
     d60:	20 91 01 01 	lds	r18, 0x0101
     d64:	30 91 02 01 	lds	r19, 0x0102
     d68:	40 91 03 01 	lds	r20, 0x0103
     d6c:	50 91 04 01 	lds	r21, 0x0104
     d70:	60 91 05 01 	lds	r22, 0x0105
     d74:	70 91 06 01 	lds	r23, 0x0106
     d78:	80 91 07 01 	lds	r24, 0x0107
     d7c:	90 91 08 01 	lds	r25, 0x0108
     d80:	08 e0       	ldi	r16, 0x08	; 8
     d82:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     d86:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*2) & 0xFF);
     d8a:	20 91 01 01 	lds	r18, 0x0101
     d8e:	30 91 02 01 	lds	r19, 0x0102
     d92:	40 91 03 01 	lds	r20, 0x0103
     d96:	50 91 04 01 	lds	r21, 0x0104
     d9a:	60 91 05 01 	lds	r22, 0x0105
     d9e:	70 91 06 01 	lds	r23, 0x0106
     da2:	80 91 07 01 	lds	r24, 0x0107
     da6:	90 91 08 01 	lds	r25, 0x0108
     daa:	00 e1       	ldi	r16, 0x10	; 16
     dac:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     db0:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*3) & 0xFF);
     db4:	20 91 01 01 	lds	r18, 0x0101
     db8:	30 91 02 01 	lds	r19, 0x0102
     dbc:	40 91 03 01 	lds	r20, 0x0103
     dc0:	50 91 04 01 	lds	r21, 0x0104
     dc4:	60 91 05 01 	lds	r22, 0x0105
     dc8:	70 91 06 01 	lds	r23, 0x0106
     dcc:	80 91 07 01 	lds	r24, 0x0107
     dd0:	90 91 08 01 	lds	r25, 0x0108
     dd4:	08 e1       	ldi	r16, 0x18	; 24
     dd6:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     dda:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*4) & 0xFF);
     dde:	20 91 01 01 	lds	r18, 0x0101
     de2:	30 91 02 01 	lds	r19, 0x0102
     de6:	40 91 03 01 	lds	r20, 0x0103
     dea:	50 91 04 01 	lds	r21, 0x0104
     dee:	60 91 05 01 	lds	r22, 0x0105
     df2:	70 91 06 01 	lds	r23, 0x0106
     df6:	80 91 07 01 	lds	r24, 0x0107
     dfa:	90 91 08 01 	lds	r25, 0x0108
     dfe:	00 e2       	ldi	r16, 0x20	; 32
     e00:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     e04:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*5) & 0xFF);
     e08:	20 91 01 01 	lds	r18, 0x0101
     e0c:	30 91 02 01 	lds	r19, 0x0102
     e10:	40 91 03 01 	lds	r20, 0x0103
     e14:	50 91 04 01 	lds	r21, 0x0104
     e18:	60 91 05 01 	lds	r22, 0x0105
     e1c:	70 91 06 01 	lds	r23, 0x0106
     e20:	80 91 07 01 	lds	r24, 0x0107
     e24:	90 91 08 01 	lds	r25, 0x0108
     e28:	08 e2       	ldi	r16, 0x28	; 40
     e2a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     e2e:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*6) & 0xFF);
     e32:	20 91 01 01 	lds	r18, 0x0101
     e36:	30 91 02 01 	lds	r19, 0x0102
     e3a:	40 91 03 01 	lds	r20, 0x0103
     e3e:	50 91 04 01 	lds	r21, 0x0104
     e42:	60 91 05 01 	lds	r22, 0x0105
     e46:	70 91 06 01 	lds	r23, 0x0106
     e4a:	80 91 07 01 	lds	r24, 0x0107
     e4e:	90 91 08 01 	lds	r25, 0x0108
     e52:	00 e3       	ldi	r16, 0x30	; 48
     e54:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     e58:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*7) & 0xFF);
     e5c:	20 91 01 01 	lds	r18, 0x0101
     e60:	30 91 02 01 	lds	r19, 0x0102
     e64:	40 91 03 01 	lds	r20, 0x0103
     e68:	50 91 04 01 	lds	r21, 0x0104
     e6c:	60 91 05 01 	lds	r22, 0x0105
     e70:	70 91 06 01 	lds	r23, 0x0106
     e74:	80 91 07 01 	lds	r24, 0x0107
     e78:	90 91 08 01 	lds	r25, 0x0108
     e7c:	08 e3       	ldi	r16, 0x38	; 56
     e7e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
     e82:	20 93 f1 00 	sts	0x00F1, r18
     e86:	24 c2       	rjmp	.+1096   	; 0x12d0 <cmd_if_dispatch+0x680>
static void cmd_set_mode(void *cmd_set_mode) {
    /* Cast the raw command to the correct type. */
    cmd_set_mode_t *sm = (cmd_set_mode_t *)cmd_set_mode;
    
    /* Reset internal variables. */
    fifo_head  = 0;
     e88:	10 92 bf 01 	sts	0x01BF, r1
    fifo_tail  = 0;
     e8c:	10 92 be 01 	sts	0x01BE, r1
    items_used = 0;
     e90:	10 92 bd 01 	sts	0x01BD, r1
    items_free = NWK_EVENT_FIFO_SIZE;
     e94:	85 e0       	ldi	r24, 0x05	; 5
     e96:	80 93 bc 01 	sts	0x01BC, r24
    bytes_left = 0;
     e9a:	10 92 bb 01 	sts	0x01BB, r1
    packets_left = 0;
     e9e:	10 92 ba 01 	sts	0x01BA, r1
    data_ptr = NULL;
     ea2:	10 92 b9 01 	sts	0x01B9, r1
     ea6:	10 92 b8 01 	sts	0x01B8, r1
    nwk_events_missed = 0;
     eaa:	10 92 b7 01 	sts	0x01B7, r1
     eae:	10 92 b6 01 	sts	0x01B6, r1
    
    /* Tear down any old modes that could be running. */
    air_capture_deinit();
     eb2:	0e 94 2a 02 	call	0x454	; 0x454 <air_capture_deinit>
    zigbee_deinit();
     eb6:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <zigbee_deinit>
        
    cmd_if_state = CMD_IF_INITIALIZED;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 d2 01 	sts	0x01D2, r24
    uint8_t set_mode_status = RESP_SEMANTICAL_ERROR;
    
    if (CMD_MODE_AC == (sm->mode)) {
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	81 11       	cpse	r24, r1
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <cmd_if_dispatch+0x286>
        if (true != air_capture_init()) {
     ec6:	0e 94 95 01 	call	0x32a	; 0x32a <air_capture_init>
     eca:	81 11       	cpse	r24, r1
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <cmd_if_dispatch+0x282>
            set_mode_status = RESP_HW_TIMEOUT;
     ece:	83 e8       	ldi	r24, 0x83	; 131
     ed0:	2a c0       	rjmp	.+84     	; 0xf26 <cmd_if_dispatch+0x2d6>
        } else {
            cmd_if_state = CMD_IF_AC_MODE;
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	23 c0       	rjmp	.+70     	; 0xf1c <cmd_if_dispatch+0x2cc>
            set_mode_status = RESP_SUCCESS;
        }
    } else if (CMD_MODE_NWK == (sm->mode)) {
     ed6:	83 30       	cpi	r24, 0x03	; 3
     ed8:	29 f5       	brne	.+74     	; 0xf24 <cmd_if_dispatch+0x2d4>
        if (true != zigbee_init(ieee_address)){
     eda:	20 91 01 01 	lds	r18, 0x0101
     ede:	30 91 02 01 	lds	r19, 0x0102
     ee2:	40 91 03 01 	lds	r20, 0x0103
     ee6:	50 91 04 01 	lds	r21, 0x0104
     eea:	60 91 05 01 	lds	r22, 0x0105
     eee:	70 91 06 01 	lds	r23, 0x0106
     ef2:	80 91 07 01 	lds	r24, 0x0107
     ef6:	90 91 08 01 	lds	r25, 0x0108
     efa:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <zigbee_init>
     efe:	88 23       	and	r24, r24
     f00:	31 f3       	breq	.-52     	; 0xece <cmd_if_dispatch+0x27e>
            set_mode_status = RESP_HW_TIMEOUT;
        } else {
            /* Set callbacks from ZigBee NWK layer. */
            zigbee_set_nlde_data_indication(cmd_nwk_data_indication);
     f02:	87 ec       	ldi	r24, 0xC7	; 199
     f04:	95 e0       	ldi	r25, 0x05	; 5
     f06:	0e 94 34 26 	call	0x4c68	; 0x4c68 <zigbee_set_nlde_data_indication>
            zigbee_set_nlme_join_indication(cmd_nwk_join_indication);
     f0a:	8b e7       	ldi	r24, 0x7B	; 123
     f0c:	95 e0       	ldi	r25, 0x05	; 5
     f0e:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <zigbee_set_nlme_join_indication>
            zigbee_set_nlme_leave_indication(cmd_nwk_leave_indication);
     f12:	84 e3       	ldi	r24, 0x34	; 52
     f14:	95 e0       	ldi	r25, 0x05	; 5
     f16:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <zigbee_set_nlme_leave_indication>
                
            cmd_if_state = CMD_IF_NWK_MODE;
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	80 93 d2 01 	sts	0x01D2, r24
            set_mode_status = RESP_SUCCESS;
     f20:	80 e8       	ldi	r24, 0x80	; 128
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <cmd_if_dispatch+0x2d6>
        }
    } else {
        set_mode_status = RESP_SEMANTICAL_ERROR;
     f24:	82 e8       	ldi	r24, 0x82	; 130
    }
    
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	90 93 e9 00 	sts	0x00E9, r25
    Usb_send_control_in();
     f2c:	90 91 e8 00 	lds	r25, 0x00E8
     f30:	9e 7f       	andi	r25, 0xFE	; 254
     f32:	90 93 e8 00 	sts	0x00E8, r25
     f36:	ca c1       	rjmp	.+916    	; 0x12cc <cmd_if_dispatch+0x67c>
    /* Cast the raw command to the correct type. */
    cmd_set_channel_t *sc = (cmd_set_channel_t *)cmd_set_channel;
    
    /* Try to set the requested channel. */
    uint8_t set_channel_status = RESP_SEMANTICAL_ERROR;
    if (true != air_capture_set_channel((sc->channel))) {
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	0e 94 0f 03 	call	0x61e	; 0x61e <air_capture_set_channel>
     f3e:	c1 c0       	rjmp	.+386    	; 0x10c2 <cmd_if_dispatch+0x472>

static void cmd_open_stream(void *cmd_open_stream) {
    uint8_t open_status = RESP_SEMANTICAL_ERROR;
    
    /* Try to open the strean of captured frames. */
    if (true != air_capture_open_stream()) {
     f40:	0e 94 3c 03 	call	0x678	; 0x678 <air_capture_open_stream>
     f44:	be c0       	rjmp	.+380    	; 0x10c2 <cmd_if_dispatch+0x472>

static void cmd_close_stream(void *cmd_close_stream) {
    uint8_t close_status = RESP_SEMANTICAL_ERROR;
    
    /* Try to close the strean of captured frames. */
    if (true != air_capture_close_stream()) {
     f46:	0e 94 93 03 	call	0x726	; 0x726 <air_capture_close_stream>
     f4a:	bb c0       	rjmp	.+374    	; 0x10c2 <cmd_if_dispatch+0x472>
}


static void cmd_inject_frame(void *cmd_inject_frame) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     f52:	80 91 e8 00 	lds	r24, 0x00E8
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(RESP_NOT_IMPLEMENTED);
     f5c:	83 e9       	ldi	r24, 0x93	; 147
     f5e:	b6 c1       	rjmp	.+876    	; 0x12cc <cmd_if_dispatch+0x67c>


static void cmd_jammer_on(void *cmd_jammer_on) {
    /* Turn the AirCapture jammer on. */
    uint8_t jammer_on_status = RESP_HW_TIMEOUT;
    if (true != air_capture_jammer_on()) {
     f60:	0e 94 b3 03 	call	0x766	; 0x766 <air_capture_jammer_on>
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <cmd_if_dispatch+0x31a>


static void cmd_jammer_off(void *cmd_jammer_off) {
    /* Turn the AirCapture jammer off. */
    uint8_t jammer_off_status = RESP_HW_TIMEOUT;
    if (true != air_capture_jammer_off()) {
     f66:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <air_capture_jammer_off>
     f6a:	81 11       	cpse	r24, r1
     f6c:	ae c0       	rjmp	.+348    	; 0x10ca <cmd_if_dispatch+0x47a>
}


static void cmd_jammer_off(void *cmd_jammer_off) {
    /* Turn the AirCapture jammer off. */
    uint8_t jammer_off_status = RESP_HW_TIMEOUT;
     f6e:	93 e8       	ldi	r25, 0x83	; 131
     f70:	ad c0       	rjmp	.+346    	; 0x10cc <cmd_if_dispatch+0x47c>
}


static void cmd_enter_boot(void *cmd_enter_boot) {
    /* Respond to the CMD_ENTER_BOOT. */
    Usb_select_endpoint(EP_IN);
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     f78:	80 91 e8 00 	lds	r24, 0x00E8
     f7c:	8e 7f       	andi	r24, 0xFE	; 254
     f7e:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(RESP_SUCCESS);
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	80 93 f1 00 	sts	0x00F1, r24
    
    Usb_send_in();
     f88:	80 91 e8 00 	lds	r24, 0x00E8
     f8c:	8f 77       	andi	r24, 0x7F	; 127
     f8e:	80 93 e8 00 	sts	0x00E8, r24
    
    /* Release the transaction buffer. */
    usb_ep_ack_transaction();
     f92:	0e 94 3d 22 	call	0x447a	; 0x447a <usb_ep_ack_transaction>
     f96:	2f e7       	ldi	r18, 0x7F	; 127
     f98:	88 e3       	ldi	r24, 0x38	; 56
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	80 40       	sbci	r24, 0x00	; 0
     fa0:	90 40       	sbci	r25, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <cmd_if_dispatch+0x34c>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <cmd_if_dispatch+0x356>
     fa6:	00 00       	nop
    
    /* Delay so that the response is sent before bootloader section is entered. */
    delay_us(50000);
    
    /* Set EEPROM magic and reset the device. */
    EEPUT(EE_BOOT_MAGIC_ADR, EE_BOOT_MAGIC_VALUE);
     fa8:	65 e3       	ldi	r22, 0x35	; 53
     faa:	8f e0       	ldi	r24, 0x0F	; 15
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__eewr_byte_usb1287>
    }
}


static void reboot(void) {
    wdt_enable(WDTO_15MS);
     fb2:	28 e0       	ldi	r18, 0x08	; 8
     fb4:	88 e1       	ldi	r24, 0x18	; 24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	a8 95       	wdr
     fbe:	80 93 60 00 	sts	0x0060, r24
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	20 93 60 00 	sts	0x0060, r18
     fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <cmd_if_dispatch+0x378>
static void cmd_nlde_data_request(void *cmd_nlde_data_request) {
    /* Cast raw command to correct type. */
    cmd_nlde_data_request_t *cndr = (cmd_nlde_data_request_t *)cmd_nlde_data_request;
    
    /* First check if the frame length is valid. */
    if ((aMaxMACFrameSize - NWK_MIN_HEADER_OVERHEAD) < (cndr->length)) {
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	8f 35       	cpi	r24, 0x5F	; 95
     fce:	50 f0       	brcs	.+20     	; 0xfe4 <cmd_if_dispatch+0x394>
        /* Send response to the PC. */
        Usb_select_endpoint(EP_IN);
     fd0:	84 e0       	ldi	r24, 0x04	; 4
     fd2:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
     fd6:	80 91 e8 00 	lds	r24, 0x00E8
     fda:	8e 7f       	andi	r24, 0xFE	; 254
     fdc:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_SEMANTICAL_ERROR);
     fe0:	82 e8       	ldi	r24, 0x82	; 130
     fe2:	74 c1       	rjmp	.+744    	; 0x12cc <cmd_if_dispatch+0x67c>
    
    /* Try to allocate necessary memory to build the NLDE_DATA.request message. A
     * variable with file scope must be used, since the final freeing of memory
     * is done when the NLDE_DATA.confirm is received.
     */
    ndr = (nlde_data_req_t *)MEM_ALLOC(nlde_data_req_t);
     fe4:	87 e2       	ldi	r24, 0x27	; 39
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
     fec:	fc 01       	movw	r30, r24
     fee:	90 93 d1 01 	sts	0x01D1, r25
     ff2:	80 93 d0 01 	sts	0x01D0, r24
    
    if (NULL == ndr) {
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	51 f4       	brne	.+20     	; 0x100e <cmd_if_dispatch+0x3be>
        /* Send response to the PC. */
        Usb_select_endpoint(EP_IN);
     ffa:	84 e0       	ldi	r24, 0x04	; 4
     ffc:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1000:	80 91 e8 00 	lds	r24, 0x00E8
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    100a:	80 e9       	ldi	r24, 0x90	; 144
    100c:	5f c1       	rjmp	.+702    	; 0x12cc <cmd_if_dispatch+0x67c>
        
        return;
    }
    
    /* Build NLDE_DATA.request message. */
    ndr->dst_addr_mode = 0;
    100e:	10 82       	st	Z, r1
    ndr->dst_addr = cndr->dest_addr;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	92 83       	std	Z+2, r25	; 0x02
    1016:	81 83       	std	Z+1, r24	; 0x01
    ndr->radius = cndr->radius;
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	83 83       	std	Z+3, r24	; 0x03
    ndr->non_member_radius = cndr->non_member_radius;
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	84 83       	std	Z+4, r24	; 0x04
    ndr->nsdu_length = cndr->length;
    1020:	8e 81       	ldd	r24, Y+6	; 0x06
    1022:	86 83       	std	Z+6, r24	; 0x06
    ndr->nsdu = cndr->data;
    1024:	ce 01       	movw	r24, r28
    1026:	07 96       	adiw	r24, 0x07	; 7
    1028:	90 87       	std	Z+8, r25	; 0x08
    102a:	87 83       	std	Z+7, r24	; 0x07
    ndr->discovery_route = cndr->discovery_route;
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	85 83       	std	Z+5, r24	; 0x05
    ndr->nlde_callback_data_confirm = cmd_nwk_data_confirm_callback;
    1030:	88 e9       	ldi	r24, 0x98	; 152
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	92 87       	std	Z+10, r25	; 0x0a
    1036:	81 87       	std	Z+9, r24	; 0x09
    
    /* Try to execute the primitive. */
    if (true != zigbee_data_request(ndr)) {
    1038:	cf 01       	movw	r24, r30
    103a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <zigbee_data_request>
    103e:	81 11       	cpse	r24, r1
    1040:	4c c1       	rjmp	.+664    	; 0x12da <cmd_if_dispatch+0x68a>
        /* Send response to the PC. */
        Usb_select_endpoint(EP_IN);
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1048:	80 91 e8 00 	lds	r24, 0x00E8
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    1052:	8b e8       	ldi	r24, 0x8B	; 139
    1054:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
    1058:	80 91 e8 00 	lds	r24, 0x00E8
    105c:	8f 77       	andi	r24, 0x7F	; 127
    105e:	80 93 e8 00 	sts	0x00E8, r24
            
        /* Free any allocated memory. */
        MEM_FREE(ndr);
    1062:	80 91 d0 01 	lds	r24, 0x01D0
    1066:	90 91 d1 01 	lds	r25, 0x01D1
    106a:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
    106e:	35 c1       	rjmp	.+618    	; 0x12da <cmd_if_dispatch+0x68a>
}


static void cmd_nlme_formation_request(void *cmd_nlme_formation_request) {
    /* Try to allocate memory for the NLME_FORMATION.request. */
    nlme_formation_req_t *nfr = (nlme_formation_req_t *)MEM_ALLOC(nlme_formation_req_t);
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    1078:	8c 01       	movw	r16, r24
    
    uint8_t formation_status = RESP_HW_TIMEOUT;
    
    /* Verify if memory was allocated. */
    if (NULL == nfr) {
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	99 f0       	breq	.+38     	; 0x10a4 <cmd_if_dispatch+0x454>
        formation_status = RESP_OUT_OF_MEMORY;
    } else {
        /* Extract parameters and issue the NLME_FORMATION.request primitive. */
        cmd_nlme_formation_request_t *cnfr = (cmd_nlme_formation_request_t *)cmd_nlme_formation_request;
        
        nfr->channel = cnfr->channel;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	f8 01       	movw	r30, r16
    1082:	80 83       	st	Z, r24
        nfr->pan_id  = cnfr->pan_id;
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	92 83       	std	Z+2, r25	; 0x02
    108a:	81 83       	std	Z+1, r24	; 0x01
        
        if (true != zigbee_formation_request(nfr)) {
    108c:	c8 01       	movw	r24, r16
    108e:	0e 94 09 29 	call	0x5212	; 0x5212 <zigbee_formation_request>
    1092:	81 11       	cpse	r24, r1
    1094:	02 c0       	rjmp	.+4      	; 0x109a <cmd_if_dispatch+0x44a>
            formation_status = RESP_SEMANTICAL_ERROR;
    1096:	c2 e8       	ldi	r28, 0x82	; 130
    1098:	01 c0       	rjmp	.+2      	; 0x109c <cmd_if_dispatch+0x44c>
        } else {
            formation_status = RESP_SUCCESS;
    109a:	c0 e8       	ldi	r28, 0x80	; 128
        }
        
        MEM_FREE(nfr);
    109c:	c8 01       	movw	r24, r16
    109e:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <cmd_if_dispatch+0x456>
    
    uint8_t formation_status = RESP_HW_TIMEOUT;
    
    /* Verify if memory was allocated. */
    if (NULL == nfr) {
        formation_status = RESP_OUT_OF_MEMORY;
    10a4:	c0 e9       	ldi	r28, 0x90	; 144
        
        MEM_FREE(nfr);
    }

    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
    10ac:	80 91 e8 00 	lds	r24, 0x00E8
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(formation_status);
    10b6:	c0 93 f1 00 	sts	0x00F1, r28
    10ba:	0a c1       	rjmp	.+532    	; 0x12d0 <cmd_if_dispatch+0x680>
static void cmd_nlme_permit_join_request(void *cmd_nlme_permit_join_request) {
    /* Extract parameters and issue the NLME_PERMIT_JOINING.request primitive. */
    cmd_nlme_permit_joining_request_t *cnpjr = (cmd_nlme_permit_joining_request_t *)cmd_nlme_permit_join_request;
    
    uint8_t permit_status = RESP_SEMANTICAL_ERROR;
    if (true != zigbee_permit_joining(cnpjr->join_permitted)) {
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <zigbee_permit_joining>
    10c2:	81 11       	cpse	r24, r1
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <cmd_if_dispatch+0x47a>

static void cmd_nlme_permit_join_request(void *cmd_nlme_permit_join_request) {
    /* Extract parameters and issue the NLME_PERMIT_JOINING.request primitive. */
    cmd_nlme_permit_joining_request_t *cnpjr = (cmd_nlme_permit_joining_request_t *)cmd_nlme_permit_join_request;
    
    uint8_t permit_status = RESP_SEMANTICAL_ERROR;
    10c6:	92 e8       	ldi	r25, 0x82	; 130
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <cmd_if_dispatch+0x47c>
    if (true != zigbee_permit_joining(cnpjr->join_permitted)) {
    } else {
        permit_status = RESP_SUCCESS;
    10ca:	90 e8       	ldi	r25, 0x80	; 128
    }
    
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
    10cc:	84 e0       	ldi	r24, 0x04	; 4
    10ce:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
    10d2:	80 91 e8 00 	lds	r24, 0x00E8
    10d6:	8e 7f       	andi	r24, 0xFE	; 254
    10d8:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(permit_status);
    10dc:	90 93 f1 00 	sts	0x00F1, r25
    10e0:	f7 c0       	rjmp	.+494    	; 0x12d0 <cmd_if_dispatch+0x680>
static void cmd_nlme_join_request(void *cmd_nlme_join_request) {
    /* Cast raw command to correct type. */
    cmd_nlme_join_request_t *cnjr = (cmd_nlme_join_request_t *)cmd_nlme_join_request;
    
    /* Request some memory to build the NLME_JOIN.request. */
    njr = (nlme_join_req_t *)MEM_ALLOC(nlme_join_req_t);
    10e2:	8f e1       	ldi	r24, 0x1F	; 31
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    10ea:	90 93 cf 01 	sts	0x01CF, r25
    10ee:	80 93 ce 01 	sts	0x01CE, r24
    
    if (NULL == njr) {
    10f2:	89 2b       	or	r24, r25
    10f4:	81 f4       	brne	.+32     	; 0x1116 <cmd_if_dispatch+0x4c6>
        Usb_select_endpoint(EP_IN);
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    10fc:	80 91 e8 00 	lds	r24, 0x00E8
    1100:	8e 7f       	andi	r24, 0xFE	; 254
    1102:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    1106:	80 e9       	ldi	r24, 0x90	; 144
    1108:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    110c:	80 91 e8 00 	lds	r24, 0x00E8
    1110:	8f 77       	andi	r24, 0x7F	; 127
    1112:	80 93 e8 00 	sts	0x00E8, r24
    }
    
    /* Build the NLME_JOIN.request. */
    memcpy((void *)(&(njr->PANId)), (void *)(&(cnjr->PANId)), sizeof(uint16_t));
    1116:	e0 91 ce 01 	lds	r30, 0x01CE
    111a:	f0 91 cf 01 	lds	r31, 0x01CF
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
    njr->RejoinNetwork = cnjr->RejoinNetwork;
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	82 83       	std	Z+2, r24	; 0x02
    njr->JoinAsRouter = cnjr->JoinAsRouter;
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	83 83       	std	Z+3, r24	; 0x03
    njr->PowerSource = cnjr->PowerSource;
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	84 83       	std	Z+4, r24	; 0x04
    njr->RxOnWhenIdle = cnjr->RxOnWhenIdle;
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	85 83       	std	Z+5, r24	; 0x05
    njr->nlme_callback_join_confirm = cmd_nwk_join_confirm_callback;
    1136:	8e ee       	ldi	r24, 0xEE	; 238
    1138:	94 e0       	ldi	r25, 0x04	; 4
    113a:	97 83       	std	Z+7, r25	; 0x07
    113c:	86 83       	std	Z+6, r24	; 0x06
    
    /* Issue primitive. */
    if (true != zigbee_join_request(njr)) {
    113e:	cf 01       	movw	r24, r30
    1140:	0e 94 98 29 	call	0x5330	; 0x5330 <zigbee_join_request>
    1144:	81 11       	cpse	r24, r1
    1146:	c9 c0       	rjmp	.+402    	; 0x12da <cmd_if_dispatch+0x68a>
        Usb_select_endpoint(EP_IN);
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    114e:	80 91 e8 00 	lds	r24, 0x00E8
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    1158:	8b e8       	ldi	r24, 0x8B	; 139
    115a:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    115e:	80 91 e8 00 	lds	r24, 0x00E8
    1162:	8f 77       	andi	r24, 0x7F	; 127
    1164:	80 93 e8 00 	sts	0x00E8, r24
        
        MEM_FREE(njr);
    1168:	80 91 ce 01 	lds	r24, 0x01CE
    116c:	90 91 cf 01 	lds	r25, 0x01CF
    1170:	7c cf       	rjmp	.-264    	; 0x106a <cmd_if_dispatch+0x41a>
static void cmd_nlme_leave_request(void *cmd_nlme_leave_request) {
    /* Cast raw command to correct type. */
    cmd_nlme_leave_request_t *cnlr = (cmd_nlme_leave_request_t *)cmd_nlme_leave_request;
    
    /* Request some memory to build the NLME_JOIN.request. */
    nlr = (nlme_leave_req_t *)MEM_ALLOC(nlme_join_req_t);
    1172:	8f e1       	ldi	r24, 0x1F	; 31
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    117a:	90 93 cd 01 	sts	0x01CD, r25
    117e:	80 93 cc 01 	sts	0x01CC, r24
    
    if (NULL == nlr) {
    1182:	89 2b       	or	r24, r25
    1184:	81 f4       	brne	.+32     	; 0x11a6 <cmd_if_dispatch+0x556>
        Usb_select_endpoint(EP_IN);
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    118c:	80 91 e8 00 	lds	r24, 0x00E8
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    1196:	80 e9       	ldi	r24, 0x90	; 144
    1198:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    119c:	80 91 e8 00 	lds	r24, 0x00E8
    11a0:	8f 77       	andi	r24, 0x7F	; 127
    11a2:	80 93 e8 00 	sts	0x00E8, r24
    }
    
    /* Build the NLME_JOIN.request. */
    memcpy((void *)(&(nlr->DeviceAddress)), (void *)(&(cnlr->device_address)), sizeof(uint64_t));
    11a6:	80 91 cc 01 	lds	r24, 0x01CC
    11aa:	90 91 cd 01 	lds	r25, 0x01CD
    11ae:	fe 01       	movw	r30, r28
    11b0:	31 96       	adiw	r30, 0x01	; 1
    11b2:	28 e0       	ldi	r18, 0x08	; 8
    11b4:	dc 01       	movw	r26, r24
    11b6:	01 90       	ld	r0, Z+
    11b8:	0d 92       	st	X+, r0
    11ba:	2a 95       	dec	r18
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <cmd_if_dispatch+0x566>
    nlr->RemoveChildren = cnlr->remove_children;
    11be:	29 85       	ldd	r18, Y+9	; 0x09
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 87       	std	Z+8, r18	; 0x08
    nlr->Rejoin = cnlr->rejoin;
    11c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    11c6:	21 87       	std	Z+9, r18	; 0x09
    nlr->ReuseAddress = cnlr->reuse_address;
    11c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ca:	22 87       	std	Z+10, r18	; 0x0a
    nlr->Silent = cnlr->silent;
    11cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ce:	23 87       	std	Z+11, r18	; 0x0b
    nlr->nlme_callback_leave_confirm = cmd_nwk_leave_confirm_callback;
    11d0:	24 eb       	ldi	r18, 0xB4	; 180
    11d2:	34 e0       	ldi	r19, 0x04	; 4
    11d4:	35 87       	std	Z+13, r19	; 0x0d
    11d6:	24 87       	std	Z+12, r18	; 0x0c
    
    /* Issue primitive. */
    if (true != zigbee_leave_request(nlr)) {
    11d8:	0e 94 df 2a 	call	0x55be	; 0x55be <zigbee_leave_request>
    11dc:	81 11       	cpse	r24, r1
    11de:	7d c0       	rjmp	.+250    	; 0x12da <cmd_if_dispatch+0x68a>
        Usb_select_endpoint(EP_IN);
    11e0:	84 e0       	ldi	r24, 0x04	; 4
    11e2:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    11e6:	80 91 e8 00 	lds	r24, 0x00E8
    11ea:	8e 7f       	andi	r24, 0xFE	; 254
    11ec:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    11f0:	8b e8       	ldi	r24, 0x8B	; 139
    11f2:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    11f6:	80 91 e8 00 	lds	r24, 0x00E8
    11fa:	8f 77       	andi	r24, 0x7F	; 127
    11fc:	80 93 e8 00 	sts	0x00E8, r24
        
        MEM_FREE(nlr);
    1200:	80 91 cc 01 	lds	r24, 0x01CC
    1204:	90 91 cd 01 	lds	r25, 0x01CD
    1208:	30 cf       	rjmp	.-416    	; 0x106a <cmd_if_dispatch+0x41a>
static void cmd_nlme_discovery_request(void *cmd_nlme_discovery_request) {
    /* Cast raw command to correct type. */
    cmd_nlme_discovery_request_t *cndr = (cmd_nlme_discovery_request_t *)cmd_nlme_discovery_request;
    
    /* Request some memory to build the NLME_JOIN.request. */
    nndr = (nlme_network_discovery_req_t *)MEM_ALLOC(nlme_network_discovery_req_t);
    120a:	8a e8       	ldi	r24, 0x8A	; 138
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    1212:	90 93 cb 01 	sts	0x01CB, r25
    1216:	80 93 ca 01 	sts	0x01CA, r24
    
    if (NULL == nndr) {
    121a:	89 2b       	or	r24, r25
    121c:	81 f4       	brne	.+32     	; 0x123e <cmd_if_dispatch+0x5ee>
        Usb_select_endpoint(EP_IN);
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1224:	80 91 e8 00 	lds	r24, 0x00E8
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    122e:	80 e9       	ldi	r24, 0x90	; 144
    1230:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    1234:	80 91 e8 00 	lds	r24, 0x00E8
    1238:	8f 77       	andi	r24, 0x7F	; 127
    123a:	80 93 e8 00 	sts	0x00E8, r24
    }
    
    /* Build the NLME_NETWORK_DISCOVERY.request. */
    nndr->ChannelToScan = cndr->channel;
    123e:	e0 91 ca 01 	lds	r30, 0x01CA
    1242:	f0 91 cb 01 	lds	r31, 0x01CB
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	80 83       	st	Z, r24
    nndr->ScanDuration = cndr->duration;
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	81 83       	std	Z+1, r24	; 0x01
    nndr->nlme_callback_discovery_confirm = cmd_nwk_discovery_confirm_callback;
    124e:	80 ed       	ldi	r24, 0xD0	; 208
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	93 83       	std	Z+3, r25	; 0x03
    1254:	82 83       	std	Z+2, r24	; 0x02
    
    /* Issue primitive. */
    if (true != zigbee_network_discovery_request(nndr)) {
    1256:	cf 01       	movw	r24, r30
    1258:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <zigbee_network_discovery_request>
    125c:	81 11       	cpse	r24, r1
    125e:	3d c0       	rjmp	.+122    	; 0x12da <cmd_if_dispatch+0x68a>
        Usb_select_endpoint(EP_IN);
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1266:	80 91 e8 00 	lds	r24, 0x00E8
    126a:	8e 7f       	andi	r24, 0xFE	; 254
    126c:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    1270:	8b e8       	ldi	r24, 0x8B	; 139
    1272:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	8f 77       	andi	r24, 0x7F	; 127
    127c:	80 93 e8 00 	sts	0x00E8, r24
        
        MEM_FREE(nndr);
    1280:	80 91 ca 01 	lds	r24, 0x01CA
    1284:	90 91 cb 01 	lds	r25, 0x01CB
    1288:	f0 ce       	rjmp	.-544    	; 0x106a <cmd_if_dispatch+0x41a>
}


static void cmd_nlme_start_router_request(void *cmd_nlme_start_router_request) { 
    /* Issue primitive. */
    if (NWK_SUCCESS != zigbee_start_router_request()) {
    128a:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <zigbee_start_router_request>
    128e:	88 23       	and	r24, r24
    1290:	51 f0       	breq	.+20     	; 0x12a6 <cmd_if_dispatch+0x656>
        Usb_select_endpoint(EP_IN);
    1292:	84 e0       	ldi	r24, 0x04	; 4
    1294:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1298:	80 91 e8 00 	lds	r24, 0x00E8
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    12a2:	8b e8       	ldi	r24, 0x8B	; 139
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <cmd_if_dispatch+0x67c>
        
        Usb_send_in();
    } else {
        Usb_select_endpoint(EP_IN);
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    12ac:	80 91 e8 00 	lds	r24, 0x00E8
    12b0:	8e 7f       	andi	r24, 0xFE	; 254
    12b2:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_SUCCESS);
    12b6:	80 e8       	ldi	r24, 0x80	; 128
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <cmd_if_dispatch+0x67c>
      case CMD_NLME_START_ROUTER_REQUEST:
        cmd_nlme_start_router_request(raw_cmd);
        break; 
      default:
        /* Unsupported command. */
        Usb_select_endpoint(EP_IN);
    12ba:	84 e0       	ldi	r24, 0x04	; 4
    12bc:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    12c0:	80 91 e8 00 	lds	r24, 0x00E8
    12c4:	8e 7f       	andi	r24, 0xFE	; 254
    12c6:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_COMMAND_UNKNOWN);
    12ca:	8d e8       	ldi	r24, 0x8D	; 141
    12cc:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
    12d0:	80 91 e8 00 	lds	r24, 0x00E8
    12d4:	8f 77       	andi	r24, 0x7F	; 127
    12d6:	80 93 e8 00 	sts	0x00E8, r24
        
        usb_ep_ack_transaction();
        break;
    }
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
        Usb_select_endpoint(EP_IN);
        Usb_send_control_in();
        Usb_write_byte(RESP_COMMAND_UNKNOWN);
        Usb_send_in();
        
        usb_ep_ack_transaction();
    12e2:	0c 94 3d 22 	jmp	0x447a	; 0x447a <usb_ep_ack_transaction>
        break;
    }
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <cmd_if_init>:
 *  \param[in] ndc Pointer to nlme_network_discovery_conf_t struct.
 */
static void cmd_nwk_discovery_confirm_callback(nlme_network_discovery_conf_t *ndc);


bool cmd_if_init(void) {
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <cmd_if_init+0xa>
    12fa:	1f 92       	push	r1
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    /* Initialize local variables. */
    ndr = NULL;
    1300:	10 92 d1 01 	sts	0x01D1, r1
    1304:	10 92 d0 01 	sts	0x01D0, r1
    ieee_address = eep_read_ieee_address();
    1308:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <eep_read_ieee_address>
    130c:	20 93 01 01 	sts	0x0101, r18
    1310:	30 93 02 01 	sts	0x0102, r19
    1314:	40 93 03 01 	sts	0x0103, r20
    1318:	50 93 04 01 	sts	0x0104, r21
    131c:	60 93 05 01 	sts	0x0105, r22
    1320:	70 93 06 01 	sts	0x0106, r23
    1324:	80 93 07 01 	sts	0x0107, r24
    1328:	90 93 08 01 	sts	0x0108, r25
    nwk_events_missed = 0;    
    132c:	10 92 b7 01 	sts	0x01B7, r1
    1330:	10 92 b6 01 	sts	0x01B6, r1
    1334:	00 ec       	ldi	r16, 0xC0	; 192
    1336:	11 e0       	ldi	r17, 0x01	; 1
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
        uint8_t *nwk_event = (uint8_t *)MEM_ALLOC_ARRAY(uint8_t, CMD_EVENT_SIZE);
    1338:	83 e9       	ldi	r24, 0x93	; 147
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
        
        if (NULL == nwk_event) {
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	19 f4       	brne	.+6      	; 0x134a <cmd_if_init+0x5a>

bool cmd_if_init(void) {
    /* Initialize local variables. */
    ndr = NULL;
    ieee_address = eep_read_ieee_address();
    nwk_events_missed = 0;    
    1344:	00 ec       	ldi	r16, 0xC0	; 192
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	2a c0       	rjmp	.+84     	; 0x139e <cmd_if_init+0xae>
        uint8_t *nwk_event = (uint8_t *)MEM_ALLOC_ARRAY(uint8_t, CMD_EVENT_SIZE);
        
        if (NULL == nwk_event) {
            goto init_failed;
        } else {
            nwk_event_fifo[i] = nwk_event;
    134a:	f8 01       	movw	r30, r16
    134c:	81 93       	st	Z+, r24
    134e:	91 93       	st	Z+, r25
    1350:	8f 01       	movw	r16, r30
    /* Initialize local variables. */
    ndr = NULL;
    ieee_address = eep_read_ieee_address();
    nwk_events_missed = 0;    
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
    1352:	f1 e0       	ldi	r31, 0x01	; 1
    1354:	0a 3c       	cpi	r16, 0xCA	; 202
    1356:	1f 07       	cpc	r17, r31
    1358:	79 f7       	brne	.-34     	; 0x1338 <cmd_if_init+0x48>
            nwk_event_fifo[i] = nwk_event;
        }
    }
    
    /* Initialize USB devic driver. */
    usb_task_init(ieee_address);
    135a:	20 91 01 01 	lds	r18, 0x0101
    135e:	30 91 02 01 	lds	r19, 0x0102
    1362:	40 91 03 01 	lds	r20, 0x0103
    1366:	50 91 04 01 	lds	r21, 0x0104
    136a:	60 91 05 01 	lds	r22, 0x0105
    136e:	70 91 06 01 	lds	r23, 0x0106
    1372:	80 91 07 01 	lds	r24, 0x0107
    1376:	90 91 08 01 	lds	r25, 0x0108
    137a:	0e 94 db 20 	call	0x41b6	; 0x41b6 <usb_task_init>
    
    /* Set up the transaction descriptor for the OUT end point where commands will
     * be received.
     */
    usb_trans_descriptor_t desc;
    desc.ep = EP_OUT;
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	89 83       	std	Y+1, r24	; 0x01
    desc.done_callback = usb_transaction_done;
    1382:	8f e0       	ldi	r24, 0x0F	; 15
    1384:	95 e0       	ldi	r25, 0x05	; 5
    1386:	9b 83       	std	Y+3, r25	; 0x03
    1388:	8a 83       	std	Y+2, r24	; 0x02
    
    if (USB_SUCCESS != usb_ep_open(&desc)) {
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	0e 94 fe 21 	call	0x43fc	; 0x43fc <usb_ep_open>
    1392:	81 11       	cpse	r24, r1
    1394:	d7 cf       	rjmp	.-82     	; 0x1344 <cmd_if_init+0x54>
        goto init_failed;
    }
    
    cmd_if_state = CMD_IF_INITIALIZED;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 d2 01 	sts	0x01D2, r24
    
    return true;
    139c:	12 c0       	rjmp	.+36     	; 0x13c2 <cmd_if_init+0xd2>
  
  
    init_failed:
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
        MEM_FREE(nwk_event_fifo[i]);
    139e:	f8 01       	movw	r30, r16
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
        nwk_event_fifo[i] = (uint8_t *)NULL;
    13a8:	f8 01       	movw	r30, r16
    13aa:	11 92       	st	Z+, r1
    13ac:	11 92       	st	Z+, r1
    13ae:	8f 01       	movw	r16, r30
    
  
  
    init_failed:
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
    13b0:	f1 e0       	ldi	r31, 0x01	; 1
    13b2:	0a 3c       	cpi	r16, 0xCA	; 202
    13b4:	1f 07       	cpc	r17, r31
    13b6:	99 f7       	brne	.-26     	; 0x139e <cmd_if_init+0xae>
        MEM_FREE(nwk_event_fifo[i]);
        nwk_event_fifo[i] = (uint8_t *)NULL;
    }
    
    /* Close EP and turn the USB macro off. */
    usb_ep_close();
    13b8:	0e 94 2d 22 	call	0x445a	; 0x445a <usb_ep_close>
    usb_task_deinit();  
    13bc:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <usb_task_deinit>
      
    return false;
    13c0:	80 e0       	ldi	r24, 0x00	; 0
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret

000013d2 <cmd_if_deinit>:


void cmd_if_deinit(void) {
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    if (CMD_IF_NOT_INITIALIZED == cmd_if_state) { return ; } // No point in turning off if not even started.
    13d6:	80 91 d2 01 	lds	r24, 0x01D2
    13da:	88 23       	and	r24, r24
    13dc:	f1 f0       	breq	.+60     	; 0x141a <cmd_if_deinit+0x48>
    
    cmd_if_state = CMD_IF_NOT_INITIALIZED;
    13de:	10 92 d2 01 	sts	0x01D2, r1
    
    /* Clear any memory that potentially can be active. */
    MEM_FREE(ndr);
    13e2:	80 91 d0 01 	lds	r24, 0x01D0
    13e6:	90 91 d1 01 	lds	r25, 0x01D1
    13ea:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
    ndr = NULL;
    13ee:	10 92 d1 01 	sts	0x01D1, r1
    13f2:	10 92 d0 01 	sts	0x01D0, r1
    13f6:	c0 ec       	ldi	r28, 0xC0	; 192
    13f8:	d1 e0       	ldi	r29, 0x01	; 1
        
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
        MEM_FREE(nwk_event_fifo[i]);
    13fa:	88 81       	ld	r24, Y
    13fc:	99 81       	ldd	r25, Y+1	; 0x01
    13fe:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
        nwk_event_fifo[i] = (uint8_t *)NULL;
    1402:	19 92       	st	Y+, r1
    1404:	19 92       	st	Y+, r1
    
    /* Clear any memory that potentially can be active. */
    MEM_FREE(ndr);
    ndr = NULL;
        
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	ca 3c       	cpi	r28, 0xCA	; 202
    140a:	d8 07       	cpc	r29, r24
    140c:	b1 f7       	brne	.-20     	; 0x13fa <cmd_if_deinit+0x28>
        MEM_FREE(nwk_event_fifo[i]);
        nwk_event_fifo[i] = (uint8_t *)NULL;
    }
    
    /* Close EP and turn the USB macro off. */
    usb_ep_close();
    140e:	0e 94 2d 22 	call	0x445a	; 0x445a <usb_ep_close>
    usb_task_deinit();
}
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
        nwk_event_fifo[i] = (uint8_t *)NULL;
    }
    
    /* Close EP and turn the USB macro off. */
    usb_ep_close();
    usb_task_deinit();
    1416:	0c 94 5a 21 	jmp	0x42b4	; 0x42b4 <usb_task_deinit>
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <cmd_if_task>:


void cmd_if_task(void) {
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	00 d0       	rcall	.+0      	; 0x1426 <cmd_if_task+0x6>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    /* The cmd_if_task function has one main function to fullfill: Forward NWK_EVENTs
     * if any available.
     */
    if (CMD_IF_NWK_MODE != cmd_if_state) { return; }
    142a:	80 91 d2 01 	lds	r24, 0x01D2
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	09 f0       	breq	.+2      	; 0x1434 <cmd_if_task+0x14>
    1432:	a0 c0       	rjmp	.+320    	; 0x1574 <cmd_if_task+0x154>
    
    /* Check if there is data to be transmitted. */
    if (0 == items_used) { return; }
    1434:	80 91 bd 01 	lds	r24, 0x01BD
    1438:	88 23       	and	r24, r24
    143a:	09 f4       	brne	.+2      	; 0x143e <cmd_if_task+0x1e>
    143c:	9b c0       	rjmp	.+310    	; 0x1574 <cmd_if_task+0x154>
        
    /* Select the event EP. */
    UENUM = EP_EVENT;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	80 93 e9 00 	sts	0x00E9, r24
        
    /* Check that it is possible to fill at least one bank (64 bytes) in the DPRAM. */
    if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) { return; }
    1444:	80 91 e8 00 	lds	r24, 0x00E8
    1448:	80 ff       	sbrs	r24, 0
    144a:	94 c0       	rjmp	.+296    	; 0x1574 <cmd_if_task+0x154>
        
    /* ACK TX_IN. */
    UEINTX &= ~(1 << TXINI);
    144c:	80 91 e8 00 	lds	r24, 0x00E8
    1450:	8e 7f       	andi	r24, 0xFE	; 254
    1452:	80 93 e8 00 	sts	0x00E8, r24
        
    /* If there is no acdu allocated, but data left in the AirCapture fifo.
     * One acdu must be allocated from the fifo's tail, however the tail's
     * position will not be updated until the complete acdu is written.
     */
    if (0 == bytes_left) {
    1456:	80 91 bb 01 	lds	r24, 0x01BB
    145a:	81 11       	cpse	r24, r1
    145c:	49 c0       	rjmp	.+146    	; 0x14f0 <cmd_if_task+0xd0>
        if (0 == packets_left) {
    145e:	80 91 ba 01 	lds	r24, 0x01BA
    1462:	81 11       	cpse	r24, r1
    1464:	21 c0       	rjmp	.+66     	; 0x14a8 <cmd_if_task+0x88>
            /* Get new NWK_EVENT. */
            data_ptr = nwk_event_fifo[fifo_tail];
    1466:	e0 91 be 01 	lds	r30, 0x01BE
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	e0 54       	subi	r30, 0x40	; 64
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	01 90       	ld	r0, Z+
    1476:	f0 81       	ld	r31, Z
    1478:	e0 2d       	mov	r30, r0
    147a:	f0 93 b9 01 	sts	0x01B9, r31
    147e:	e0 93 b8 01 	sts	0x01B8, r30
            bytes_left = *(data_ptr + 1);
    1482:	21 81       	ldd	r18, Z+1	; 0x01
    1484:	20 93 bb 01 	sts	0x01BB, r18
            packets_left = (uint8_t)(((uint16_t)(bytes_left + 64 - 1)) >> 6);
    1488:	82 2f       	mov	r24, r18
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	cf 96       	adiw	r24, 0x3f	; 63
    148e:	66 e0       	ldi	r22, 0x06	; 6
    1490:	96 95       	lsr	r25
    1492:	87 95       	ror	r24
    1494:	6a 95       	dec	r22
    1496:	e1 f7       	brne	.-8      	; 0x1490 <cmd_if_task+0x70>
    1498:	80 93 ba 01 	sts	0x01BA, r24
            if (0 == (bytes_left % 64)) { packets_left++ ; }
    149c:	2f 73       	andi	r18, 0x3F	; 63
    149e:	41 f5       	brne	.+80     	; 0x14f0 <cmd_if_task+0xd0>
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	80 93 ba 01 	sts	0x01BA, r24
    14a6:	24 c0       	rjmp	.+72     	; 0x14f0 <cmd_if_task+0xd0>
        } else if (1 == packets_left) {
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	11 f5       	brne	.+68     	; 0x14f0 <cmd_if_task+0xd0>
            /* Send Zero Length Packet and then update tail pointer. */
            UEINTX &= ~(1 << FIFOCON);
    14ac:	80 91 e8 00 	lds	r24, 0x00E8
    14b0:	8f 77       	andi	r24, 0x7F	; 127
    14b2:	80 93 e8 00 	sts	0x00E8, r24
                
            ENTER_CRITICAL_REGION();
    14b6:	8f b7       	in	r24, 0x3f	; 63
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	f8 94       	cli
                
            if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_tail) {
    14bc:	80 91 be 01 	lds	r24, 0x01BE
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	19 f4       	brne	.+6      	; 0x14ca <cmd_if_task+0xaa>
                fifo_tail = 0;
    14c4:	10 92 be 01 	sts	0x01BE, r1
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <cmd_if_task+0xb0>
            } else {
                fifo_tail++;
    14ca:	8f 5f       	subi	r24, 0xFF	; 255
    14cc:	80 93 be 01 	sts	0x01BE, r24
            }
                
            items_used--;
    14d0:	80 91 bd 01 	lds	r24, 0x01BD
    14d4:	81 50       	subi	r24, 0x01	; 1
    14d6:	80 93 bd 01 	sts	0x01BD, r24
            items_free++;
    14da:	80 91 bc 01 	lds	r24, 0x01BC
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	80 93 bc 01 	sts	0x01BC, r24
                
                
            LEAVE_CRITICAL_REGION();
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	45 c0       	rjmp	.+138    	; 0x1572 <cmd_if_task+0x152>
    /* At least one byte to send. */
    do {
        UEDATX = *data_ptr;
        data_ptr++;
        bytes_left--;
    } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
    14e8:	80 91 e8 00 	lds	r24, 0x00E8
    14ec:	85 ff       	sbrs	r24, 5
    14ee:	17 c0       	rjmp	.+46     	; 0x151e <cmd_if_task+0xfe>
        }
    }
    
    /* At least one byte to send. */
    do {
        UEDATX = *data_ptr;
    14f0:	e0 91 b8 01 	lds	r30, 0x01B8
    14f4:	f0 91 b9 01 	lds	r31, 0x01B9
    14f8:	80 81       	ld	r24, Z
    14fa:	80 93 f1 00 	sts	0x00F1, r24
        data_ptr++;
    14fe:	80 91 b8 01 	lds	r24, 0x01B8
    1502:	90 91 b9 01 	lds	r25, 0x01B9
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	90 93 b9 01 	sts	0x01B9, r25
    150c:	80 93 b8 01 	sts	0x01B8, r24
        bytes_left--;
    1510:	80 91 bb 01 	lds	r24, 0x01BB
    1514:	81 50       	subi	r24, 0x01	; 1
    1516:	80 93 bb 01 	sts	0x01BB, r24
    } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
    151a:	81 11       	cpse	r24, r1
    151c:	e5 cf       	rjmp	.-54     	; 0x14e8 <cmd_if_task+0xc8>
        
    /* Either 64 bytes or the last byte in a packet is written. */
    packets_left--;
    151e:	80 91 ba 01 	lds	r24, 0x01BA
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	80 93 ba 01 	sts	0x01BA, r24
        
    /* ACK writing to the bank. */
    UEINTX &= ~(1 << FIFOCON);
    1528:	80 91 e8 00 	lds	r24, 0x00E8
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	80 93 e8 00 	sts	0x00E8, r24
        
    /* Check if it is time ti move tail. */
    if ((0 == bytes_left) && (0 == packets_left)) {
    1532:	80 91 bb 01 	lds	r24, 0x01BB
    1536:	81 11       	cpse	r24, r1
    1538:	1d c0       	rjmp	.+58     	; 0x1574 <cmd_if_task+0x154>
    153a:	80 91 ba 01 	lds	r24, 0x01BA
    153e:	81 11       	cpse	r24, r1
    1540:	19 c0       	rjmp	.+50     	; 0x1574 <cmd_if_task+0x154>
        ENTER_CRITICAL_REGION();
    1542:	8f b7       	in	r24, 0x3f	; 63
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	f8 94       	cli
                
        if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_tail) {
    1548:	80 91 be 01 	lds	r24, 0x01BE
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	19 f4       	brne	.+6      	; 0x1556 <cmd_if_task+0x136>
            fifo_tail = 0;
    1550:	10 92 be 01 	sts	0x01BE, r1
    1554:	03 c0       	rjmp	.+6      	; 0x155c <cmd_if_task+0x13c>
        } else {
            fifo_tail++;
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	80 93 be 01 	sts	0x01BE, r24
        }
                
        items_used--;
    155c:	80 91 bd 01 	lds	r24, 0x01BD
    1560:	81 50       	subi	r24, 0x01	; 1
    1562:	80 93 bd 01 	sts	0x01BD, r24
        items_free++;
    1566:	80 91 bc 01 	lds	r24, 0x01BC
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 93 bc 01 	sts	0x01BC, r24
                
                
        LEAVE_CRITICAL_REGION(); 
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	8f bf       	out	0x3f, r24	; 63
    }
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <eep_init>:
/*================================= LOCAL VARIABLES  =========================*/
static eeprom_source_t eep_source = EEP_SOURCE_UNSUPPORTED;
/*================================= PROTOTYPES       =========================*/


bool eep_init(void) {
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	1f 92       	push	r1
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    /* Initialize the external TWI EEPROM, and see if it is possible to read-back
     * the magic.
     */    
    if(true != at24cxx_init()) {
    158c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <at24cxx_init>
    1590:	18 2f       	mov	r17, r24
    1592:	81 11       	cpse	r24, r1
    1594:	03 c0       	rjmp	.+6      	; 0x159c <eep_init+0x1e>
        at24cxx_deinit();
    1596:	0e 94 08 04 	call	0x810	; 0x810 <at24cxx_deinit>
        return false;    
    159a:	1f c0       	rjmp	.+62     	; 0x15da <eep_init+0x5c>
    }
    
    /* Read internal and external EEPROM magic. */
    uint8_t int_magic = 0xFF;
    EEGET(int_magic, EE_MAGIC_ADR);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    15a4:	08 2f       	mov	r16, r24
    
    uint8_t ext_magic = 0xFF;
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	89 83       	std	Y+1, r24	; 0x01
    (bool)at24cxx_read_byte(EE_MAGIC_ADR, &ext_magic);
    15aa:	be 01       	movw	r22, r28
    15ac:	6f 5f       	subi	r22, 0xFF	; 255
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
    
    bool init_status = false;
    if (EE_MAGIC == ext_magic) {
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	82 34       	cpi	r24, 0x42	; 66
    15ba:	11 f4       	brne	.+4      	; 0x15c0 <eep_init+0x42>
        eep_source = EEP_SOURCE_EXTERNAL;
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <eep_init+0x4c>
        init_status = true;
    } else if (EE_MAGIC == int_magic) {
    15c0:	02 34       	cpi	r16, 0x42	; 66
    15c2:	31 f4       	brne	.+12     	; 0x15d0 <eep_init+0x52>
        /* Save power by turning the TWI module off. */
        at24cxx_deinit();
    15c4:	0e 94 08 04 	call	0x810	; 0x810 <at24cxx_deinit>
        eep_source = EEP_SOURCE_INTERNAL;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 d3 01 	sts	0x01D3, r24
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <eep_init+0x5c>
        init_status = true;
    } else {
        /* Save power by turning the TWI module off. */
        at24cxx_deinit();
    15d0:	0e 94 08 04 	call	0x810	; 0x810 <at24cxx_deinit>
        /* No magic found. The init failed. */
        eep_source = EEP_SOURCE_UNSUPPORTED;
    15d4:	10 92 d3 01 	sts	0x01D3, r1
    EEGET(int_magic, EE_MAGIC_ADR);
    
    uint8_t ext_magic = 0xFF;
    (bool)at24cxx_read_byte(EE_MAGIC_ADR, &ext_magic);
    
    bool init_status = false;
    15d8:	10 e0       	ldi	r17, 0x00	; 0
        /* No magic found. The init failed. */
        eep_source = EEP_SOURCE_UNSUPPORTED;
    }
    
    return init_status;
}
    15da:	81 2f       	mov	r24, r17
    15dc:	0f 90       	pop	r0
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <eep_deinit>:


void eep_deinit(void) {
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    15e8:	80 91 d3 01 	lds	r24, 0x01D3
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <eep_deinit+0xc>
        /* Save power by turning the TWI module off. */
        at24cxx_deinit(); 
    15f0:	0e 94 08 04 	call	0x810	; 0x810 <at24cxx_deinit>
    }
    
    eep_source = EEP_SOURCE_UNSUPPORTED;
    15f4:	10 92 d3 01 	sts	0x01D3, r1
    15f8:	08 95       	ret

000015fa <eep_read_ieee_address>:
    
    return prod_year;
}


uint64_t eep_read_ieee_address(void) {
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	28 97       	sbiw	r28, 0x08	; 8
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    union {
        uint64_t nmbr;
        uint8_t array[sizeof(uint64_t)];
    } address_conv;
    
    address_conv.nmbr = 0;
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	1a 82       	std	Y+2, r1	; 0x02
    1612:	1b 82       	std	Y+3, r1	; 0x03
    1614:	1c 82       	std	Y+4, r1	; 0x04
    1616:	1d 82       	std	Y+5, r1	; 0x05
    1618:	1e 82       	std	Y+6, r1	; 0x06
    161a:	1f 82       	std	Y+7, r1	; 0x07
    161c:	18 86       	std	Y+8, r1	; 0x08
    
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    161e:	80 91 d3 01 	lds	r24, 0x01D3
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	89 f5       	brne	.+98     	; 0x1688 <eep_read_ieee_address+0x8e>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 0, &(address_conv.array[7]));
    1626:	be 01       	movw	r22, r28
    1628:	68 5f       	subi	r22, 0xF8	; 248
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 1, &(address_conv.array[6]));
    1632:	be 01       	movw	r22, r28
    1634:	69 5f       	subi	r22, 0xF9	; 249
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	85 e0       	ldi	r24, 0x05	; 5
    163a:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 2, &(address_conv.array[5]));
    163e:	be 01       	movw	r22, r28
    1640:	6a 5f       	subi	r22, 0xFA	; 250
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	86 e0       	ldi	r24, 0x06	; 6
    1646:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 3, &(address_conv.array[4]));
    164a:	be 01       	movw	r22, r28
    164c:	6b 5f       	subi	r22, 0xFB	; 251
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	87 e0       	ldi	r24, 0x07	; 7
    1652:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 4, &(address_conv.array[3]));
    1656:	be 01       	movw	r22, r28
    1658:	6c 5f       	subi	r22, 0xFC	; 252
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	88 e0       	ldi	r24, 0x08	; 8
    165e:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 5, &(address_conv.array[2]));
    1662:	be 01       	movw	r22, r28
    1664:	6d 5f       	subi	r22, 0xFD	; 253
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	89 e0       	ldi	r24, 0x09	; 9
    166a:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 6, &(address_conv.array[1]));
    166e:	be 01       	movw	r22, r28
    1670:	6e 5f       	subi	r22, 0xFE	; 254
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8a e0       	ldi	r24, 0x0A	; 10
    1676:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 7, &(address_conv.array[0]));
    167a:	be 01       	movw	r22, r28
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8b e0       	ldi	r24, 0x0B	; 11
    1682:	0e 94 0e 04 	call	0x81c	; 0x81c <at24cxx_read_byte>
    1686:	2a c0       	rjmp	.+84     	; 0x16dc <eep_read_ieee_address+0xe2>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	41 f5       	brne	.+80     	; 0x16dc <eep_read_ieee_address+0xe2>
        EEGET((address_conv.array[7]), EE_MAC_ADR + 0);
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    1694:	88 87       	std	Y+8, r24	; 0x08
        EEGET((address_conv.array[6]), EE_MAC_ADR + 1);
    1696:	85 e0       	ldi	r24, 0x05	; 5
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    169e:	8f 83       	std	Y+7, r24	; 0x07
        EEGET((address_conv.array[5]), EE_MAC_ADR + 2);
    16a0:	86 e0       	ldi	r24, 0x06	; 6
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    16a8:	8e 83       	std	Y+6, r24	; 0x06
        EEGET((address_conv.array[4]), EE_MAC_ADR + 3);
    16aa:	87 e0       	ldi	r24, 0x07	; 7
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    16b2:	8d 83       	std	Y+5, r24	; 0x05
        EEGET((address_conv.array[3]), EE_MAC_ADR + 4);
    16b4:	88 e0       	ldi	r24, 0x08	; 8
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    16bc:	8c 83       	std	Y+4, r24	; 0x04
        EEGET((address_conv.array[2]), EE_MAC_ADR + 5);
    16be:	89 e0       	ldi	r24, 0x09	; 9
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    16c6:	8b 83       	std	Y+3, r24	; 0x03
        EEGET((address_conv.array[1]), EE_MAC_ADR + 6);
    16c8:	8a e0       	ldi	r24, 0x0A	; 10
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    16d0:	8a 83       	std	Y+2, r24	; 0x02
        EEGET((address_conv.array[0]), EE_MAC_ADR + 7);
    16d2:	8b e0       	ldi	r24, 0x0B	; 11
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__eerd_byte_usb1287>
    16da:	89 83       	std	Y+1, r24	; 0x01
        /* Function has been called without one of the supported EEPROM locations 
         * being valid.
         */
    }
    
    return address_conv.nmbr;
    16dc:	29 81       	ldd	r18, Y+1	; 0x01
    16de:	3a 81       	ldd	r19, Y+2	; 0x02
    16e0:	4b 81       	ldd	r20, Y+3	; 0x03
    16e2:	5c 81       	ldd	r21, Y+4	; 0x04
    16e4:	6d 81       	ldd	r22, Y+5	; 0x05
    16e6:	7e 81       	ldd	r23, Y+6	; 0x06
}
    16e8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ea:	98 85       	ldd	r25, Y+8	; 0x08
    16ec:	28 96       	adiw	r28, 0x08	; 8
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <go_to_rx>:
    }
}


static void go_to_rx(void) {
    tat_reset();
    16fe:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <tat_reset>
    (bool)tat_set_state(RX_AACK_ON);
    1702:	86 e1       	ldi	r24, 0x16	; 22
    1704:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <tat_set_state>

00001708 <ieee802_15_4_init>:
static ieee802_15_4_meta_data_t frame_info;
/*================================= PROTOTYPES       =========================*/
/*! \brief Do a state transition to receive mode. */
static void go_to_rx(void);

bool ieee802_15_4_init(uint64_t ieee_address) {
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	00 d0       	rcall	.+0      	; 0x170e <ieee802_15_4_init+0x6>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    IEEE802_15_4_SET_STATE(IEEE_MAC_UNINITIALIZED);
    1712:	ef b7       	in	r30, 0x3f	; 63
    1714:	ea 83       	std	Y+2, r30	; 0x02
    1716:	f8 94       	cli
    1718:	e1 e0       	ldi	r30, 0x01	; 1
    171a:	e0 93 09 01 	sts	0x0109, r30
    171e:	ea 81       	ldd	r30, Y+2	; 0x02
    1720:	ef bf       	out	0x3f, r30	; 63
    
    /* The macro must come before ieee802_15_4_reset is called. The macro
     * shall only be called here and never from "user space".
     */
    IEEE802_15_4_SET_EXTENDED_ADDRESS(ieee_address);
    1722:	20 93 c7 11 	sts	0x11C7, r18
    1726:	30 93 c8 11 	sts	0x11C8, r19
    172a:	40 93 c9 11 	sts	0x11C9, r20
    172e:	50 93 ca 11 	sts	0x11CA, r21
    1732:	60 93 cb 11 	sts	0x11CB, r22
    1736:	70 93 cc 11 	sts	0x11CC, r23
    173a:	80 93 cd 11 	sts	0x11CD, r24
    173e:	90 93 ce 11 	sts	0x11CE, r25
    
    /* Set all indication callbacks to NULL. */
    mcdi = NULL;
    1742:	10 92 7d 02 	sts	0x027D, r1
    1746:	10 92 7c 02 	sts	0x027C, r1
    mai  = NULL;
    174a:	10 92 7b 02 	sts	0x027B, r1
    174e:	10 92 7a 02 	sts	0x027A, r1
    mdi  = NULL;
    1752:	10 92 79 02 	sts	0x0279, r1
    1756:	10 92 78 02 	sts	0x0278, r1
    moi  = NULL;
    175a:	10 92 77 02 	sts	0x0277, r1
    175e:	10 92 76 02 	sts	0x0276, r1
    mcsi = NULL;
    1762:	10 92 75 02 	sts	0x0275, r1
    1766:	10 92 74 02 	sts	0x0274, r1
    mbni = NULL;
    176a:	10 92 73 02 	sts	0x0273, r1
    176e:	10 92 72 02 	sts	0x0272, r1
    
    bool init_status = false;
    if (true != ieee802_15_4_reset(true)) {
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <ieee802_15_4_reset>
    1778:	88 23       	and	r24, r24
    177a:	49 f0       	breq	.+18     	; 0x178e <ieee802_15_4_init+0x86>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    177c:	8f b7       	in	r24, 0x3f	; 63
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	f8 94       	cli
    1782:	10 92 09 01 	sts	0x0109, r1
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	8f bf       	out	0x3f, r24	; 63
        init_status = true;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <ieee802_15_4_init+0x88>
    mdi  = NULL;
    moi  = NULL;
    mcsi = NULL;
    mbni = NULL;
    
    bool init_status = false;
    178e:	80 e0       	ldi	r24, 0x00	; 0
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
        init_status = true;
    }
    
    return init_status;
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <ieee802_15_4_deinit>:


void ieee802_15_4_deinit(void) {
    /* Turn off the radio transceiver. */
    tat_deinit();
    179a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <tat_deinit>
    
    mcdi = NULL;
    179e:	10 92 7d 02 	sts	0x027D, r1
    17a2:	10 92 7c 02 	sts	0x027C, r1
    mai  = NULL;
    17a6:	10 92 7b 02 	sts	0x027B, r1
    17aa:	10 92 7a 02 	sts	0x027A, r1
    mdi  = NULL;
    17ae:	10 92 79 02 	sts	0x0279, r1
    17b2:	10 92 78 02 	sts	0x0278, r1
    moi  = NULL;
    17b6:	10 92 77 02 	sts	0x0277, r1
    17ba:	10 92 76 02 	sts	0x0276, r1
    mcsi = NULL;
    17be:	10 92 75 02 	sts	0x0275, r1
    17c2:	10 92 74 02 	sts	0x0274, r1
        
    /* Set the IEEE 802.15.4 MAC's internal state. */
    ieee802_15_4_state = IEEE_MAC_UNINITIALIZED;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 09 01 	sts	0x0109, r24
    17cc:	08 95       	ret

000017ce <ieee802_15_4_get_mcps_data_indication>:
}


ieee802_15_4_data_indication_t ieee802_15_4_get_mcps_data_indication(void) {    
    return mcdi;
}
    17ce:	80 91 7c 02 	lds	r24, 0x027C
    17d2:	90 91 7d 02 	lds	r25, 0x027D
    17d6:	08 95       	ret

000017d8 <ieee802_15_4_set_mcps_data_indication>:
    mcdi = NULL;
    LEAVE_CRITICAL_REGION();
}


void ieee802_15_4_set_mcps_data_indication(ieee802_15_4_data_indication_t indication) {
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	1f 92       	push	r1
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    17e2:	2f b7       	in	r18, 0x3f	; 63
    17e4:	29 83       	std	Y+1, r18	; 0x01
    17e6:	f8 94       	cli
    mcdi = indication;
    17e8:	90 93 7d 02 	sts	0x027D, r25
    17ec:	80 93 7c 02 	sts	0x027C, r24
    LEAVE_CRITICAL_REGION();
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	8f bf       	out	0x3f, r24	; 63
}
    17f4:	0f 90       	pop	r0
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <ieee802_15_4_get_mlme_associate_indication>:


ieee802_15_4_associate_indication_t ieee802_15_4_get_mlme_associate_indication(void) {    
    return mai;
}
    17fc:	80 91 7a 02 	lds	r24, 0x027A
    1800:	90 91 7b 02 	lds	r25, 0x027B
    1804:	08 95       	ret

00001806 <ieee802_15_4_set_mlme_associate_indication>:
    mai = NULL;
    LEAVE_CRITICAL_REGION();
}


void ieee802_15_4_set_mlme_associate_indication(ieee802_15_4_associate_indication_t indication) {
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	1f 92       	push	r1
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    1810:	2f b7       	in	r18, 0x3f	; 63
    1812:	29 83       	std	Y+1, r18	; 0x01
    1814:	f8 94       	cli
    mai = indication;
    1816:	90 93 7b 02 	sts	0x027B, r25
    181a:	80 93 7a 02 	sts	0x027A, r24
    LEAVE_CRITICAL_REGION();
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	8f bf       	out	0x3f, r24	; 63
}
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <ieee802_15_4_get_mlme_disassociate_indication>:


ieee802_15_4_disassociate_indication_t ieee802_15_4_get_mlme_disassociate_indication(void) {    
    return mdi;
}
    182a:	80 91 78 02 	lds	r24, 0x0278
    182e:	90 91 79 02 	lds	r25, 0x0279
    1832:	08 95       	ret

00001834 <ieee802_15_4_set_mlme_disassociate_indication>:
    mdi = NULL;
    LEAVE_CRITICAL_REGION();
}


void ieee802_15_4_set_mlme_disassociate_indication(ieee802_15_4_disassociate_indication_t indication) {
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	1f 92       	push	r1
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    183e:	2f b7       	in	r18, 0x3f	; 63
    1840:	29 83       	std	Y+1, r18	; 0x01
    1842:	f8 94       	cli
    mdi = indication;
    1844:	90 93 79 02 	sts	0x0279, r25
    1848:	80 93 78 02 	sts	0x0278, r24
    LEAVE_CRITICAL_REGION();
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	8f bf       	out	0x3f, r24	; 63
}
    1850:	0f 90       	pop	r0
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	08 95       	ret

00001858 <ieee802_15_4_get_mlme_orphan_indication>:


ieee802_15_4_orphan_indication_t ieee802_15_4_get_mlme_orphan_indication(void) {    
    return moi;
}
    1858:	80 91 76 02 	lds	r24, 0x0276
    185c:	90 91 77 02 	lds	r25, 0x0277
    1860:	08 95       	ret

00001862 <ieee802_15_4_set_mlme_orphan_indication>:
    moi = NULL;
    LEAVE_CRITICAL_REGION();
}


void ieee802_15_4_set_mlme_orphan_indication(ieee802_15_4_orphan_indication_t indication) {
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	1f 92       	push	r1
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    186c:	2f b7       	in	r18, 0x3f	; 63
    186e:	29 83       	std	Y+1, r18	; 0x01
    1870:	f8 94       	cli
    moi = indication;
    1872:	90 93 77 02 	sts	0x0277, r25
    1876:	80 93 76 02 	sts	0x0276, r24
    LEAVE_CRITICAL_REGION();
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	8f bf       	out	0x3f, r24	; 63
}
    187e:	0f 90       	pop	r0
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <ieee802_15_4_get_mlme_comm_status_indication>:


ieee802_15_4_comm_status_indication_t ieee802_15_4_get_mlme_comm_status_indication(void) {    
    return mcsi;
}
    1886:	80 91 74 02 	lds	r24, 0x0274
    188a:	90 91 75 02 	lds	r25, 0x0275
    188e:	08 95       	ret

00001890 <ieee802_15_4_set_mlme_comm_status_indication>:
    mcsi = NULL;
    LEAVE_CRITICAL_REGION();
}


void ieee802_15_4_set_mlme_comm_status_indication(ieee802_15_4_comm_status_indication_t indication) {
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	1f 92       	push	r1
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    189a:	2f b7       	in	r18, 0x3f	; 63
    189c:	29 83       	std	Y+1, r18	; 0x01
    189e:	f8 94       	cli
    mcsi = indication;
    18a0:	90 93 75 02 	sts	0x0275, r25
    18a4:	80 93 74 02 	sts	0x0274, r24
    LEAVE_CRITICAL_REGION();
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	8f bf       	out	0x3f, r24	; 63
}
    18ac:	0f 90       	pop	r0
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <ieee802_15_4_get_mlme_beacon_notify_indication>:


ieee802_15_4_beacon_notify_indication_t ieee802_15_4_get_mlme_beacon_notify_indication(void) {    
    return mbni;
}
    18b4:	80 91 72 02 	lds	r24, 0x0272
    18b8:	90 91 73 02 	lds	r25, 0x0273
    18bc:	08 95       	ret

000018be <ieee802_15_4_clear_mlme_beacon_notify_indication>:


void ieee802_15_4_clear_mlme_beacon_notify_indication(void) {
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	1f 92       	push	r1
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    18c8:	8f b7       	in	r24, 0x3f	; 63
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	f8 94       	cli
    mbni = NULL;
    18ce:	10 92 73 02 	sts	0x0273, r1
    18d2:	10 92 72 02 	sts	0x0272, r1
    LEAVE_CRITICAL_REGION();
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	8f bf       	out	0x3f, r24	; 63
}
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <ieee802_15_4_set_mlme_beacon_notify_indication>:


void ieee802_15_4_set_mlme_beacon_notify_indication(ieee802_15_4_beacon_notify_indication_t indication) {
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	1f 92       	push	r1
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    18ec:	2f b7       	in	r18, 0x3f	; 63
    18ee:	29 83       	std	Y+1, r18	; 0x01
    18f0:	f8 94       	cli
    mbni = indication;
    18f2:	90 93 73 02 	sts	0x0273, r25
    18f6:	80 93 72 02 	sts	0x0272, r24
    LEAVE_CRITICAL_REGION();
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	8f bf       	out	0x3f, r24	; 63
}
    18fe:	0f 90       	pop	r0
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <ieee802_15_4_pd_data_indication>:


void ieee802_15_4_pd_data_indication(void *frame_length) {
    1906:	cf 93       	push	r28
     * length accespted by the TAT.
     */


    /* Extract frame length from the event parameter. */
    uint8_t length = *((uint8_t*)frame_length);
    1908:	fc 01       	movw	r30, r24
    190a:	c0 81       	ld	r28, Z
    
    /* Upload frame. Take the LQI field into count, so add two (frame length + LQI).*/
    if (true != tat_read_frame(length + 2, pd_frame_buffer)) {
    190c:	61 ef       	ldi	r22, 0xF1	; 241
    190e:	71 e0       	ldi	r23, 0x01	; 1
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	8c 0f       	add	r24, r28
    1914:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <tat_read_frame>
    1918:	81 11       	cpse	r24, r1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <ieee802_15_4_pd_data_indication+0x1c>
    
    /* Post the appropriate indication event, or free up the packet. */
    if (true != vrt_post_event(event_handler, ((void *)(&frame_info)))) {
        go_to_rx();
    }
}
    191c:	cf 91       	pop	r28
    /* Extract frame length from the event parameter. */
    uint8_t length = *((uint8_t*)frame_length);
    
    /* Upload frame. Take the LQI field into count, so add two (frame length + LQI).*/
    if (true != tat_read_frame(length + 2, pd_frame_buffer)) {
        go_to_rx();
    191e:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <go_to_rx>
        return;
    }
    
    /* Store LQI from the frame. */
    frame_info.lqi = pd_frame_buffer[length + 1];
    1922:	ec 2f       	mov	r30, r28
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	ef 50       	subi	r30, 0x0F	; 15
    1928:	fe 4f       	sbci	r31, 0xFE	; 254
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	80 93 f0 01 	sts	0x01F0, r24
    
    // 2. Extract the FCF field. */
    uint16_t fcf = (pd_frame_buffer[1] << 8 * 0); // Read FCF LSB.
    1930:	80 91 f2 01 	lds	r24, 0x01F2
    fcf         |= (pd_frame_buffer[2] << 8 * 1); // Read FCF MSB.
    1934:	20 91 f3 01 	lds	r18, 0x01F3
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	92 2b       	or	r25, r18
    
    // 4. Check if this frame has security enabled. Not supported on MAC level.
    if (FCF_SECURITY_ENABLED == (fcf & FCF_SECURITY_ENABLED)) {
    193c:	83 fd       	sbrc	r24, 3
    193e:	ee cf       	rjmp	.-36     	; 0x191c <ieee802_15_4_pd_data_indication+0x16>
        go_to_rx();
        return;
    }
    
    // 5. Get frame type and verify that it is supported.
    uint8_t frame_type = FCF_GET_FRAMETYPE(fcf);
    1940:	58 2f       	mov	r21, r24
    1942:	57 70       	andi	r21, 0x07	; 7
    if ((FCF_FRAMETYPE_DATA != frame_type) && 
    1944:	53 30       	cpi	r21, 0x03	; 3
    1946:	11 f0       	breq	.+4      	; 0x194c <ieee802_15_4_pd_data_indication+0x46>
        (FCF_FRAMETYPE_MAC_CMD != frame_type) &&
    1948:	52 30       	cpi	r21, 0x02	; 2
    194a:	40 f7       	brcc	.-48     	; 0x191c <ieee802_15_4_pd_data_indication+0x16>
        (FCF_FRAMETYPE_BEACON != frame_type)) {
        go_to_rx();
        return;
    }
    
    frame_info.frame_type = frame_type;
    194c:	50 93 d4 01 	sts	0x01D4, r21
    
    // 6. Read the addressing mode used and check that it is valid.
    frame_info.dst_addr_mode = FCF_GET_DEST_ADDR_MODE(fcf);
    1950:	49 2f       	mov	r20, r25
    1952:	46 95       	lsr	r20
    1954:	46 95       	lsr	r20
    1956:	43 70       	andi	r20, 0x03	; 3
    1958:	40 93 d6 01 	sts	0x01D6, r20
    frame_info.src_addr_mode = FCF_GET_SOURCE_ADDR_MODE(fcf);
    195c:	9c 01       	movw	r18, r24
    195e:	24 e0       	ldi	r18, 0x04	; 4
    1960:	32 9f       	mul	r19, r18
    1962:	21 2d       	mov	r18, r1
    1964:	33 27       	eor	r19, r19
    1966:	11 24       	eor	r1, r1
    1968:	62 2f       	mov	r22, r18
    196a:	20 93 e1 01 	sts	0x01E1, r18
    if ((FCF_NO_ADDR == (frame_info.dst_addr_mode)) && 
    196e:	41 11       	cpse	r20, r1
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <ieee802_15_4_pd_data_indication+0x70>
    1972:	22 23       	and	r18, r18
    1974:	99 f2       	breq	.-90     	; 0x191c <ieee802_15_4_pd_data_indication+0x16>
        return;
    }
    
    /* Extract sequence number. */
    uint8_t i = 3;
    frame_info.seq_nmbr = pd_frame_buffer[i];
    1976:	20 91 f4 01 	lds	r18, 0x01F4
    197a:	20 93 d5 01 	sts	0x01D5, r18
    i++;
    
    // 7. Extract Destination addressing fields.
    frame_info.dst_addr = 0;
    197e:	10 92 d9 01 	sts	0x01D9, r1
    1982:	10 92 da 01 	sts	0x01DA, r1
    1986:	10 92 db 01 	sts	0x01DB, r1
    198a:	10 92 dc 01 	sts	0x01DC, r1
    198e:	10 92 dd 01 	sts	0x01DD, r1
    1992:	10 92 de 01 	sts	0x01DE, r1
    1996:	10 92 df 01 	sts	0x01DF, r1
    199a:	10 92 e0 01 	sts	0x01E0, r1
    if (FCF_NO_ADDR == (frame_info.dst_addr_mode)) {
    199e:	44 23       	and	r20, r20
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <ieee802_15_4_pd_data_indication+0x9e>
    19a2:	41 c0       	rjmp	.+130    	; 0x1a26 <ieee802_15_4_pd_data_indication+0x120>
        // No destination address is only possible if this is a PAN Coordinator and
        // the received frame is a Data Request command. Or that the frame is a Beacon.
    } else if (FCF_SHORT_ADDR == (frame_info.dst_addr_mode)) {
    19a4:	42 30       	cpi	r20, 0x02	; 2
    19a6:	91 f4       	brne	.+36     	; 0x19cc <ieee802_15_4_pd_data_indication+0xc6>
        memcpy((void *)(&(frame_info.dst_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    19a8:	20 91 f5 01 	lds	r18, 0x01F5
    19ac:	30 91 f6 01 	lds	r19, 0x01F6
    19b0:	30 93 d8 01 	sts	0x01D8, r19
    19b4:	20 93 d7 01 	sts	0x01D7, r18
        i += sizeof(uint16_t);
        memcpy((void *)(&(frame_info.dst_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    19b8:	20 91 f7 01 	lds	r18, 0x01F7
    19bc:	30 91 f8 01 	lds	r19, 0x01F8
    19c0:	30 93 da 01 	sts	0x01DA, r19
    19c4:	20 93 d9 01 	sts	0x01D9, r18
        i += sizeof(uint16_t);
    19c8:	28 e0       	ldi	r18, 0x08	; 8
    19ca:	2e c0       	rjmp	.+92     	; 0x1a28 <ieee802_15_4_pd_data_indication+0x122>
    } else if (FCF_LONG_ADDR == (frame_info.dst_addr_mode)) {
    19cc:	43 30       	cpi	r20, 0x03	; 3
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <ieee802_15_4_pd_data_indication+0xcc>
    19d0:	a5 cf       	rjmp	.-182    	; 0x191c <ieee802_15_4_pd_data_indication+0x16>
        memcpy((void *)(&(frame_info.dst_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    19d2:	20 91 f5 01 	lds	r18, 0x01F5
    19d6:	30 91 f6 01 	lds	r19, 0x01F6
    19da:	30 93 d8 01 	sts	0x01D8, r19
    19de:	20 93 d7 01 	sts	0x01D7, r18
        i += sizeof(uint16_t);
        memcpy((void *)(&(frame_info.dst_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint64_t));
    19e2:	20 91 f7 01 	lds	r18, 0x01F7
    19e6:	20 93 d9 01 	sts	0x01D9, r18
    19ea:	20 91 f8 01 	lds	r18, 0x01F8
    19ee:	20 93 da 01 	sts	0x01DA, r18
    19f2:	20 91 f9 01 	lds	r18, 0x01F9
    19f6:	20 93 db 01 	sts	0x01DB, r18
    19fa:	20 91 fa 01 	lds	r18, 0x01FA
    19fe:	20 93 dc 01 	sts	0x01DC, r18
    1a02:	20 91 fb 01 	lds	r18, 0x01FB
    1a06:	20 93 dd 01 	sts	0x01DD, r18
    1a0a:	20 91 fc 01 	lds	r18, 0x01FC
    1a0e:	20 93 de 01 	sts	0x01DE, r18
    1a12:	20 91 fd 01 	lds	r18, 0x01FD
    1a16:	20 93 df 01 	sts	0x01DF, r18
    1a1a:	20 91 fe 01 	lds	r18, 0x01FE
    1a1e:	20 93 e0 01 	sts	0x01E0, r18
        i += sizeof(uint64_t);
    1a22:	2e e0       	ldi	r18, 0x0E	; 14
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <ieee802_15_4_pd_data_indication+0x122>
    }
    
    /* Extract sequence number. */
    uint8_t i = 3;
    frame_info.seq_nmbr = pd_frame_buffer[i];
    i++;
    1a26:	24 e0       	ldi	r18, 0x04	; 4
        go_to_rx();
        return;
    }
    
    // 8. Extract Source addressing fields.
    frame_info.src_addr = 0;
    1a28:	10 92 e4 01 	sts	0x01E4, r1
    1a2c:	10 92 e5 01 	sts	0x01E5, r1
    1a30:	10 92 e6 01 	sts	0x01E6, r1
    1a34:	10 92 e7 01 	sts	0x01E7, r1
    1a38:	10 92 e8 01 	sts	0x01E8, r1
    1a3c:	10 92 e9 01 	sts	0x01E9, r1
    1a40:	10 92 ea 01 	sts	0x01EA, r1
    1a44:	10 92 eb 01 	sts	0x01EB, r1
    if (FCF_NO_ADDR == (frame_info.src_addr_mode)) {
    1a48:	66 23       	and	r22, r22
    1a4a:	a1 f1       	breq	.+104    	; 0x1ab4 <ieee802_15_4_pd_data_indication+0x1ae>
    } else {
        // Either a short or long address is available. Check for PAN_ID compression.
        if (FCF_INTRA_PAN != (fcf & FCF_INTRA_PAN)) {
    1a4c:	86 fd       	sbrc	r24, 6
    1a4e:	0b c0       	rjmp	.+22     	; 0x1a66 <ieee802_15_4_pd_data_indication+0x160>
            memcpy((void *)(&(frame_info.src_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    1a50:	e2 2f       	mov	r30, r18
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	ef 50       	subi	r30, 0x0F	; 15
    1a56:	fe 4f       	sbci	r31, 0xFE	; 254
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	90 93 e3 01 	sts	0x01E3, r25
    1a60:	80 93 e2 01 	sts	0x01E2, r24
            i += sizeof(uint16_t);
    1a64:	2e 5f       	subi	r18, 0xFE	; 254
    1a66:	e2 2f       	mov	r30, r18
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
        } // END: if (FCF_INTRA_PAN == (fcf & FCF_INTRA_PAN)) ...
        
        if (FCF_SHORT_ADDR == (frame_info.src_addr_mode)) {    
            memcpy((void *)(&(frame_info.src_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    1a6a:	ef 50       	subi	r30, 0x0F	; 15
    1a6c:	fe 4f       	sbci	r31, 0xFE	; 254
        if (FCF_INTRA_PAN != (fcf & FCF_INTRA_PAN)) {
            memcpy((void *)(&(frame_info.src_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
            i += sizeof(uint16_t);
        } // END: if (FCF_INTRA_PAN == (fcf & FCF_INTRA_PAN)) ...
        
        if (FCF_SHORT_ADDR == (frame_info.src_addr_mode)) {    
    1a6e:	62 30       	cpi	r22, 0x02	; 2
    1a70:	41 f4       	brne	.+16     	; 0x1a82 <ieee802_15_4_pd_data_indication+0x17c>
            memcpy((void *)(&(frame_info.src_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	90 93 e5 01 	sts	0x01E5, r25
    1a7a:	80 93 e4 01 	sts	0x01E4, r24
            i += sizeof(uint16_t);
    1a7e:	2e 5f       	subi	r18, 0xFE	; 254
    1a80:	19 c0       	rjmp	.+50     	; 0x1ab4 <ieee802_15_4_pd_data_indication+0x1ae>
        } else {
            memcpy((void *)(&(frame_info.src_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint64_t));
    1a82:	80 81       	ld	r24, Z
    1a84:	80 93 e4 01 	sts	0x01E4, r24
    1a88:	81 81       	ldd	r24, Z+1	; 0x01
    1a8a:	80 93 e5 01 	sts	0x01E5, r24
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	80 93 e6 01 	sts	0x01E6, r24
    1a94:	83 81       	ldd	r24, Z+3	; 0x03
    1a96:	80 93 e7 01 	sts	0x01E7, r24
    1a9a:	84 81       	ldd	r24, Z+4	; 0x04
    1a9c:	80 93 e8 01 	sts	0x01E8, r24
    1aa0:	85 81       	ldd	r24, Z+5	; 0x05
    1aa2:	80 93 e9 01 	sts	0x01E9, r24
    1aa6:	86 81       	ldd	r24, Z+6	; 0x06
    1aa8:	80 93 ea 01 	sts	0x01EA, r24
    1aac:	87 81       	ldd	r24, Z+7	; 0x07
    1aae:	80 93 eb 01 	sts	0x01EB, r24
            i += sizeof(uint64_t);
    1ab2:	28 5f       	subi	r18, 0xF8	; 248
        }
    }
    
    // 9. Set the command type if applicable.
    if (FCF_FRAMETYPE_MAC_CMD == (frame_info.frame_type)) {
    1ab4:	53 30       	cpi	r21, 0x03	; 3
    1ab6:	49 f4       	brne	.+18     	; 0x1aca <ieee802_15_4_pd_data_indication+0x1c4>
        frame_info.cmd_type = pd_frame_buffer[i];
    1ab8:	e2 2f       	mov	r30, r18
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	ef 50       	subi	r30, 0x0F	; 15
    1abe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac0:	80 81       	ld	r24, Z
    1ac2:	80 93 ec 01 	sts	0x01EC, r24
        i++;
    1ac6:	2f 5f       	subi	r18, 0xFF	; 255
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <ieee802_15_4_pd_data_indication+0x1c8>
    } else {
        frame_info.cmd_type = 0;
    1aca:	10 92 ec 01 	sts	0x01EC, r1
    }
    
    // 10. Set pointer to msdu and calculate msdu length.
    frame_info.msdu = &pd_frame_buffer[i];
    1ace:	82 2f       	mov	r24, r18
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	8f 50       	subi	r24, 0x0F	; 15
    1ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad6:	90 93 ee 01 	sts	0x01EE, r25
    1ada:	80 93 ed 01 	sts	0x01ED, r24
    
    /* Decrement frame index so that msdu length calculation is correct. The decrement
     * by one is done since 'i' is always pointing to the start of the next field.
     */
    i--;
    frame_info.msdu_length = length - i - CRC_SIZE;
    1ade:	c1 50       	subi	r28, 0x01	; 1
    1ae0:	c2 1b       	sub	r28, r18
    1ae2:	c0 93 ef 01 	sts	0x01EF, r28
    
    vrt_event_handler_t event_handler = (vrt_event_handler_t)NULL;
    
    switch(frame_info.frame_type) {
    1ae6:	51 30       	cpi	r21, 0x01	; 1
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <ieee802_15_4_pd_data_indication+0x1ee>
    1aea:	53 30       	cpi	r21, 0x03	; 3
    1aec:	31 f0       	breq	.+12     	; 0x1afa <ieee802_15_4_pd_data_indication+0x1f4>
        case FCF_FRAMETYPE_MAC_CMD:
            event_handler = ieee802_15_4_mlme_cmd_indication;
        break;
        
        default:
            event_handler = ieee802_15_4_mlme_beacon_indication;
    1aee:	84 ed       	ldi	r24, 0xD4	; 212
    1af0:	90 e1       	ldi	r25, 0x10	; 16
        break;
    1af2:	05 c0       	rjmp	.+10     	; 0x1afe <ieee802_15_4_pd_data_indication+0x1f8>
    
    vrt_event_handler_t event_handler = (vrt_event_handler_t)NULL;
    
    switch(frame_info.frame_type) {
        case FCF_FRAMETYPE_DATA:
            event_handler = ieee802_15_4_process_data_indication;
    1af4:	89 e0       	ldi	r24, 0x09	; 9
    1af6:	95 e1       	ldi	r25, 0x15	; 21
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <ieee802_15_4_pd_data_indication+0x1f8>
        break;
        
        case FCF_FRAMETYPE_MAC_CMD:
            event_handler = ieee802_15_4_mlme_cmd_indication;
    1afa:	87 e6       	ldi	r24, 0x67	; 103
    1afc:	92 e1       	ldi	r25, 0x12	; 18
            event_handler = ieee802_15_4_mlme_beacon_indication;
        break;
    }
    
    /* Post the appropriate indication event, or free up the packet. */
    if (true != vrt_post_event(event_handler, ((void *)(&frame_info)))) {
    1afe:	64 ed       	ldi	r22, 0xD4	; 212
    1b00:	71 e0       	ldi	r23, 0x01	; 1
    1b02:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
    1b06:	88 23       	and	r24, r24
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <ieee802_15_4_pd_data_indication+0x206>
    1b0a:	08 cf       	rjmp	.-496    	; 0x191c <ieee802_15_4_pd_data_indication+0x16>
        go_to_rx();
    }
}
    1b0c:	cf 91       	pop	r28
    1b0e:	08 95       	ret

00001b10 <ieee802_15_4_send>:


bool ieee802_15_4_send(uint8_t length, uint8_t *data) {
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	08 2f       	mov	r16, r24
    1b1a:	eb 01       	movw	r28, r22
    /* Do state transition to TX_ARET_ON. */
    if (true != tat_wake_up()) {
    1b1c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    1b20:	81 11       	cpse	r24, r1
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <ieee802_15_4_send+0x18>
        /* Send frame. */
        tat_send_frame(length, data);
        return true;
    }
    
    return false;
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	0a c0       	rjmp	.+20     	; 0x1b3c <ieee802_15_4_send+0x2c>


bool ieee802_15_4_send(uint8_t length, uint8_t *data) {
    /* Do state transition to TX_ARET_ON. */
    if (true != tat_wake_up()) {
    } else if (true != tat_set_state(TX_ARET_ON)) {
    1b28:	89 e1       	ldi	r24, 0x19	; 25
    1b2a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    1b2e:	18 2f       	mov	r17, r24
    1b30:	88 23       	and	r24, r24
    1b32:	c1 f3       	breq	.-16     	; 0x1b24 <ieee802_15_4_send+0x14>
    } else {
        
        /* Send frame. */
        tat_send_frame(length, data);
    1b34:	be 01       	movw	r22, r28
    1b36:	80 2f       	mov	r24, r16
    1b38:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <tat_send_frame>
        return true;
    }
    
    return false;
}
    1b3c:	81 2f       	mov	r24, r17
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret

00001b48 <ieee802_15_4_send_ack_event_handler>:
    /* Frame has been sent and then ACK'ed. The radio transeiver will now have 
     * been taken to TRX_OFF. */
   
    uint8_t mac_state = IEEE802_15_4_GET_STATE();
    
    switch (mac_state) {
    1b48:	40 91 09 01 	lds	r20, 0x0109
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	fa 01       	movw	r30, r20
    1b50:	32 97       	sbiw	r30, 0x02	; 2
    1b52:	ee 30       	cpi	r30, 0x0E	; 14
    1b54:	f1 05       	cpc	r31, r1
    1b56:	90 f4       	brcc	.+36     	; 0x1b7c <ieee802_15_4_send_ack_event_handler+0x34>
    1b58:	ec 58       	subi	r30, 0x8C	; 140
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__tablejump2__>
        case IEEE_MAC_TX_WAITING_ACK:
            ieee802_15_4_data_process_ack(tx_status);
    1b60:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <ieee802_15_4_data_process_ack>
        break;
        
        case IEEE_MAC_WAITING_ASSOCIATION_REQUEST_ACK:
        case IEEE_MAC_WAITING_DATA_REQUEST_ACK:
            ieee802_15_4_associate_process_ack(tx_status);
    1b64:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <ieee802_15_4_associate_process_ack>
        break;
        
        case IEEE_MAC_WAITING_ASSOCIATE_RESPONSE_ACK:
            ieee802_15_4_associate_response_process_ack(tx_status);
    1b68:	0c 94 b6 10 	jmp	0x216c	; 0x216c <ieee802_15_4_associate_response_process_ack>
        break;
        
        case IEEE_MAC_DISASSOCIATE_WAITING_ACK:
            ieee802_15_4_disassociate_process_ack(tx_status);
    1b6c:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <ieee802_15_4_disassociate_process_ack>
        break;
        
        case IEEE_MAC_WAITING_FOR_COORD_REALIGN_ACK:
            ieee802_15_4_coord_realign_process_ack(tx_status);
    1b70:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <ieee802_15_4_coord_realign_process_ack>
        break;
        
        case IEEE_MAC_BUSY_SCANNING:
            ieee802_15_4_scan_process_ack(tx_status);
    1b74:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <ieee802_15_4_scan_process_ack>
        break;
        
        case IEEE_MAC_WAITING_BEACON_ACK:
            ieee802_15_4_process_beacon_ack(tx_status);
    1b78:	0c 94 48 12 	jmp	0x2490	; 0x2490 <ieee802_15_4_process_beacon_ack>
        break;
        
        default:
            /* Return to RX mode if the device is set to do so. */
            if (true == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    1b7c:	80 91 bd 11 	lds	r24, 0x11BD
    1b80:	81 11       	cpse	r24, r1
                go_to_rx();
    1b82:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <go_to_rx>
            } else {
                tat_go_to_sleep();
    1b86:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <tat_go_to_sleep>

00001b8a <send_comm_status_indication>:
    
    send_comm_status_indication(mcsi_status);  
}


static void send_comm_status_indication(uint8_t status) {
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	1f 92       	push	r1
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	18 2f       	mov	r17, r24
    ieee802_15_4_comm_status_indication_t msci_callback = ieee802_15_4_get_mlme_comm_status_indication();
    1b98:	0e 94 43 0c 	call	0x1886	; 0x1886 <ieee802_15_4_get_mlme_comm_status_indication>
    1b9c:	fc 01       	movw	r30, r24
    
    if (NULL == msci_callback) { return; }
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	91 f0       	breq	.+36     	; 0x1bc6 <send_comm_status_indication+0x3c>
    
    mcsi.status = status;
    1ba2:	10 93 92 02 	sts	0x0292, r17
    
    /* Execute callback. */
    msci_callback(&mcsi);
    1ba6:	8e e7       	ldi	r24, 0x7E	; 126
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	09 95       	icall
    
    /* Ensure that the Coordinator is taken back to RX_AACK_ON state. */
    tat_reset();
    1bac:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <tat_reset>
    (bool)tat_set_state(RX_AACK_ON);
    1bb0:	86 e1       	ldi	r24, 0x16	; 22
    1bb2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    1bb6:	8f b7       	in	r24, 0x3f	; 63
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	f8 94       	cli
    1bbc:	85 e0       	ldi	r24, 0x05	; 5
    1bbe:	80 93 09 01 	sts	0x0109, r24
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	8f bf       	out	0x3f, r24	; 63
}
    1bc6:	0f 90       	pop	r0
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	08 95       	ret

00001bd0 <ieee802_15_4_associate_request>:
 *  \param[in] status Status that the MLME_COMM_STATUS.indication will be sent with.
 */
static void send_comm_status_indication(uint8_t status);


bool ieee802_15_4_associate_request(mlme_associate_req_t *mar) {
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <ieee802_15_4_associate_request+0xa>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	8c 01       	movw	r16, r24
    /* Check that the device is in the correct state. */
    if (IEEE_MAC_IDLE != IEEE802_15_4_GET_STATE()) { return false; }
    1be0:	80 91 09 01 	lds	r24, 0x0109
    1be4:	81 11       	cpse	r24, r1
    1be6:	e0 c0       	rjmp	.+448    	; 0x1da8 <ieee802_15_4_associate_request+0x1d8>
    
    /* Perform sanity check on all function parameters. */
    if (NULL == mar) { return false; }
    1be8:	01 15       	cp	r16, r1
    1bea:	11 05       	cpc	r17, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <ieee802_15_4_associate_request+0x20>
    1bee:	dc c0       	rjmp	.+440    	; 0x1da8 <ieee802_15_4_associate_request+0x1d8>
    if (NULL == (mar->mlme_associate_confirm)) { return false; }    
    1bf0:	d8 01       	movw	r26, r16
    1bf2:	1d 96       	adiw	r26, 0x0d	; 13
    1bf4:	8d 91       	ld	r24, X+
    1bf6:	9c 91       	ld	r25, X
    1bf8:	1e 97       	sbiw	r26, 0x0e	; 14
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <ieee802_15_4_associate_request+0x30>
    1bfe:	d4 c0       	rjmp	.+424    	; 0x1da8 <ieee802_15_4_associate_request+0x1d8>
    
    /* Store confirm callback and storage for confirm parameters. */
    confirm_ptr = &(mar->mac);
    1c00:	98 01       	movw	r18, r16
    1c02:	21 5f       	subi	r18, 0xF1	; 241
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
    1c06:	30 93 b1 02 	sts	0x02B1, r19
    1c0a:	20 93 b0 02 	sts	0x02B0, r18
    mlme_associate_confirm = mar->mlme_associate_confirm;
    1c0e:	90 93 af 02 	sts	0x02AF, r25
    1c12:	80 93 ae 02 	sts	0x02AE, r24
    
    uint8_t channel = mar->LogicalChannel;
    if ((channel < MIN_CHANNEL) || (channel > MAX_CHANNEL)) { return false; }
    1c16:	8c 91       	ld	r24, X
    1c18:	8b 50       	subi	r24, 0x0B	; 11
    1c1a:	80 31       	cpi	r24, 0x10	; 16
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <ieee802_15_4_associate_request+0x50>
    1c1e:	c4 c0       	rjmp	.+392    	; 0x1da8 <ieee802_15_4_associate_request+0x1d8>
    
    if (BROADCAST == (mar->CoordPANId))  { return false; }
    1c20:	12 96       	adiw	r26, 0x02	; 2
    1c22:	8d 91       	ld	r24, X+
    1c24:	9c 91       	ld	r25, X
    1c26:	13 97       	sbiw	r26, 0x03	; 3
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <ieee802_15_4_associate_request+0x5e>
    1c2c:	bd c0       	rjmp	.+378    	; 0x1da8 <ieee802_15_4_associate_request+0x1d8>
    
    uint8_t addr_mode = mar->CoordAddrMode;
    1c2e:	f8 01       	movw	r30, r16
    1c30:	21 81       	ldd	r18, Z+1	; 0x01
    
    if ((FCF_SHORT_ADDR != addr_mode) && (FCF_LONG_ADDR != addr_mode)) { return false; }
    1c32:	8e ef       	ldi	r24, 0xFE	; 254
    1c34:	82 0f       	add	r24, r18
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <ieee802_15_4_associate_request+0x6c>
    1c3a:	b6 c0       	rjmp	.+364    	; 0x1da8 <ieee802_15_4_associate_request+0x1d8>
    
    /* 1. Build FCF. */
    uint8_t index = 0;
    uint16_t fcf;
    
    if (FCF_SHORT_ADDR == addr_mode) {
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	41 f4       	brne	.+16     	; 0x1c50 <ieee802_15_4_associate_request+0x80>
        IEEE802_15_4_SET_COORD_SHORT_ADDRESS((mar->CoordAddress));
    1c40:	84 81       	ldd	r24, Z+4	; 0x04
    1c42:	95 81       	ldd	r25, Z+5	; 0x05
    1c44:	90 93 c4 11 	sts	0x11C4, r25
    1c48:	80 93 c3 11 	sts	0x11C3, r24
        fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR) |
    1c4c:	88 ec       	ldi	r24, 0xC8	; 200
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <ieee802_15_4_associate_request+0xce>
              FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;
    } else {
        memcpy((void *)(&(IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS())), (void *)(&(mar->CoordAddress)), sizeof(uint64_t));
    1c50:	d8 01       	movw	r26, r16
    1c52:	e4 81       	ldd	r30, Z+4	; 0x04
    1c54:	15 96       	adiw	r26, 0x05	; 5
    1c56:	7c 91       	ld	r23, X
    1c58:	15 97       	sbiw	r26, 0x05	; 5
    1c5a:	16 96       	adiw	r26, 0x06	; 6
    1c5c:	6c 91       	ld	r22, X
    1c5e:	16 97       	sbiw	r26, 0x06	; 6
    1c60:	17 96       	adiw	r26, 0x07	; 7
    1c62:	5c 91       	ld	r21, X
    1c64:	17 97       	sbiw	r26, 0x07	; 7
    1c66:	18 96       	adiw	r26, 0x08	; 8
    1c68:	4c 91       	ld	r20, X
    1c6a:	18 97       	sbiw	r26, 0x08	; 8
    1c6c:	19 96       	adiw	r26, 0x09	; 9
    1c6e:	3c 91       	ld	r19, X
    1c70:	19 97       	sbiw	r26, 0x09	; 9
    1c72:	1a 96       	adiw	r26, 0x0a	; 10
    1c74:	9c 91       	ld	r25, X
    1c76:	1a 97       	sbiw	r26, 0x0a	; 10
    1c78:	1b 96       	adiw	r26, 0x0b	; 11
    1c7a:	8c 91       	ld	r24, X
    1c7c:	e0 93 cf 11 	sts	0x11CF, r30
    1c80:	70 93 d0 11 	sts	0x11D0, r23
    1c84:	60 93 d1 11 	sts	0x11D1, r22
    1c88:	50 93 d2 11 	sts	0x11D2, r21
    1c8c:	40 93 d3 11 	sts	0x11D3, r20
    1c90:	30 93 d4 11 	sts	0x11D4, r19
    1c94:	90 93 d5 11 	sts	0x11D5, r25
    1c98:	80 93 d6 11 	sts	0x11D6, r24
        
        fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR) |
    1c9c:	8c ec       	ldi	r24, 0xCC	; 204
              FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;
    }
    
    // Add FCF fields.
    association_request[index++] = ((fcf >> 8*0) & 0xFF);
    1c9e:	93 e2       	ldi	r25, 0x23	; 35
    1ca0:	90 93 3d 11 	sts	0x113D, r25
    association_request[index++] = ((fcf >> 8*1) & 0xFF);
    1ca4:	80 93 3e 11 	sts	0x113E, r24

    /* 2. Add farme sequence number. */
    association_request[index++] = IEEE802_15_4_GET_DSN();
    1ca8:	80 91 bf 11 	lds	r24, 0x11BF
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	98 0f       	add	r25, r24
    1cb0:	90 93 bf 11 	sts	0x11BF, r25
    1cb4:	80 93 3f 11 	sts	0x113F, r24

    /* 3. Build Address Fields. */
    memcpy((void *)(&association_request[index]), (void *)(&(mar->CoordPANId)),sizeof(uint16_t));
    1cb8:	f8 01       	movw	r30, r16
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	90 93 41 11 	sts	0x1141, r25
    1cc2:	80 93 40 11 	sts	0x1140, r24
    index += sizeof(uint16_t);
    
    // Build the destination address.
    if (FCF_SHORT_ADDR == addr_mode) {
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	41 f4       	brne	.+16     	; 0x1cda <ieee802_15_4_associate_request+0x10a>
        memcpy((void *)(&association_request[index]), (void *)(&(mar->CoordAddress)), sizeof(uint16_t));
    1cca:	84 81       	ldd	r24, Z+4	; 0x04
    1ccc:	95 81       	ldd	r25, Z+5	; 0x05
    1cce:	90 93 43 11 	sts	0x1143, r25
    1cd2:	80 93 42 11 	sts	0x1142, r24
        index += sizeof(uint16_t);
    1cd6:	27 e0       	ldi	r18, 0x07	; 7
    1cd8:	0a c0       	rjmp	.+20     	; 0x1cee <ieee802_15_4_associate_request+0x11e>
    } else {
        memcpy((void *)(&association_request[index]), (void *)(&(mar->CoordAddress)), sizeof(uint64_t));
    1cda:	88 e0       	ldi	r24, 0x08	; 8
    1cdc:	f8 01       	movw	r30, r16
    1cde:	34 96       	adiw	r30, 0x04	; 4
    1ce0:	a2 e4       	ldi	r26, 0x42	; 66
    1ce2:	b1 e1       	ldi	r27, 0x11	; 17
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	0d 92       	st	X+, r0
    1ce8:	8a 95       	dec	r24
    1cea:	e1 f7       	brne	.-8      	; 0x1ce4 <ieee802_15_4_associate_request+0x114>
        index += sizeof(uint64_t);
    1cec:	2d e0       	ldi	r18, 0x0D	; 13
    }

    // Source PAN ID equals broadcast (0xFFFF) PAN ID for this message.
    association_request[index++] = 0xFF;
    1cee:	e2 2f       	mov	r30, r18
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	e3 5c       	subi	r30, 0xC3	; 195
    1cf4:	fe 4e       	sbci	r31, 0xEE	; 238
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	80 83       	st	Z, r24
    1cfa:	e1 e0       	ldi	r30, 0x01	; 1
    1cfc:	e2 0f       	add	r30, r18
    association_request[index++] = 0xFF;
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	e3 5c       	subi	r30, 0xC3	; 195
    1d02:	fe 4e       	sbci	r31, 0xEE	; 238
    1d04:	80 83       	st	Z, r24
    1d06:	e2 e0       	ldi	r30, 0x02	; 2
    1d08:	e2 0f       	add	r30, r18

    // Build the source address.
    memcpy((void *)(&association_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	e3 5c       	subi	r30, 0xC3	; 195
    1d0e:	fe 4e       	sbci	r31, 0xEE	; 238
    1d10:	80 91 c7 11 	lds	r24, 0x11C7
    1d14:	80 83       	st	Z, r24
    1d16:	80 91 c8 11 	lds	r24, 0x11C8
    1d1a:	81 83       	std	Z+1, r24	; 0x01
    1d1c:	80 91 c9 11 	lds	r24, 0x11C9
    1d20:	82 83       	std	Z+2, r24	; 0x02
    1d22:	80 91 ca 11 	lds	r24, 0x11CA
    1d26:	83 83       	std	Z+3, r24	; 0x03
    1d28:	80 91 cb 11 	lds	r24, 0x11CB
    1d2c:	84 83       	std	Z+4, r24	; 0x04
    1d2e:	80 91 cc 11 	lds	r24, 0x11CC
    1d32:	85 83       	std	Z+5, r24	; 0x05
    1d34:	80 91 cd 11 	lds	r24, 0x11CD
    1d38:	86 83       	std	Z+6, r24	; 0x06
    1d3a:	80 91 ce 11 	lds	r24, 0x11CE
    1d3e:	87 83       	std	Z+7, r24	; 0x07
    index += sizeof(uint64_t);
    1d40:	ea e0       	ldi	r30, 0x0A	; 10
    1d42:	e2 0f       	add	r30, r18

    /* 4. Build the command frame id. */
    association_request[index++] = ASSOCIATIONREQUEST;
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	e3 5c       	subi	r30, 0xC3	; 195
    1d48:	fe 4e       	sbci	r31, 0xEE	; 238
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	80 83       	st	Z, r24

    /* 5. Build the capability info. */
    association_request[index++] = mar->CapabilityInformation;
    1d4e:	d8 01       	movw	r26, r16
    1d50:	1c 96       	adiw	r26, 0x0c	; 12
    1d52:	8c 91       	ld	r24, X
    1d54:	1c 97       	sbiw	r26, 0x0c	; 12
    // Build the source address.
    memcpy((void *)(&association_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    index += sizeof(uint64_t);

    /* 4. Build the command frame id. */
    association_request[index++] = ASSOCIATIONREQUEST;
    1d56:	eb e0       	ldi	r30, 0x0B	; 11
    1d58:	e2 0f       	add	r30, r18

    /* 5. Build the capability info. */
    association_request[index++] = mar->CapabilityInformation;
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	e3 5c       	subi	r30, 0xC3	; 195
    1d5e:	fe 4e       	sbci	r31, 0xEE	; 238
    1d60:	80 83       	st	Z, r24

    /* 7. Add dummy bytes in crc field. */
    index += 2;
    
    /* 8. Set necessary parameters and finally send the frame. */
    if ((MAC_SUCCESS != ieee802_15_4_set_pan_id(mar->CoordPANId))) {
    1d62:	12 96       	adiw	r26, 0x02	; 2
    1d64:	8d 91       	ld	r24, X+
    1d66:	9c 91       	ld	r25, X
    1d68:	13 97       	sbiw	r26, 0x03	; 3
    1d6a:	2a 83       	std	Y+2, r18	; 0x02
    1d6c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
    1d70:	81 11       	cpse	r24, r1
    1d72:	18 c0       	rjmp	.+48     	; 0x1da4 <ieee802_15_4_associate_request+0x1d4>
        goto association_request_error;
    } else if (true != tat_set_channel(mar->LogicalChannel)) {
    1d74:	f8 01       	movw	r30, r16
    1d76:	80 81       	ld	r24, Z
    1d78:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <tat_set_channel>
    1d7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d7e:	88 23       	and	r24, r24
    1d80:	89 f0       	breq	.+34     	; 0x1da4 <ieee802_15_4_associate_request+0x1d4>
        goto association_request_error;
    } else if (true != ieee802_15_4_send(index, association_request)) {
    1d82:	6d e3       	ldi	r22, 0x3D	; 61
    1d84:	71 e1       	ldi	r23, 0x11	; 17
    1d86:	8e e0       	ldi	r24, 0x0E	; 14
    1d88:	82 0f       	add	r24, r18
    1d8a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    1d8e:	88 23       	and	r24, r24
    1d90:	49 f0       	breq	.+18     	; 0x1da4 <ieee802_15_4_associate_request+0x1d4>
        goto association_request_error;
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_ASSOCIATION_REQUEST_ACK);
    1d92:	9f b7       	in	r25, 0x3f	; 63
    1d94:	99 83       	std	Y+1, r25	; 0x01
    1d96:	f8 94       	cli
    1d98:	96 e0       	ldi	r25, 0x06	; 6
    1d9a:	90 93 09 01 	sts	0x0109, r25
    1d9e:	99 81       	ldd	r25, Y+1	; 0x01
    1da0:	9f bf       	out	0x3f, r25	; 63
        return true;
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <ieee802_15_4_associate_request+0x1da>
    
    /* Do error handling for the association request: Go to SLEEP. */
    association_request_error:
    
    
    tat_go_to_sleep();
    1da4:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    
    return false;
    1da8:	80 e0       	ldi	r24, 0x00	; 0
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret

00001db8 <issue_associate_confirm>:
 *
 *  \param[in] status Status of the association process.
 *  \param[in] short_addr Short address the node shall operate with. 0xFFFF
 *                        indicates an error during the association process.
 */
void issue_associate_confirm(uint8_t status, uint16_t short_addr) {
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <issue_associate_confirm+0xa>
    1dc2:	1f 92       	push	r1
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	8b 01       	movw	r16, r22
    /* Set internal state. */
    if (MAC_SUCCESS != status) {
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    1dca:	9f b7       	in	r25, 0x3f	; 63
 *  \param[in] short_addr Short address the node shall operate with. 0xFFFF
 *                        indicates an error during the association process.
 */
void issue_associate_confirm(uint8_t status, uint16_t short_addr) {
    /* Set internal state. */
    if (MAC_SUCCESS != status) {
    1dcc:	88 23       	and	r24, r24
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <issue_associate_confirm+0x24>
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	f8 94       	cli
    1dd4:	10 92 09 01 	sts	0x0109, r1
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	06 c0       	rjmp	.+12     	; 0x1de8 <issue_associate_confirm+0x30>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_ASSOCIATED);
    1ddc:	99 83       	std	Y+1, r25	; 0x01
    1dde:	f8 94       	cli
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	90 93 09 01 	sts	0x0109, r25
    1de6:	99 81       	ldd	r25, Y+1	; 0x01
    1de8:	9f bf       	out	0x3f, r25	; 63
    }
    
    /* Now, put the radio transceiver to SLEEP. */
    tat_go_to_sleep();
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    
    /* Build the confirm message and issue the associated callback. */
    confirm_ptr->status = status;
    1df0:	a0 91 b0 02 	lds	r26, 0x02B0
    1df4:	b0 91 b1 02 	lds	r27, 0x02B1
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	8c 93       	st	X, r24
    1dfe:	12 97       	sbiw	r26, 0x02	; 2
    confirm_ptr->AssocShortAddress = short_addr;
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	1c 93       	st	X, r17
    1e04:	0e 93       	st	-X, r16
    
    mlme_associate_confirm(confirm_ptr);
    1e06:	e0 91 ae 02 	lds	r30, 0x02AE
    1e0a:	f0 91 af 02 	lds	r31, 0x02AF
    1e0e:	cd 01       	movw	r24, r26
    1e10:	09 95       	icall
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <ieee802_15_4_associate_process_ack>:
    
    return response_status;
}


void ieee802_15_4_associate_process_ack(void *ack_status) {
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <ieee802_15_4_associate_process_ack+0x6>
    1e28:	1f 92       	push	r1
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    /* Extract the transmission status from the ack_status pointer. */
    uint8_t tx_status = *((uint8_t *)ack_status);
    1e2e:	fc 01       	movw	r30, r24
    1e30:	80 81       	ld	r24, Z
    
    if ((TRAC_SUCCESS == tx_status) || (TRAC_SUCCESS_DATA_PENDING == tx_status)) {
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	40 f5       	brcc	.+80     	; 0x1e86 <ieee802_15_4_associate_process_ack+0x64>
        /* If this ACK is a response to the data request, the transceiver must be set 
         * in RX_AACK_ON mode before the response timer is started.
         */
        if (IEEE_MAC_WAITING_DATA_REQUEST_ACK == IEEE802_15_4_GET_STATE()) {
    1e36:	80 91 09 01 	lds	r24, 0x0109
    1e3a:	88 30       	cpi	r24, 0x08	; 8
    1e3c:	79 f4       	brne	.+30     	; 0x1e5c <ieee802_15_4_associate_process_ack+0x3a>
            
            if(true != tat_set_state(RX_AACK_ON)) {
    1e3e:	86 e1       	ldi	r24, 0x16	; 22
    1e40:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    1e44:	81 11       	cpse	r24, r1
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <ieee802_15_4_associate_process_ack+0x2a>
                tx_status = MAC_CHANNEL_ACCESS_FAILURE;
    1e48:	81 ee       	ldi	r24, 0xE1	; 225
    1e4a:	24 c0       	rjmp	.+72     	; 0x1e94 <ieee802_15_4_associate_process_ack+0x72>
                goto associate_ack_error;
            } else {
                IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_ASSOCIATION_RESPONSE);
    1e4c:	8f b7       	in	r24, 0x3f	; 63
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	f8 94       	cli
    1e52:	89 e0       	ldi	r24, 0x09	; 9
    1e54:	80 93 09 01 	sts	0x0109, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	07 c0       	rjmp	.+14     	; 0x1e6a <ieee802_15_4_associate_process_ack+0x48>
            }
        } else {
            IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_TO_SEND_DATA_REQUEST);
    1e5c:	8f b7       	in	r24, 0x3f	; 63
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	f8 94       	cli
    1e62:	87 e0       	ldi	r24, 0x07	; 7
    1e64:	80 93 09 01 	sts	0x0109, r24
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	8f bf       	out	0x3f, r24	; 63
        }
        
        /* Start response wait symbol timer. */
        uint32_t ticks = IEEE802_15_4_SYMBOL_TO_TICKS(aResponseWaitTime);
        if (true != vrt_timer_start_high_pri_delay(ticks, ieee802_15_4_associate_process_timeout,\
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	48 e5       	ldi	r20, 0x58	; 88
    1e72:	5f e0       	ldi	r21, 0x0F	; 15
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 ef       	ldi	r23, 0xF0	; 240
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <vrt_timer_start_high_pri_delay>
    1e80:	88 23       	and	r24, r24
    1e82:	11 f3       	breq	.-60     	; 0x1e48 <ieee802_15_4_associate_process_ack+0x26>
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <ieee802_15_4_associate_process_ack+0x82>
        } else {
            /* Timer started. Wait for it to expire. */
            return;
        }
    } else {
        if (TRAC_NO_ACK == tx_status) {
    1e86:	85 30       	cpi	r24, 0x05	; 5
    1e88:	21 f0       	breq	.+8      	; 0x1e92 <ieee802_15_4_associate_process_ack+0x70>
            tx_status = MAC_NO_ACK;
        } else if (TRAC_CHANNEL_ACCESS_FAILURE == tx_status) {
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	e9 f2       	breq	.-70     	; 0x1e48 <ieee802_15_4_associate_process_ack+0x26>
            tx_status = MAC_CHANNEL_ACCESS_FAILURE;
        } else {
            tx_status = MAC_NO_DATA;
    1e8e:	8b ee       	ldi	r24, 0xEB	; 235
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <ieee802_15_4_associate_process_ack+0x72>
            /* Timer started. Wait for it to expire. */
            return;
        }
    } else {
        if (TRAC_NO_ACK == tx_status) {
            tx_status = MAC_NO_ACK;
    1e92:	89 ee       	ldi	r24, 0xE9	; 233
     * successful.
     */
    associate_ack_error:
    
    
    vrt_timer_stop_high_pri_delay();
    1e94:	8b 83       	std	Y+3, r24	; 0x03
    1e96:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <vrt_timer_stop_high_pri_delay>
    issue_associate_confirm(tx_status, 0xFFFF);
    1e9a:	6f ef       	ldi	r22, 0xFF	; 255
    1e9c:	7f ef       	ldi	r23, 0xFF	; 255
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <issue_associate_confirm>
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <ieee802_15_4_associate_process_timeout>:


void ieee802_15_4_associate_process_timeout(void *null) {
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <ieee802_15_4_associate_process_timeout+0x6>
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    if (IEEE_MAC_WAITING_TO_SEND_DATA_REQUEST == IEEE802_15_4_GET_STATE()) {
    1eba:	80 91 09 01 	lds	r24, 0x0109
    1ebe:	87 30       	cpi	r24, 0x07	; 7
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <ieee802_15_4_associate_process_timeout+0x14>
    1ec2:	4c c0       	rjmp	.+152    	; 0x1f5c <ieee802_15_4_associate_process_timeout+0xac>
    // of if we are forced to use the long address
    // (e.g. in case the coordinator indicates pending data for us using our long address)  
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;
    
    // Add the Frame Control Field
    data_request[index++] = ((fcf >> 8*0) & 0xFF);
    1ec4:	83 e2       	ldi	r24, 0x23	; 35
    1ec6:	80 93 3d 11 	sts	0x113D, r24
    data_request[index++] = ((fcf >> 8*1) & 0xFF);
    1eca:	80 ec       	ldi	r24, 0xC0	; 192
    1ecc:	80 93 3e 11 	sts	0x113E, r24

    /* 3. Add the sequence number. */
    data_request[index++] = IEEE802_15_4_GET_DSN();
    1ed0:	80 91 bf 11 	lds	r24, 0x11BF
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	98 0f       	add	r25, r24
    1ed8:	90 93 bf 11 	sts	0x11BF, r25
    1edc:	80 93 3f 11 	sts	0x113F, r24

    /* 4. Add the Source PAN ID */
    data_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*0) & 0xFF);
    1ee0:	90 91 c5 11 	lds	r25, 0x11C5
    1ee4:	80 91 c6 11 	lds	r24, 0x11C6
    1ee8:	90 93 40 11 	sts	0x1140, r25
    data_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*1) & 0xFF);
    1eec:	80 93 41 11 	sts	0x1141, r24
    
    /* 5. Add Source Address.*/
    memcpy((void *)(&data_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    1ef0:	80 91 c7 11 	lds	r24, 0x11C7
    1ef4:	80 93 42 11 	sts	0x1142, r24
    1ef8:	80 91 c8 11 	lds	r24, 0x11C8
    1efc:	80 93 43 11 	sts	0x1143, r24
    1f00:	80 91 c9 11 	lds	r24, 0x11C9
    1f04:	80 93 44 11 	sts	0x1144, r24
    1f08:	80 91 ca 11 	lds	r24, 0x11CA
    1f0c:	80 93 45 11 	sts	0x1145, r24
    1f10:	80 91 cb 11 	lds	r24, 0x11CB
    1f14:	80 93 46 11 	sts	0x1146, r24
    1f18:	80 91 cc 11 	lds	r24, 0x11CC
    1f1c:	80 93 47 11 	sts	0x1147, r24
    1f20:	80 91 cd 11 	lds	r24, 0x11CD
    1f24:	80 93 48 11 	sts	0x1148, r24
    1f28:	80 91 ce 11 	lds	r24, 0x11CE
    1f2c:	80 93 49 11 	sts	0x1149, r24
    index += sizeof(uint64_t);

    /* 6. Add command id. */
    data_request[index++] = DATAREQUEST;
    1f30:	84 e0       	ldi	r24, 0x04	; 4
    1f32:	80 93 4a 11 	sts	0x114A, r24
        
    index += CRC_SIZE; // Two bytes are added for CRC. The radio transceiver will calculate it.
    
    if (true != ieee802_15_4_send(index, data_request)) {
    1f36:	6d e3       	ldi	r22, 0x3D	; 61
    1f38:	71 e1       	ldi	r23, 0x11	; 17
    1f3a:	80 e1       	ldi	r24, 0x10	; 16
    1f3c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    1f40:	81 11       	cpse	r24, r1
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <ieee802_15_4_associate_process_timeout+0x9c>
        issue_associate_confirm(MAC_TRANSACTION_OVERFLOW, 0xFFFF);
    1f44:	6f ef       	ldi	r22, 0xFF	; 255
    1f46:	7f ef       	ldi	r23, 0xFF	; 255
    1f48:	81 ef       	ldi	r24, 0xF1	; 241
    1f4a:	0d c0       	rjmp	.+26     	; 0x1f66 <ieee802_15_4_associate_process_timeout+0xb6>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_DATA_REQUEST_ACK);
    1f4c:	8f b7       	in	r24, 0x3f	; 63
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	f8 94       	cli
    1f52:	88 e0       	ldi	r24, 0x08	; 8
    1f54:	80 93 09 01 	sts	0x0109, r24
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	16 c0       	rjmp	.+44     	; 0x1f88 <ieee802_15_4_associate_process_timeout+0xd8>


void ieee802_15_4_associate_process_timeout(void *null) {
    if (IEEE_MAC_WAITING_TO_SEND_DATA_REQUEST == IEEE802_15_4_GET_STATE()) {
        send_data_request();
    } else if (IEEE_MAC_WAITING_ASSOCIATION_RESPONSE == IEEE802_15_4_GET_STATE()) {
    1f5c:	89 30       	cpi	r24, 0x09	; 9
    1f5e:	31 f4       	brne	.+12     	; 0x1f6c <ieee802_15_4_associate_process_timeout+0xbc>
        /* An Association response was not received. */
        issue_associate_confirm(MAC_NO_ACK, 0xFFFF);
    1f60:	6f ef       	ldi	r22, 0xFF	; 255
    1f62:	7f ef       	ldi	r23, 0xFF	; 255
    1f64:	89 ee       	ldi	r24, 0xE9	; 233
    1f66:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <issue_associate_confirm>
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <ieee802_15_4_associate_process_timeout+0xda>
    } else if (IEEE_MAC_WAITING_FOR_DATA_REQUEST == IEEE802_15_4_GET_STATE()) {
    1f6c:	8c 30       	cpi	r24, 0x0C	; 12
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <ieee802_15_4_associate_process_timeout+0xc8>
        /* Send MLME_COMM_STATUS.indication. */
        send_comm_status_indication(MAC_TRANSACTION_EXPIRED);
    1f70:	80 ef       	ldi	r24, 0xF0	; 240
    1f72:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <send_comm_status_indication>
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <ieee802_15_4_associate_process_timeout+0xda>
    } else {
        /* Error: Turn off the radio transceiver and set the IEEE 802.15.4 MAC's
         * state back to Idle.
         */
        tat_go_to_sleep();
    1f78:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    1f7c:	8f b7       	in	r24, 0x3f	; 63
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	f8 94       	cli
    1f82:	10 92 09 01 	sts	0x0109, r1
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	8f bf       	out	0x3f, r24	; 63
    }
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <ieee802_15_4_associate_response>:
    
    return false;
}


bool ieee802_15_4_associate_response(mlme_associate_resp_t* mar) {
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	1f 92       	push	r1
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the IEEE 802.15.4 MAC state is correct. */
    if (IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) { return false; }
    1fa6:	20 91 09 01 	lds	r18, 0x0109
    1faa:	25 30       	cpi	r18, 0x05	; 5
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <ieee802_15_4_associate_response+0x1c>
    1fae:	a7 c0       	rjmp	.+334    	; 0x20fe <ieee802_15_4_associate_response+0x16a>
    
    /* Perform sanity check on the function parameters. */
    if (NULL == mar) { return false; }
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <ieee802_15_4_associate_response+0x22>
    1fb4:	a4 c0       	rjmp	.+328    	; 0x20fe <ieee802_15_4_associate_response+0x16a>
    uint16_t fcf;
    
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR) |
          FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR)  | FCF_ACK_REQUEST | FCF_INTRA_PAN;
    
    association_response[index++] = ((fcf >> 8*0) & 0xFF);
    1fb6:	23 e6       	ldi	r18, 0x63	; 99
    1fb8:	20 93 93 02 	sts	0x0293, r18
    association_response[index++] = ((fcf >> 8*1) & 0xFF);
    1fbc:	2c ec       	ldi	r18, 0xCC	; 204
    1fbe:	20 93 94 02 	sts	0x0294, r18
    
    /* 3. Add sequence number. */
    association_response[index++] = IEEE802_15_4_GET_DSN();
    1fc2:	20 91 bf 11 	lds	r18, 0x11BF
    1fc6:	31 e0       	ldi	r19, 0x01	; 1
    1fc8:	32 0f       	add	r19, r18
    1fca:	30 93 bf 11 	sts	0x11BF, r19
    1fce:	20 93 95 02 	sts	0x0295, r18
    
    /* 4. Add Address Fields. */
    memcpy((void *)(&association_response[index]), (void *)(&(IEEE802_15_4_GET_PAN_ID())), sizeof(uint16_t));
    1fd2:	20 91 c5 11 	lds	r18, 0x11C5
    1fd6:	30 91 c6 11 	lds	r19, 0x11C6
    1fda:	30 93 97 02 	sts	0x0297, r19
    1fde:	20 93 96 02 	sts	0x0296, r18
    index += sizeof(uint16_t);
    
    memcpy((void *)(&association_response[index]), (void *)(&(mar->DeviceAddress)), sizeof(uint64_t));
    1fe2:	48 e0       	ldi	r20, 0x08	; 8
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	a8 e9       	ldi	r26, 0x98	; 152
    1fe8:	b2 e0       	ldi	r27, 0x02	; 2
    1fea:	01 90       	ld	r0, Z+
    1fec:	0d 92       	st	X+, r0
    1fee:	4a 95       	dec	r20
    1ff0:	e1 f7       	brne	.-8      	; 0x1fea <ieee802_15_4_associate_response+0x56>
    index += sizeof(uint64_t);
    
    memcpy((void *)(&association_response[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    1ff2:	00 91 c7 11 	lds	r16, 0x11C7
    1ff6:	10 91 c8 11 	lds	r17, 0x11C8
    1ffa:	b0 91 c9 11 	lds	r27, 0x11C9
    1ffe:	a0 91 ca 11 	lds	r26, 0x11CA
    2002:	f0 90 cb 11 	lds	r15, 0x11CB
    2006:	e0 90 cc 11 	lds	r14, 0x11CC
    200a:	70 91 cd 11 	lds	r23, 0x11CD
    200e:	60 91 ce 11 	lds	r22, 0x11CE
    2012:	00 93 a0 02 	sts	0x02A0, r16
    2016:	10 93 a1 02 	sts	0x02A1, r17
    201a:	b0 93 a2 02 	sts	0x02A2, r27
    201e:	a0 93 a3 02 	sts	0x02A3, r26
    2022:	f0 92 a4 02 	sts	0x02A4, r15
    2026:	e0 92 a5 02 	sts	0x02A5, r14
    202a:	70 93 a6 02 	sts	0x02A6, r23
    202e:	60 93 a7 02 	sts	0x02A7, r22
    index += sizeof(uint64_t);

    /* 5. Add the command frame id. */
    association_response[index++] = ASSOCIATIONRESPONSE;
    2032:	42 e0       	ldi	r20, 0x02	; 2
    2034:	40 93 a8 02 	sts	0x02A8, r20

    /* 6. Add short address assigned to the associating device. */
    memcpy((void *)(&association_response[index]), (void *)(&(mar->AssocShortAddress)), sizeof(uint16_t));
    2038:	fc 01       	movw	r30, r24
    203a:	40 85       	ldd	r20, Z+8	; 0x08
    203c:	51 85       	ldd	r21, Z+9	; 0x09
    203e:	50 93 aa 02 	sts	0x02AA, r21
    2042:	40 93 a9 02 	sts	0x02A9, r20
    index += sizeof(uint16_t);

    /* 7. Set the association status. */
    association_response[index++] = mar->status;
    2046:	42 85       	ldd	r20, Z+10	; 0x0a
    2048:	40 93 ab 02 	sts	0x02AB, r20

    // Add dummy bytes in crc field.
    index += 2;
   
    /* Prebuild MLME_COMM_STATUS.indication. */
    mcsi.PANId = IEEE802_15_4_GET_PAN_ID();
    204c:	30 93 7f 02 	sts	0x027F, r19
    2050:	20 93 7e 02 	sts	0x027E, r18
    mcsi.SrcAddrMode = FCF_LONG_ADDR;
    2054:	23 e0       	ldi	r18, 0x03	; 3
    2056:	20 93 80 02 	sts	0x0280, r18
    memcpy((void *)(&mcsi.SrcAddr), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())),\
    205a:	00 93 81 02 	sts	0x0281, r16
    205e:	10 93 82 02 	sts	0x0282, r17
    2062:	b0 93 83 02 	sts	0x0283, r27
    2066:	a0 93 84 02 	sts	0x0284, r26
    206a:	f0 92 85 02 	sts	0x0285, r15
    206e:	e0 92 86 02 	sts	0x0286, r14
    2072:	70 93 87 02 	sts	0x0287, r23
    2076:	60 93 88 02 	sts	0x0288, r22
           sizeof(uint64_t));    
    mcsi.DstAddrMode = FCF_LONG_ADDR;
    207a:	20 93 89 02 	sts	0x0289, r18
    memcpy((void *)(&mcsi.DstAddr), (void *)(&(mar->DeviceAddress)), sizeof(uint64_t));
    207e:	e0 81       	ld	r30, Z
    2080:	dc 01       	movw	r26, r24
    2082:	11 96       	adiw	r26, 0x01	; 1
    2084:	7c 91       	ld	r23, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	12 96       	adiw	r26, 0x02	; 2
    208a:	6c 91       	ld	r22, X
    208c:	12 97       	sbiw	r26, 0x02	; 2
    208e:	13 96       	adiw	r26, 0x03	; 3
    2090:	5c 91       	ld	r21, X
    2092:	13 97       	sbiw	r26, 0x03	; 3
    2094:	14 96       	adiw	r26, 0x04	; 4
    2096:	4c 91       	ld	r20, X
    2098:	14 97       	sbiw	r26, 0x04	; 4
    209a:	15 96       	adiw	r26, 0x05	; 5
    209c:	3c 91       	ld	r19, X
    209e:	15 97       	sbiw	r26, 0x05	; 5
    20a0:	16 96       	adiw	r26, 0x06	; 6
    20a2:	2c 91       	ld	r18, X
    20a4:	16 97       	sbiw	r26, 0x06	; 6
    20a6:	17 96       	adiw	r26, 0x07	; 7
    20a8:	8c 91       	ld	r24, X
    20aa:	e0 93 8a 02 	sts	0x028A, r30
    20ae:	70 93 8b 02 	sts	0x028B, r23
    20b2:	60 93 8c 02 	sts	0x028C, r22
    20b6:	50 93 8d 02 	sts	0x028D, r21
    20ba:	40 93 8e 02 	sts	0x028E, r20
    20be:	30 93 8f 02 	sts	0x028F, r19
    20c2:	20 93 90 02 	sts	0x0290, r18
    20c6:	80 93 91 02 	sts	0x0291, r24
    
    bool response_status = false;
    /* 8. Set a timeout for the Data Request command to arrive. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_FOR_DATA_REQUEST);
    20ca:	8f b7       	in	r24, 0x3f	; 63
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	f8 94       	cli
    20d0:	8c e0       	ldi	r24, 0x0C	; 12
    20d2:	80 93 09 01 	sts	0x0109, r24
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	8f bf       	out	0x3f, r24	; 63
    uint32_t ticks = IEEE802_15_4_SYMBOL_TO_TICKS(2 * aResponseWaitTime);
        
    if (true != vrt_timer_start_high_pri_delay(ticks, ieee802_15_4_associate_process_timeout,\
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	48 e5       	ldi	r20, 0x58	; 88
    20e0:	5f e0       	ldi	r21, 0x0F	; 15
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	70 ee       	ldi	r23, 0xE0	; 224
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <vrt_timer_start_high_pri_delay>
    20ee:	18 2f       	mov	r17, r24
    20f0:	81 11       	cpse	r24, r1
    20f2:	06 c0       	rjmp	.+12     	; 0x2100 <__stack+0x1>
                                               (void*)NULL)) {
                                                   
        ieee802_15_4_associate_process_timeout(NULL);                                         
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <ieee802_15_4_associate_process_timeout>
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <__stack+0x1>
}


bool ieee802_15_4_associate_response(mlme_associate_resp_t* mar) {
    /* Verify that the IEEE 802.15.4 MAC state is correct. */
    if (IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) { return false; }
    20fe:	10 e0       	ldi	r17, 0x00	; 0
        
        response_status = true;
    }
    
    return response_status;
}
    2100:	81 2f       	mov	r24, r17
    2102:	0f 90       	pop	r0
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	08 95       	ret

00002112 <ieee802_15_4_send_association_response>:
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_DATA_REQUEST_ACK);
    }
}


void ieee802_15_4_send_association_response(void) {
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	1f 92       	push	r1
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    /* The radio transceiver will be in RX_ACK_ON or BUSY_RX_AACK_ON when entering 
     * this function. Change state to TX_ARET_ON for frame transmission.
     */
    uint8_t time_out = 0xFF;
    211e:	1f ef       	ldi	r17, 0xFF	; 255
    2120:	85 e3       	ldi	r24, 0x35	; 53
    2122:	8a 95       	dec	r24
    2124:	f1 f7       	brne	.-4      	; 0x2122 <ieee802_15_4_send_association_response+0x10>
    2126:	00 00       	nop
    do {
        delay_us(20);
        time_out--;
    2128:	11 50       	subi	r17, 0x01	; 1
    } while ((CMD_PLL_ON != tat_get_state()) && (0 != time_out));
    212a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <tat_get_state>
    212e:	89 30       	cpi	r24, 0x09	; 9
    2130:	19 f0       	breq	.+6      	; 0x2138 <ieee802_15_4_send_association_response+0x26>
    2132:	11 11       	cpse	r17, r1
    2134:	f5 cf       	rjmp	.-22     	; 0x2120 <ieee802_15_4_send_association_response+0xe>
    2136:	02 c0       	rjmp	.+4      	; 0x213c <ieee802_15_4_send_association_response+0x2a>
    
    /* Check if the wait loop above timed out, or if the RX_AACK_ON state was entered. */
    if (0 == time_out) {
    2138:	11 11       	cpse	r17, r1
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <ieee802_15_4_send_association_response+0x32>
        send_comm_status_indication(MAC_CHANNEL_ACCESS_FAILURE);
    213c:	81 ee       	ldi	r24, 0xE1	; 225
    213e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <send_comm_status_indication>
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <ieee802_15_4_send_association_response+0x50>
    } else if (true != ieee802_15_4_send(ASSOCIATION_RESPONSE_CMD_SIZE, association_response)) {
    2144:	63 e9       	ldi	r22, 0x93	; 147
    2146:	72 e0       	ldi	r23, 0x02	; 2
    2148:	8b e1       	ldi	r24, 0x1B	; 27
    214a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    214e:	88 23       	and	r24, r24
    2150:	a9 f3       	breq	.-22     	; 0x213c <ieee802_15_4_send_association_response+0x2a>
        send_comm_status_indication(MAC_CHANNEL_ACCESS_FAILURE);
    } else {
        /* Set new IEEE 802.15.4 MAC state. */
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_ASSOCIATE_RESPONSE_ACK);
    2152:	8f b7       	in	r24, 0x3f	; 63
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	f8 94       	cli
    2158:	8b e0       	ldi	r24, 0x0B	; 11
    215a:	80 93 09 01 	sts	0x0109, r24
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8f bf       	out	0x3f, r24	; 63
        /* Transmission of the associated Association Response was successful. Wait for the ACK to arrive. */
    }
}
    2162:	0f 90       	pop	r0
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	08 95       	ret

0000216c <ieee802_15_4_associate_response_process_ack>:

void ieee802_15_4_associate_response_process_ack(void *tx_status) {
    /* Set status of the MLME_COMM_STATUS.indication, and then execute the 
     * callback.
     */
    uint8_t mcsi_status = *((uint8_t *)tx_status);
    216c:	fc 01       	movw	r30, r24
    216e:	80 81       	ld	r24, Z
    
    if (TRAC_SUCCESS == mcsi_status) {
    2170:	88 23       	and	r24, r24
    2172:	49 f0       	breq	.+18     	; 0x2186 <ieee802_15_4_associate_response_process_ack+0x1a>
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
    2174:	85 30       	cpi	r24, 0x05	; 5
    2176:	21 f0       	breq	.+8      	; 0x2180 <ieee802_15_4_associate_response_process_ack+0x14>
        mcsi_status = MAC_NO_ACK;
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	21 f4       	brne	.+8      	; 0x2184 <ieee802_15_4_associate_response_process_ack+0x18>
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    217c:	81 ee       	ldi	r24, 0xE1	; 225
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <ieee802_15_4_associate_response_process_ack+0x1a>
    uint8_t mcsi_status = *((uint8_t *)tx_status);
    
    if (TRAC_SUCCESS == mcsi_status) {
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
        mcsi_status = MAC_NO_ACK;
    2180:	89 ee       	ldi	r24, 0xE9	; 233
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <ieee802_15_4_associate_response_process_ack+0x1a>
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    } else {
        mcsi_status = MAC_NO_DATA;
    2184:	8b ee       	ldi	r24, 0xEB	; 235
    }
    
    send_comm_status_indication(mcsi_status);  
    2186:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <send_comm_status_indication>

0000218a <ieee802_15_4_beacon_notify_do_callback>:
    (bool)tat_set_state(RX_AACK_ON);
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
}


void ieee802_15_4_beacon_notify_do_callback(void *mbni) {
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	ec 01       	movw	r28, r24
    ieee802_15_4_beacon_notify_indication_t mbni_callback = ieee802_15_4_get_mlme_beacon_notify_indication();
    2190:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <ieee802_15_4_get_mlme_beacon_notify_indication>
    2194:	fc 01       	movw	r30, r24
    if (NULL == mbni_callback) {
        MEM_FREE(mbni);
    2196:	ce 01       	movw	r24, r28
}


void ieee802_15_4_beacon_notify_do_callback(void *mbni) {
    ieee802_15_4_beacon_notify_indication_t mbni_callback = ieee802_15_4_get_mlme_beacon_notify_indication();
    if (NULL == mbni_callback) {
    2198:	30 97       	sbiw	r30, 0x00	; 0
    219a:	11 f0       	breq	.+4      	; 0x21a0 <ieee802_15_4_beacon_notify_do_callback+0x16>
        MEM_FREE(mbni);
        return;
    }
    
    /* Execute the callback and free up allocated memory. */
    mbni_callback((mlme_beacon_notify_ind_t *)mbni);
    219c:	09 95       	icall
    MEM_FREE(mbni);
    219e:	ce 01       	movw	r24, r28
}
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
        return;
    }
    
    /* Execute the callback and free up allocated memory. */
    mbni_callback((mlme_beacon_notify_ind_t *)mbni);
    MEM_FREE(mbni);
    21a4:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>

000021a8 <ieee802_15_4_mlme_beacon_indication>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

void ieee802_15_4_mlme_beacon_indication(void *beacon_frame_info) {
    21a8:	2f 92       	push	r2
    21aa:	3f 92       	push	r3
    21ac:	4f 92       	push	r4
    21ae:	5f 92       	push	r5
    21b0:	6f 92       	push	r6
    21b2:	7f 92       	push	r7
    21b4:	8f 92       	push	r8
    21b6:	9f 92       	push	r9
    21b8:	af 92       	push	r10
    21ba:	bf 92       	push	r11
    21bc:	cf 92       	push	r12
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	29 97       	sbiw	r28, 0x09	; 9
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	99 87       	std	Y+9, r25	; 0x09
    21de:	88 87       	std	Y+8, r24	; 0x08
     * active or passive scan. It is here safe to use the IEEE 802.15.4 MAC's
     * internal command buffer to build the PAN Descriptor.
     */
    ieee802_15_4_pan_descriptor_t *pan_desc = (ieee802_15_4_pan_descriptor_t *)IEEE802_15_4_GET_TX_BUFFER();
    
    pan_desc->CoordAddrMode = frame_info->src_addr_mode;
    21e0:	fc 01       	movw	r30, r24
    21e2:	75 84       	ldd	r7, Z+13	; 0x0d
    21e4:	70 92 3d 11 	sts	0x113D, r7
    pan_desc->CoordPANId = frame_info->src_pan_id;
    21e8:	46 84       	ldd	r4, Z+14	; 0x0e
    21ea:	57 84       	ldd	r5, Z+15	; 0x0f
    21ec:	50 92 3f 11 	sts	0x113F, r5
    21f0:	40 92 3e 11 	sts	0x113E, r4
    pan_desc->CoordAddress = 0;
    21f4:	10 92 40 11 	sts	0x1140, r1
    21f8:	10 92 41 11 	sts	0x1141, r1
    21fc:	10 92 42 11 	sts	0x1142, r1
    2200:	10 92 43 11 	sts	0x1143, r1
    2204:	10 92 44 11 	sts	0x1144, r1
    2208:	10 92 45 11 	sts	0x1145, r1
    220c:	10 92 46 11 	sts	0x1146, r1
    2210:	10 92 47 11 	sts	0x1147, r1
    
    memcpy((void *)(&(pan_desc->CoordAddress)), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    2214:	70 96       	adiw	r30, 0x10	; 16
    2216:	88 e0       	ldi	r24, 0x08	; 8
    2218:	a0 e4       	ldi	r26, 0x40	; 64
    221a:	b1 e1       	ldi	r27, 0x11	; 17
    221c:	01 90       	ld	r0, Z+
    221e:	0d 92       	st	X+, r0
    2220:	8a 95       	dec	r24
    2222:	e1 f7       	brne	.-8      	; 0x221c <ieee802_15_4_mlme_beacon_indication+0x74>
    
    pan_desc->LogicalChannel = IEEE802_15_4_GET_CHANNEL();
    2224:	f0 91 c2 11 	lds	r31, 0x11C2
    2228:	ff 83       	std	Y+7, r31	; 0x07
    222a:	f0 93 48 11 	sts	0x1148, r31
    
    uint8_t *beacon_payload = frame_info->msdu;
    222e:	e8 85       	ldd	r30, Y+8	; 0x08
    2230:	f9 85       	ldd	r31, Y+9	; 0x09
    2232:	a1 8d       	ldd	r26, Z+25	; 0x19
    2234:	b2 8d       	ldd	r27, Z+26	; 0x1a
    
    pan_desc->SuperframeSpec = 0;
    2236:	10 92 4a 11 	sts	0x114A, r1
    223a:	10 92 49 11 	sts	0x1149, r1
    pan_desc->SuperframeSpec = beacon_payload[1] << 8;
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	8c 91       	ld	r24, X
    2242:	11 97       	sbiw	r26, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	98 2f       	mov	r25, r24
    2248:	88 27       	eor	r24, r24
    224a:	90 93 4a 11 	sts	0x114A, r25
    224e:	80 93 49 11 	sts	0x1149, r24
    pan_desc->SuperframeSpec |= beacon_payload[0];
    2252:	2c 91       	ld	r18, X
    2254:	82 2b       	or	r24, r18
    2256:	90 93 4a 11 	sts	0x114A, r25
    225a:	80 93 49 11 	sts	0x1149, r24
    
    pan_desc->LinkQuality = frame_info->lqi;
    225e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2260:	80 93 4b 11 	sts	0x114B, r24
    
    /* Do scan stuff herein. */
    if (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE()) {
    2264:	80 91 09 01 	lds	r24, 0x0109
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	09 f0       	breq	.+2      	; 0x226e <ieee802_15_4_mlme_beacon_indication+0xc6>
    226c:	64 c0       	rjmp	.+200    	; 0x2336 <ieee802_15_4_mlme_beacon_indication+0x18e>
        /* First set a start pointer to the first element in the MLME_SCAN.confirm's
         * resultList.
         */
        mlme_scan_conf_t *msc = mac_param.scan.msc;
    226e:	80 90 1d 11 	lds	r8, 0x111D
    2272:	90 90 1e 11 	lds	r9, 0x111E
        
        ieee802_15_4_pan_descriptor_t *pan_desc_ptr = \
    2276:	d4 01       	movw	r26, r8
    2278:	13 96       	adiw	r26, 0x03	; 3
         * A PAN is considered the same as an existing one if all, the PAN Id, the
         * coordinator address mode, the coordinator address, and the Logical Channel
         * compare equal.
         */
        bool known_pan = false;
        for(uint8_t i = 0; i < (msc->ResultListSize); i++, pan_desc_ptr++) {
    227a:	f4 01       	movw	r30, r8
    227c:	f2 81       	ldd	r31, Z+2	; 0x02
    227e:	f9 83       	std	Y+1, r31	; 0x01
            if ((pan_desc->CoordPANId == pan_desc_ptr->CoordPANId)
                && ((pan_desc->CoordAddrMode) == (pan_desc_ptr->CoordAddrMode))
                && ((pan_desc->CoordAddress) == (pan_desc_ptr->CoordAddress))
    2280:	e0 91 40 11 	lds	r30, 0x1140
    2284:	f0 91 41 11 	lds	r31, 0x1141
    2288:	fb 83       	std	Y+3, r31	; 0x03
    228a:	f0 91 42 11 	lds	r31, 0x1142
    228e:	fc 83       	std	Y+4, r31	; 0x04
    2290:	60 90 43 11 	lds	r6, 0x1143
    2294:	f0 91 44 11 	lds	r31, 0x1144
    2298:	fd 83       	std	Y+5, r31	; 0x05
    229a:	f0 91 45 11 	lds	r31, 0x1145
    229e:	fe 83       	std	Y+6, r31	; 0x06
    22a0:	30 90 46 11 	lds	r3, 0x1146
    22a4:	20 90 47 11 	lds	r2, 0x1147
         * A PAN is considered the same as an existing one if all, the PAN Id, the
         * coordinator address mode, the coordinator address, and the Logical Channel
         * compare equal.
         */
        bool known_pan = false;
        for(uint8_t i = 0; i < (msc->ResultListSize); i++, pan_desc_ptr++) {
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	f8 17       	cp	r31, r24
    22ae:	b1 f1       	breq	.+108    	; 0x231c <ieee802_15_4_mlme_beacon_indication+0x174>
            if ((pan_desc->CoordPANId == pan_desc_ptr->CoordPANId)
    22b0:	11 96       	adiw	r26, 0x01	; 1
    22b2:	8d 91       	ld	r24, X+
    22b4:	9c 91       	ld	r25, X
    22b6:	12 97       	sbiw	r26, 0x02	; 2
    22b8:	48 16       	cp	r4, r24
    22ba:	59 06       	cpc	r5, r25
    22bc:	61 f5       	brne	.+88     	; 0x2316 <ieee802_15_4_mlme_beacon_indication+0x16e>
                && ((pan_desc->CoordAddrMode) == (pan_desc_ptr->CoordAddrMode))
    22be:	8c 91       	ld	r24, X
    22c0:	78 12       	cpse	r7, r24
    22c2:	29 c0       	rjmp	.+82     	; 0x2316 <ieee802_15_4_mlme_beacon_indication+0x16e>
                && ((pan_desc->CoordAddress) == (pan_desc_ptr->CoordAddress))
    22c4:	13 96       	adiw	r26, 0x03	; 3
    22c6:	ac 90       	ld	r10, X
    22c8:	13 97       	sbiw	r26, 0x03	; 3
    22ca:	14 96       	adiw	r26, 0x04	; 4
    22cc:	bc 90       	ld	r11, X
    22ce:	14 97       	sbiw	r26, 0x04	; 4
    22d0:	15 96       	adiw	r26, 0x05	; 5
    22d2:	cc 90       	ld	r12, X
    22d4:	15 97       	sbiw	r26, 0x05	; 5
    22d6:	16 96       	adiw	r26, 0x06	; 6
    22d8:	dc 90       	ld	r13, X
    22da:	16 97       	sbiw	r26, 0x06	; 6
    22dc:	17 96       	adiw	r26, 0x07	; 7
    22de:	ec 90       	ld	r14, X
    22e0:	17 97       	sbiw	r26, 0x07	; 7
    22e2:	18 96       	adiw	r26, 0x08	; 8
    22e4:	fc 90       	ld	r15, X
    22e6:	18 97       	sbiw	r26, 0x08	; 8
    22e8:	19 96       	adiw	r26, 0x09	; 9
    22ea:	0c 91       	ld	r16, X
    22ec:	19 97       	sbiw	r26, 0x09	; 9
    22ee:	1a 96       	adiw	r26, 0x0a	; 10
    22f0:	1c 91       	ld	r17, X
    22f2:	1a 97       	sbiw	r26, 0x0a	; 10
    22f4:	2e 2f       	mov	r18, r30
    22f6:	3b 81       	ldd	r19, Y+3	; 0x03
    22f8:	4c 81       	ldd	r20, Y+4	; 0x04
    22fa:	56 2d       	mov	r21, r6
    22fc:	6d 81       	ldd	r22, Y+5	; 0x05
    22fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2300:	83 2d       	mov	r24, r3
    2302:	92 2d       	mov	r25, r2
    2304:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__cmpdi2>
    2308:	31 f4       	brne	.+12     	; 0x2316 <ieee802_15_4_mlme_beacon_indication+0x16e>
                && ((pan_desc->LogicalChannel) == (pan_desc_ptr->LogicalChannel))) {
    230a:	1b 96       	adiw	r26, 0x0b	; 11
    230c:	8c 91       	ld	r24, X
    230e:	1b 97       	sbiw	r26, 0x0b	; 11
    2310:	9f 81       	ldd	r25, Y+7	; 0x07
    2312:	98 17       	cp	r25, r24
    2314:	81 f0       	breq	.+32     	; 0x2336 <ieee802_15_4_mlme_beacon_indication+0x18e>
         * A PAN is considered the same as an existing one if all, the PAN Id, the
         * coordinator address mode, the coordinator address, and the Logical Channel
         * compare equal.
         */
        bool known_pan = false;
        for(uint8_t i = 0; i < (msc->ResultListSize); i++, pan_desc_ptr++) {
    2316:	ff 5f       	subi	r31, 0xFF	; 255
    2318:	1f 96       	adiw	r26, 0x0f	; 15
    231a:	c7 cf       	rjmp	.-114    	; 0x22aa <ieee802_15_4_mlme_beacon_indication+0x102>
                break;
            }
        }
        
        /* Check if a new PAN was found and if there is room to store it. */
        if((true != known_pan) && ((msc->ResultListSize) < IEEE802_15_4_MAX_NMBR_OF_PANDESC)) {
    231c:	f4 30       	cpi	r31, 0x04	; 4
    231e:	58 f4       	brcc	.+22     	; 0x2336 <ieee802_15_4_mlme_beacon_indication+0x18e>
            memcpy((void *)pan_desc_ptr, (void *)pan_desc, sizeof(ieee802_15_4_pan_descriptor_t));
    2320:	8f e0       	ldi	r24, 0x0F	; 15
    2322:	ed e3       	ldi	r30, 0x3D	; 61
    2324:	f1 e1       	ldi	r31, 0x11	; 17
    2326:	01 90       	ld	r0, Z+
    2328:	0d 92       	st	X+, r0
    232a:	8a 95       	dec	r24
    232c:	e1 f7       	brne	.-8      	; 0x2326 <ieee802_15_4_mlme_beacon_indication+0x17e>
            (msc->ResultListSize)++;
    232e:	f4 01       	movw	r30, r8
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	82 83       	std	Z+2, r24	; 0x02
    
    /* In all cases (pan or device) if the payload is not equal to zero
     * or macAutoRequest is false, then we have to generate a 
     * MLME_BEACON_NOTIFY.indication.
     */
    if((frame_info->msdu_length > 0)/* || (mac_pib_macAutoRequest == false)*/) {
    2336:	e8 85       	ldd	r30, Y+8	; 0x08
    2338:	f9 85       	ldd	r31, Y+9	; 0x09
    233a:	83 8d       	ldd	r24, Z+27	; 0x1b
    233c:	88 23       	and	r24, r24
    233e:	e9 f0       	breq	.+58     	; 0x237a <ieee802_15_4_mlme_beacon_indication+0x1d2>
        /* Try to allocate some memory to build the MLME_BEACON_NOTIFICATION.indication on. */
        mlme_beacon_notify_ind_t *mbni = (mlme_beacon_notify_ind_t *)MEM_ALLOC(mlme_beacon_notify_ind_t);
    2340:	80 e1       	ldi	r24, 0x10	; 16
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    2348:	4c 01       	movw	r8, r24
        
        /* Verify that the memory was allocated before continuing execution. */
        if (NULL == mbni) {
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	b1 f0       	breq	.+44     	; 0x237a <ieee802_15_4_mlme_beacon_indication+0x1d2>
        } else {
            /* Build MLME_BEACON_NOTIFIY.indication message and post the
             * associated event.
             */
            mbni->BSN = frame_info->seq_nmbr;
    234e:	e8 85       	ldd	r30, Y+8	; 0x08
    2350:	f9 85       	ldd	r31, Y+9	; 0x09
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	d4 01       	movw	r26, r8
    2356:	8d 93       	st	X+, r24
            memcpy((void *)(&(mbni->PANDescriptor)), (void *)pan_desc, sizeof(ieee802_15_4_pan_descriptor_t));
    2358:	8f e0       	ldi	r24, 0x0F	; 15
    235a:	ed e3       	ldi	r30, 0x3D	; 61
    235c:	f1 e1       	ldi	r31, 0x11	; 17
    235e:	01 90       	ld	r0, Z+
    2360:	0d 92       	st	X+, r0
    2362:	8a 95       	dec	r24
    2364:	e1 f7       	brne	.-8      	; 0x235e <ieee802_15_4_mlme_beacon_indication+0x1b6>
            
            if (true != vrt_post_event(ieee802_15_4_beacon_notify_do_callback, (void *)mbni)) {
    2366:	b4 01       	movw	r22, r8
    2368:	85 ec       	ldi	r24, 0xC5	; 197
    236a:	90 e1       	ldi	r25, 0x10	; 16
    236c:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
    2370:	81 11       	cpse	r24, r1
    2372:	03 c0       	rjmp	.+6      	; 0x237a <ieee802_15_4_mlme_beacon_indication+0x1d2>
                MEM_FREE(mbni);
    2374:	c4 01       	movw	r24, r8
    2376:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
            }
        }
    }
    
    if (true == IEEE802_15_4_GET_RX_ON_WHEN_IDLE() ||
    237a:	80 91 bd 11 	lds	r24, 0x11BD
    237e:	81 11       	cpse	r24, r1
    2380:	04 c0       	rjmp	.+8      	; 0x238a <ieee802_15_4_mlme_beacon_indication+0x1e2>
    2382:	80 91 09 01 	lds	r24, 0x0109
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	d9 f4       	brne	.+54     	; 0x23c0 <ieee802_15_4_mlme_beacon_indication+0x218>
        (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE())) {
        (bool)tat_set_state(RX_AACK_ON);
    238a:	86 e1       	ldi	r24, 0x16	; 22
    }
}
    238c:	29 96       	adiw	r28, 0x09	; 9
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	bf 90       	pop	r11
    23aa:	af 90       	pop	r10
    23ac:	9f 90       	pop	r9
    23ae:	8f 90       	pop	r8
    23b0:	7f 90       	pop	r7
    23b2:	6f 90       	pop	r6
    23b4:	5f 90       	pop	r5
    23b6:	4f 90       	pop	r4
    23b8:	3f 90       	pop	r3
    23ba:	2f 90       	pop	r2
        }
    }
    
    if (true == IEEE802_15_4_GET_RX_ON_WHEN_IDLE() ||
        (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE())) {
        (bool)tat_set_state(RX_AACK_ON);
    23bc:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <tat_set_state>
    }
}
    23c0:	29 96       	adiw	r28, 0x09	; 9
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	bf 90       	pop	r11
    23de:	af 90       	pop	r10
    23e0:	9f 90       	pop	r9
    23e2:	8f 90       	pop	r8
    23e4:	7f 90       	pop	r7
    23e6:	6f 90       	pop	r6
    23e8:	5f 90       	pop	r5
    23ea:	4f 90       	pop	r4
    23ec:	3f 90       	pop	r3
    23ee:	2f 90       	pop	r2
    23f0:	08 95       	ret

000023f2 <ieee802_15_4_send_beacon>:


void ieee802_15_4_send_beacon(void) {
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	1f 92       	push	r1
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    /* Devices are only allowed to send beacons if their short adddres is different
     * from the broadcast address (0xFFFF).*/
    if (BROADCAST == (IEEE802_15_4_GET_SHORT_ADDRESS())) { return; }
    23fc:	80 91 d7 11 	lds	r24, 0x11D7
    2400:	90 91 d8 11 	lds	r25, 0x11D8
    2404:	8f 3f       	cpi	r24, 0xFF	; 255
    2406:	2f ef       	ldi	r18, 0xFF	; 255
    2408:	92 07       	cpc	r25, r18
    240a:	09 f4       	brne	.+2      	; 0x240e <ieee802_15_4_send_beacon+0x1c>
    240c:	3d c0       	rjmp	.+122    	; 0x2488 <ieee802_15_4_send_beacon+0x96>
    
    fcf = FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR) |
          FCF_SET_FRAMETYPE(FCF_FRAMETYPE_BEACON);

    // Add FCF fields.
    beacon[index++] = ((fcf >> 8*0) & 0xFF);
    240e:	10 92 3d 11 	sts	0x113D, r1
    beacon[index++] = ((fcf >> 8*1) & 0xFF);
    2412:	20 e8       	ldi	r18, 0x80	; 128
    2414:	20 93 3e 11 	sts	0x113E, r18

    /* 2. Add farme sequence number. */
    beacon[index++] = IEEE802_15_4_GET_DSN();
    2418:	20 91 bf 11 	lds	r18, 0x11BF
    241c:	31 e0       	ldi	r19, 0x01	; 1
    241e:	32 0f       	add	r19, r18
    2420:	30 93 bf 11 	sts	0x11BF, r19
    2424:	20 93 3f 11 	sts	0x113F, r18
    
    /* 3. Add addressing fields. */
    beacon[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*0) & 0xFF);
    2428:	30 91 c5 11 	lds	r19, 0x11C5
    242c:	20 91 c6 11 	lds	r18, 0x11C6
    2430:	30 93 40 11 	sts	0x1140, r19
    beacon[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*1) & 0xFF);
    2434:	20 93 41 11 	sts	0x1141, r18
    
    beacon[index++] = ((IEEE802_15_4_GET_SHORT_ADDRESS() >> 8*0) & 0xFF);
    2438:	80 93 42 11 	sts	0x1142, r24
    beacon[index++] = ((IEEE802_15_4_GET_SHORT_ADDRESS() >> 8*1) & 0xFF);
    243c:	90 93 43 11 	sts	0x1143, r25
    
    if (true) {
        superframe_spec |= (1U << 13);
    }
    
    if (true == IEEE802_15_4_GET_I_AM_COORDINATOR()) {
    2440:	80 91 be 11 	lds	r24, 0x11BE
    2444:	81 11       	cpse	r24, r1
    2446:	03 c0       	rjmp	.+6      	; 0x244e <ieee802_15_4_send_beacon+0x5c>
    uint16_t superframe_spec = 0x0F;
    superframe_spec |= (0x0F << 4);
    superframe_spec |= (0x0F << 8);
    
    if (true) {
        superframe_spec |= (1U << 13);
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	9f e2       	ldi	r25, 0x2F	; 47
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <ieee802_15_4_send_beacon+0x60>
    }
    
    if (true == IEEE802_15_4_GET_I_AM_COORDINATOR()) {
        superframe_spec |= (1U << 14);
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	9f e6       	ldi	r25, 0x6F	; 111
    }
    
    if (true == IEEE802_15_4_GET_ASSOCIATION_PERMITTED()) {
    2452:	20 91 bc 11 	lds	r18, 0x11BC
    2456:	21 11       	cpse	r18, r1
        superframe_spec |= (1U << 15);
    2458:	90 68       	ori	r25, 0x80	; 128
    }
    
    memcpy((void *)(&beacon[index]), (void *)(&superframe_spec), sizeof(uint16_t));
    245a:	90 93 45 11 	sts	0x1145, r25
    245e:	80 93 44 11 	sts	0x1144, r24
    index += sizeof(uint16_t);
    
    /* 5. No GTS fields. */
    beacon[index++] = 0;
    2462:	10 92 46 11 	sts	0x1146, r1
    /* 6. No pending data or addresses. */
    beacon[index++] = 0;
    2466:	10 92 47 11 	sts	0x1147, r1
    
    index += CRC_SIZE;
    
    /* Send beacon. */
    if (true != ieee802_15_4_send(index, beacon)) {
    246a:	6d e3       	ldi	r22, 0x3D	; 61
    246c:	71 e1       	ldi	r23, 0x11	; 17
    246e:	8d e0       	ldi	r24, 0x0D	; 13
    2470:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    2474:	88 23       	and	r24, r24
    2476:	41 f0       	breq	.+16     	; 0x2488 <ieee802_15_4_send_beacon+0x96>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_BEACON_ACK);
    2478:	8f b7       	in	r24, 0x3f	; 63
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	f8 94       	cli
    247e:	8f e0       	ldi	r24, 0x0F	; 15
    2480:	80 93 09 01 	sts	0x0109, r24
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	8f bf       	out	0x3f, r24	; 63
    }
}
    2488:	0f 90       	pop	r0
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	08 95       	ret

00002490 <ieee802_15_4_process_beacon_ack>:


void ieee802_15_4_process_beacon_ack(void *tx_status) {
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	1f 92       	push	r1
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    /* Do not care about the transmission status. Just take the radio transceiver 
     * back to RX_AACK_ON, set the callback handler and state back to started.
     */
    (bool)tat_set_state(RX_AACK_ON);
    249a:	86 e1       	ldi	r24, 0x16	; 22
    249c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    24a0:	8f b7       	in	r24, 0x3f	; 63
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	f8 94       	cli
    24a6:	85 e0       	ldi	r24, 0x05	; 5
    24a8:	80 93 09 01 	sts	0x0109, r24
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	8f bf       	out	0x3f, r24	; 63
}
    24b0:	0f 90       	pop	r0
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	08 95       	ret

000024b8 <goto_rx_aack_on>:
    24b8:	85 e3       	ldi	r24, 0x35	; 53
    24ba:	8a 95       	dec	r24
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <goto_rx_aack_on+0x2>
    24be:	00 00       	nop

static void goto_rx_aack_on(void) {
    /* Wait until the PLL_ON state is entered. */
    do {
        delay_us(20);
    } while (CMD_PLL_ON != tat_get_state());
    24c0:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <tat_get_state>
    24c4:	89 30       	cpi	r24, 0x09	; 9
    24c6:	c1 f7       	brne	.-16     	; 0x24b8 <goto_rx_aack_on>
    
    /* Go to RX_AACK_ON. */
    (bool)tat_set_state(RX_AACK_ON);
    24c8:	86 e1       	ldi	r24, 0x16	; 22
    24ca:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <tat_set_state>

000024ce <ieee802_15_4_mlme_cmd_indication>:
 *         received frame has been ACK'ed.
 */
static void goto_rx_aack_on(void);


void ieee802_15_4_mlme_cmd_indication(void *cmd_frame_info) {
    24ce:	df 92       	push	r13
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	1f 92       	push	r1
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8c 01       	movw	r16, r24
    ieee802_15_4_meta_data_t *frame_info = (ieee802_15_4_meta_data_t *)cmd_frame_info;
    
    /* Read the actual command. */
    uint8_t cmd_type = frame_info->cmd_type;
    24e4:	dc 01       	movw	r26, r24
    24e6:	58 96       	adiw	r26, 0x18	; 24
    24e8:	8c 91       	ld	r24, X
    /* Handle the different commands given the state the device is operating in. */
    if ((ASSOCIATIONREQUEST == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	29 f5       	brne	.+74     	; 0x2538 <ieee802_15_4_mlme_cmd_indication+0x6a>
    24ee:	80 91 09 01 	lds	r24, 0x0109
    24f2:	85 30       	cpi	r24, 0x05	; 5
    24f4:	f1 f4       	brne	.+60     	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        
        /* 7.5.3.1: "If a coordinator with macAssociationPermit set to false 
         * receives an association request command from a device, the command 
         * shall be ignored."
         */
        if (true != IEEE802_15_4_GET_ASSOCIATION_PERMITTED()) {
    24f6:	80 91 bc 11 	lds	r24, 0x11BC
    24fa:	88 23       	and	r24, r24
    24fc:	d1 f0       	breq	.+52     	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
            goto_rx_aack_on();
            return; 
        }
        
        /* Check if the MLME_ASSOCIATE.indication callback is enabled. */
        ieee802_15_4_associate_indication_t mai_callback = ieee802_15_4_get_mlme_associate_indication();
    24fe:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <ieee802_15_4_get_mlme_associate_indication>
    2502:	9c 01       	movw	r18, r24
        if (NULL == mai_callback) { 
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	a9 f0       	breq	.+42     	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
            goto_rx_aack_on();
            return;
        }
            
        /* Build indication message. */
        memcpy((void *)(&(mai->DeviceAddress)), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    2508:	f8 01       	movw	r30, r16
    250a:	70 96       	adiw	r30, 0x10	; 16
    250c:	88 e0       	ldi	r24, 0x08	; 8
    250e:	af e1       	ldi	r26, 0x1F	; 31
    2510:	b1 e1       	ldi	r27, 0x11	; 17
    2512:	01 90       	ld	r0, Z+
    2514:	0d 92       	st	X+, r0
    2516:	8a 95       	dec	r24
    2518:	e1 f7       	brne	.-8      	; 0x2512 <ieee802_15_4_mlme_cmd_indication+0x44>
        mai->CapabilityInformation = *(frame_info->msdu);
    251a:	d8 01       	movw	r26, r16
    251c:	59 96       	adiw	r26, 0x19	; 25
    251e:	ed 91       	ld	r30, X+
    2520:	fc 91       	ld	r31, X
    2522:	5a 97       	sbiw	r26, 0x1a	; 26
    2524:	80 81       	ld	r24, Z
    2526:	80 93 27 11 	sts	0x1127, r24
                
        /* Execute the callback. */
        mai_callback(mai);
    252a:	8f e1       	ldi	r24, 0x1F	; 31
    252c:	91 e1       	ldi	r25, 0x11	; 17
    252e:	f9 01       	movw	r30, r18
    2530:	09 95       	icall
        
        goto_rx_aack_on();
    2532:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <goto_rx_aack_on>
    ieee802_15_4_meta_data_t *frame_info = (ieee802_15_4_meta_data_t *)cmd_frame_info;
    
    /* Read the actual command. */
    uint8_t cmd_type = frame_info->cmd_type;
    /* Handle the different commands given the state the device is operating in. */
    if ((ASSOCIATIONREQUEST == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    2536:	fe c0       	rjmp	.+508    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
                
        /* Execute the callback. */
        mai_callback(mai);
        
        goto_rx_aack_on();
    } else if (((DISASSOCIATIONNOTIFICATION == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) ||
    2538:	83 30       	cpi	r24, 0x03	; 3
    253a:	09 f0       	breq	.+2      	; 0x253e <ieee802_15_4_mlme_cmd_indication+0x70>
    253c:	44 c0       	rjmp	.+136    	; 0x25c6 <ieee802_15_4_mlme_cmd_indication+0xf8>
    253e:	80 91 09 01 	lds	r24, 0x0109
    2542:	84 50       	subi	r24, 0x04	; 4
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	a8 f7       	brcc	.-22     	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
               ((DISASSOCIATIONNOTIFICATION == cmd_type) && (IEEE_MAC_ASSOCIATED == IEEE802_15_4_GET_STATE()))) {
        /* CMD: DISASSOCIATIONNOTIFICATION received. */
        
        /* Check if the MLME_ASSOCIATE.indication callback is enabled. */
        ieee802_15_4_disassociate_indication_t dai_callback = ieee802_15_4_get_mlme_disassociate_indication();
    2548:	0e 94 15 0c 	call	0x182a	; 0x182a <ieee802_15_4_get_mlme_disassociate_indication>
    254c:	9c 01       	movw	r18, r24
        if (NULL == dai_callback) {
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	81 f3       	breq	.-32     	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        mlme_disassociate_ind_t *mdi = (mlme_disassociate_ind_t *)IEEE802_15_4_GET_INDICATION_BUFFER();
        
        /* Set the DeviceAddress, aka. the address of the device requesting the disassociaton which 
         * is always contained in the source address. 
         */
        memcpy((void *)(&(mdi->DeviceAddress)), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    2552:	f8 01       	movw	r30, r16
    2554:	70 96       	adiw	r30, 0x10	; 16
    2556:	88 e0       	ldi	r24, 0x08	; 8
    2558:	af e1       	ldi	r26, 0x1F	; 31
    255a:	b1 e1       	ldi	r27, 0x11	; 17
    255c:	01 90       	ld	r0, Z+
    255e:	0d 92       	st	X+, r0
    2560:	8a 95       	dec	r24
    2562:	e1 f7       	brne	.-8      	; 0x255c <ieee802_15_4_mlme_cmd_indication+0x8e>
        
        /* Extract disassociate reason. */
        mdi->DisassociateReason = *(frame_info->msdu);
    2564:	d8 01       	movw	r26, r16
    2566:	59 96       	adiw	r26, 0x19	; 25
    2568:	ed 91       	ld	r30, X+
    256a:	fc 91       	ld	r31, X
    256c:	5a 97       	sbiw	r26, 0x1a	; 26
    256e:	80 81       	ld	r24, Z
    2570:	80 93 27 11 	sts	0x1127, r24
        
        /* Execute the associated callback. */
        dai_callback(mdi);
    2574:	8f e1       	ldi	r24, 0x1F	; 31
    2576:	91 e1       	ldi	r25, 0x11	; 17
    2578:	f9 01       	movw	r30, r18
    257a:	09 95       	icall
        
        if (IEEE_MAC_ASSOCIATED == IEEE802_15_4_GET_STATE()) {
    257c:	80 91 09 01 	lds	r24, 0x0109
    2580:	84 30       	cpi	r24, 0x04	; 4
    2582:	09 f0       	breq	.+2      	; 0x2586 <ieee802_15_4_mlme_cmd_indication+0xb8>
    2584:	d7 c0       	rjmp	.+430    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
            tat_go_to_sleep();
    2586:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
            
            /* Clear coordinator addres. */
            IEEE802_15_4_SET_COORD_EXTENDED_ADDRESS(0);
    258a:	10 92 cf 11 	sts	0x11CF, r1
    258e:	10 92 d0 11 	sts	0x11D0, r1
    2592:	10 92 d1 11 	sts	0x11D1, r1
    2596:	10 92 d2 11 	sts	0x11D2, r1
    259a:	10 92 d3 11 	sts	0x11D3, r1
    259e:	10 92 d4 11 	sts	0x11D4, r1
    25a2:	10 92 d5 11 	sts	0x11D5, r1
    25a6:	10 92 d6 11 	sts	0x11D6, r1
            IEEE802_15_4_SET_COORD_SHORT_ADDRESS(BROADCAST);
    25aa:	8f ef       	ldi	r24, 0xFF	; 255
    25ac:	9f ef       	ldi	r25, 0xFF	; 255
    25ae:	90 93 c4 11 	sts	0x11C4, r25
    25b2:	80 93 c3 11 	sts	0x11C3, r24
            
            IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    25b6:	8f b7       	in	r24, 0x3f	; 63
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	f8 94       	cli
    25bc:	10 92 09 01 	sts	0x0109, r1
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	8f bf       	out	0x3f, r24	; 63
    25c4:	b7 c0       	rjmp	.+366    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
        }
    } else if ((DATAREQUEST == cmd_type) && (IEEE_MAC_WAITING_FOR_DATA_REQUEST == IEEE802_15_4_GET_STATE())) {
    25c6:	84 30       	cpi	r24, 0x04	; 4
    25c8:	51 f4       	brne	.+20     	; 0x25de <ieee802_15_4_mlme_cmd_indication+0x110>
    25ca:	80 91 09 01 	lds	r24, 0x0109
    25ce:	8c 30       	cpi	r24, 0x0C	; 12
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <ieee802_15_4_mlme_cmd_indication+0x106>
    25d2:	af cf       	rjmp	.-162    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        /* CMD: DATAREQUEST received. */
        /* Send Association response frame. */
        vrt_timer_stop_high_pri_delay();
    25d4:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <vrt_timer_stop_high_pri_delay>
        ieee802_15_4_send_association_response();
    25d8:	0e 94 89 10 	call	0x2112	; 0x2112 <ieee802_15_4_send_association_response>
    25dc:	ab c0       	rjmp	.+342    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
    } else if ((ORPHANNOTIFICATION == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    25de:	86 30       	cpi	r24, 0x06	; 6
    25e0:	c9 f4       	brne	.+50     	; 0x2614 <ieee802_15_4_mlme_cmd_indication+0x146>
    25e2:	80 91 09 01 	lds	r24, 0x0109
    25e6:	85 30       	cpi	r24, 0x05	; 5
    25e8:	09 f0       	breq	.+2      	; 0x25ec <ieee802_15_4_mlme_cmd_indication+0x11e>
    25ea:	a3 cf       	rjmp	.-186    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        /* CMD: ORPHANNOTIFICATION received. */
        /* Check if the MLME_ASSOCIATE.indication callback is enabled. */
        ieee802_15_4_orphan_indication_t oi_callback = ieee802_15_4_get_mlme_orphan_indication();
    25ec:	0e 94 2c 0c 	call	0x1858	; 0x1858 <ieee802_15_4_get_mlme_orphan_indication>
    25f0:	9c 01       	movw	r18, r24
        if (NULL == oi_callback) {
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <ieee802_15_4_mlme_cmd_indication+0x12a>
    25f6:	9d cf       	rjmp	.-198    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        }
                   
        /* Get hold of some memory to build the Orphan indication. */
        mlme_orphan_ind_t *moi = (mlme_orphan_ind_t *)IEEE802_15_4_GET_INDICATION_BUFFER();
        
        memcpy((void *)(&moi->OrphanAddress), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    25f8:	f8 01       	movw	r30, r16
    25fa:	70 96       	adiw	r30, 0x10	; 16
    25fc:	88 e0       	ldi	r24, 0x08	; 8
    25fe:	af e1       	ldi	r26, 0x1F	; 31
    2600:	b1 e1       	ldi	r27, 0x11	; 17
    2602:	01 90       	ld	r0, Z+
    2604:	0d 92       	st	X+, r0
    2606:	8a 95       	dec	r24
    2608:	e1 f7       	brne	.-8      	; 0x2602 <ieee802_15_4_mlme_cmd_indication+0x134>
        
        /* Execute callback. */
        oi_callback(moi);
    260a:	8f e1       	ldi	r24, 0x1F	; 31
    260c:	91 e1       	ldi	r25, 0x11	; 17
    260e:	f9 01       	movw	r30, r18
    2610:	09 95       	icall
    } else if ((DATAREQUEST == cmd_type) && (IEEE_MAC_WAITING_FOR_DATA_REQUEST == IEEE802_15_4_GET_STATE())) {
        /* CMD: DATAREQUEST received. */
        /* Send Association response frame. */
        vrt_timer_stop_high_pri_delay();
        ieee802_15_4_send_association_response();
    } else if ((ORPHANNOTIFICATION == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    2612:	90 c0       	rjmp	.+288    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
        
        memcpy((void *)(&moi->OrphanAddress), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
        
        /* Execute callback. */
        oi_callback(moi);
    } else if ((BEACONREQUEST == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    2614:	87 30       	cpi	r24, 0x07	; 7
    2616:	41 f4       	brne	.+16     	; 0x2628 <ieee802_15_4_mlme_cmd_indication+0x15a>
    2618:	80 91 09 01 	lds	r24, 0x0109
    261c:	85 30       	cpi	r24, 0x05	; 5
    261e:	09 f0       	breq	.+2      	; 0x2622 <ieee802_15_4_mlme_cmd_indication+0x154>
    2620:	88 cf       	rjmp	.-240    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        /* CMD: BEACONREQUEST received. */
        ieee802_15_4_send_beacon();
    2622:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <ieee802_15_4_send_beacon>
    2626:	86 c0       	rjmp	.+268    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
    } else if ((COORDINATORREALIGNMENT == cmd_type) && (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE())) {
    2628:	88 30       	cpi	r24, 0x08	; 8
    262a:	09 f0       	breq	.+2      	; 0x262e <ieee802_15_4_mlme_cmd_indication+0x160>
    262c:	4d c0       	rjmp	.+154    	; 0x26c8 <ieee802_15_4_mlme_cmd_indication+0x1fa>
    262e:	80 91 09 01 	lds	r24, 0x0109
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	09 f0       	breq	.+2      	; 0x2638 <ieee802_15_4_mlme_cmd_indication+0x16a>
    2636:	7d cf       	rjmp	.-262    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        
        /* Stop timer, clear callback and force radio transceiver to the TRX_OFF 
         * state. The final transition to sleep will be done by the code that 
         * executes the confirm callback.
         */
        vrt_timer_stop_high_pri_delay();
    2638:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <vrt_timer_stop_high_pri_delay>
        rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
    263c:	28 e0       	ldi	r18, 0x08	; 8
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	6f e1       	ldi	r22, 0x1F	; 31
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        
        uint8_t status = MAC_INVALID_PARAMETER;
        if (7 != (frame_info->msdu_length)) { 
    2648:	d8 01       	movw	r26, r16
    264a:	5b 96       	adiw	r26, 0x1b	; 27
    264c:	8c 91       	ld	r24, X
    264e:	87 30       	cpi	r24, 0x07	; 7
    2650:	19 f0       	breq	.+6      	; 0x2658 <ieee802_15_4_mlme_cmd_indication+0x18a>
         * executes the confirm callback.
         */
        vrt_timer_stop_high_pri_delay();
        rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
        
        uint8_t status = MAC_INVALID_PARAMETER;
    2652:	58 ee       	ldi	r21, 0xE8	; 232
    2654:	f5 2e       	mov	r15, r21
    2656:	01 c0       	rjmp	.+2      	; 0x265a <ieee802_15_4_mlme_cmd_indication+0x18c>
        if (7 != (frame_info->msdu_length)) { 
        } else {
            status = MAC_SUCCESS;
    2658:	f1 2c       	mov	r15, r1
        }
        
        uint8_t *cr = frame_info->msdu;
    265a:	f8 01       	movw	r30, r16
    265c:	01 8d       	ldd	r16, Z+25	; 0x19
    265e:	12 8d       	ldd	r17, Z+26	; 0x1a
        
        /* Extract PAN ID. */
        uint16_t conv = 0;
        conv = cr[1] << 8;
    2660:	d8 01       	movw	r26, r16
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	8c 91       	ld	r24, X
    2666:	11 97       	sbiw	r26, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	98 2f       	mov	r25, r24
    266c:	88 27       	eor	r24, r24
        conv |= cr[0];
    266e:	2c 91       	ld	r18, X
        (uint8_t)ieee802_15_4_set_pan_id(conv);
    2670:	82 2b       	or	r24, r18
    2672:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
        
        /* Extract Coordinator short address. */
        conv = 0;
        conv = cr[3] << 8;
    2676:	f8 01       	movw	r30, r16
    2678:	83 81       	ldd	r24, Z+3	; 0x03
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	98 2f       	mov	r25, r24
    267e:	88 27       	eor	r24, r24
        conv |= cr[2];
    2680:	22 81       	ldd	r18, Z+2	; 0x02
    2682:	82 2b       	or	r24, r18
        IEEE802_15_4_SET_COORD_SHORT_ADDRESS(conv);
    2684:	90 93 c4 11 	sts	0x11C4, r25
    2688:	80 93 c3 11 	sts	0x11C3, r24
        
        /* Extract Short address */
        conv = cr[6] << 8;
    268c:	86 81       	ldd	r24, Z+6	; 0x06
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	98 2f       	mov	r25, r24
    2692:	88 27       	eor	r24, r24
        conv |= cr[5];
    2694:	25 81       	ldd	r18, Z+5	; 0x05
    2696:	82 2b       	or	r24, r18
        if (BROADCAST != conv) { (uint8_t)ieee802_15_4_set_pan_id(conv); }
    2698:	8f 3f       	cpi	r24, 0xFF	; 255
    269a:	ff ef       	ldi	r31, 0xFF	; 255
    269c:	9f 07       	cpc	r25, r31
    269e:	11 f0       	breq	.+4      	; 0x26a4 <ieee802_15_4_mlme_cmd_indication+0x1d6>
    26a0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
        
        /* Extract channel. */
        uint8_t channel = cr[4];
        (uint8_t)ieee802_15_4_set_channel(channel); // Set the appropriate PIB entries
    26a4:	d8 01       	movw	r26, r16
    26a6:	14 96       	adiw	r26, 0x04	; 4
    26a8:	8c 91       	ld	r24, X
    26aa:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <ieee802_15_4_set_channel>
        
        mlme_scan_conf_t *msc = (mlme_scan_conf_t *)mac_param.scan.msc;
    26ae:	60 91 1d 11 	lds	r22, 0x111D
    26b2:	70 91 1e 11 	lds	r23, 0x111E
        msc->status = status;
    26b6:	fb 01       	movw	r30, r22
    26b8:	f0 82       	st	Z, r15
        
        if (true != vrt_post_event(ieee802_15_4_scan_do_confirm, (void *)msc)) {
    26ba:	84 eb       	ldi	r24, 0xB4	; 180
    26bc:	97 e1       	ldi	r25, 0x17	; 23
    26be:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
    26c2:	81 11       	cpse	r24, r1
    26c4:	37 c0       	rjmp	.+110    	; 0x2734 <ieee802_15_4_mlme_cmd_indication+0x266>
    26c6:	35 cf       	rjmp	.-406    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
            goto_rx_aack_on();
        }
    } else if ((ASSOCIATIONRESPONSE == cmd_type) && (IEEE_MAC_WAITING_ASSOCIATION_RESPONSE == IEEE802_15_4_GET_STATE())) {
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	09 f0       	breq	.+2      	; 0x26ce <ieee802_15_4_mlme_cmd_indication+0x200>
    26cc:	32 cf       	rjmp	.-412    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
    26ce:	80 91 09 01 	lds	r24, 0x0109
    26d2:	89 30       	cpi	r24, 0x09	; 9
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <ieee802_15_4_mlme_cmd_indication+0x20a>
    26d6:	2d cf       	rjmp	.-422    	; 0x2532 <ieee802_15_4_mlme_cmd_indication+0x64>
        /* Stop symbol timer running. */
        vrt_timer_stop_high_pri_delay();
    26d8:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <vrt_timer_stop_high_pri_delay>
        
        /* Extract association status. Position xx.*/
        uint8_t *association_response = frame_info->msdu;
    26dc:	d8 01       	movw	r26, r16
    26de:	59 96       	adiw	r26, 0x19	; 25
    26e0:	ed 91       	ld	r30, X+
    26e2:	fc 91       	ld	r31, X
    26e4:	5a 97       	sbiw	r26, 0x1a	; 26
        
        /* Extract and set short address. Positions 22 and 23.*/
        uint16_t short_addr = association_response[1] << 8;
    26e6:	e1 80       	ldd	r14, Z+1	; 0x01
    26e8:	f1 2c       	mov	r15, r1
    26ea:	fe 2c       	mov	r15, r14
    26ec:	ee 24       	eor	r14, r14
        short_addr         |= association_response[0];
    26ee:	80 81       	ld	r24, Z
    26f0:	e8 2a       	or	r14, r24
        
        /* Extract the association status. Positions 24.*/
        uint8_t status = association_response[2];
    26f2:	d2 80       	ldd	r13, Z+2	; 0x02
        
        /* The return from the set function is not used, since it will only report
         * back false if the radio transceiver could not be taken out of sleep.
         * However the system is guaranteed not to sleep in this mode.
         */
        (uint8_t)ieee802_15_4_set_short_address(short_addr);
    26f4:	c7 01       	movw	r24, r14
    26f6:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <ieee802_15_4_set_short_address>
    
        /* Set coordinator extended address. */
        memcpy((void *)(&IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS()), \
    26fa:	f8 01       	movw	r30, r16
    26fc:	80 89       	ldd	r24, Z+16	; 0x10
    26fe:	80 93 cf 11 	sts	0x11CF, r24
    2702:	81 89       	ldd	r24, Z+17	; 0x11
    2704:	80 93 d0 11 	sts	0x11D0, r24
    2708:	82 89       	ldd	r24, Z+18	; 0x12
    270a:	80 93 d1 11 	sts	0x11D1, r24
    270e:	83 89       	ldd	r24, Z+19	; 0x13
    2710:	80 93 d2 11 	sts	0x11D2, r24
    2714:	84 89       	ldd	r24, Z+20	; 0x14
    2716:	80 93 d3 11 	sts	0x11D3, r24
    271a:	85 89       	ldd	r24, Z+21	; 0x15
    271c:	80 93 d4 11 	sts	0x11D4, r24
    2720:	86 89       	ldd	r24, Z+22	; 0x16
    2722:	80 93 d5 11 	sts	0x11D5, r24
    2726:	87 89       	ldd	r24, Z+23	; 0x17
    2728:	80 93 d6 11 	sts	0x11D6, r24
               (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
        
        /* Issue the confirm message back to the user. */
        issue_associate_confirm(status, short_addr);
    272c:	b7 01       	movw	r22, r14
    272e:	8d 2d       	mov	r24, r13
    2730:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <issue_associate_confirm>
    } else {
        goto_rx_aack_on();
    }
}
    2734:	0f 90       	pop	r0
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	df 90       	pop	r13
    2744:	08 95       	ret

00002746 <ieee802_15_4_data_indication_do_callback>:
        (bool)tat_set_state(RX_AACK_ON);
    }
}


void ieee802_15_4_data_indication_do_callback(void *mdi) {
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	ec 01       	movw	r28, r24
    ieee802_15_4_data_indication_t mdi_callback = ieee802_15_4_get_mcps_data_indication();
    2750:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <ieee802_15_4_get_mcps_data_indication>
    2754:	8c 01       	movw	r16, r24
    2756:	85 e3       	ldi	r24, 0x35	; 53
    2758:	8a 95       	dec	r24
    275a:	f1 f7       	brne	.-4      	; 0x2758 <ieee802_15_4_data_indication_do_callback+0x12>
    275c:	00 00       	nop
    
    do {
        delay_us(20);
    } while (CMD_PLL_ON != tat_get_state());
    275e:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <tat_get_state>
    2762:	89 30       	cpi	r24, 0x09	; 9
    2764:	c1 f7       	brne	.-16     	; 0x2756 <ieee802_15_4_data_indication_do_callback+0x10>
    
    if (NULL == mdi_callback) {
    2766:	01 15       	cp	r16, r1
    2768:	11 05       	cpc	r17, r1
    276a:	39 f4       	brne	.+14     	; 0x277a <ieee802_15_4_data_indication_do_callback+0x34>
        (bool)tat_set_state(RX_AACK_ON);
    276c:	86 e1       	ldi	r24, 0x16	; 22
    }
    
    /* Execute the callback. */
    mdi_callback((mcps_data_ind_t *)mdi);
    MEM_FREE(mdi);
}
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    do {
        delay_us(20);
    } while (CMD_PLL_ON != tat_get_state());
    
    if (NULL == mdi_callback) {
        (bool)tat_set_state(RX_AACK_ON);
    2776:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <tat_set_state>
        
        return;
    }
    
    /* Execute the callback. */
    mdi_callback((mcps_data_ind_t *)mdi);
    277a:	ce 01       	movw	r24, r28
    277c:	f8 01       	movw	r30, r16
    277e:	09 95       	icall
    MEM_FREE(mdi);
    2780:	ce 01       	movw	r24, r28
}
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
        return;
    }
    
    /* Execute the callback. */
    mdi_callback((mcps_data_ind_t *)mdi);
    MEM_FREE(mdi);
    278a:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>

0000278e <ieee802_15_4_data_request>:
static ieee802_15_4_state_t original_mac_state = IEEE_MAC_IDLE;
static mcps_data_conf_t *confirm_ptr;
static void (*mcps_data_confirm)(mcps_data_conf_t *mdc) = NULL;
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_data_request(mcps_data_req_t *mdr) {
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	1f 92       	push	r1
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	8c 01       	movw	r16, r24
    /* Check first that the MAC is in a state where it is allowed to send
     * data. A coordinator must be started and a router or device must be associated.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
    27a6:	f0 90 09 01 	lds	r15, 0x0109
    27aa:	8c ef       	ldi	r24, 0xFC	; 252
    27ac:	8f 0d       	add	r24, r15
    27ae:	82 30       	cpi	r24, 0x02	; 2
    27b0:	10 f0       	brcs	.+4      	; 0x27b6 <ieee802_15_4_data_request+0x28>
        (IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE())) { return false; }
    27b2:	10 e0       	ldi	r17, 0x00	; 0
    27b4:	ef c0       	rjmp	.+478    	; 0x2994 <ieee802_15_4_data_request+0x206>
    
    /* Perform sanity check on function parameters. */
    if (NULL == mdr) { return false; }
    27b6:	01 15       	cp	r16, r1
    27b8:	11 05       	cpc	r17, r1
    27ba:	d9 f3       	breq	.-10     	; 0x27b2 <ieee802_15_4_data_request+0x24>
    if (NULL == (mdr->data)) { return false; }
    27bc:	d8 01       	movw	r26, r16
    27be:	56 96       	adiw	r26, 0x16	; 22
    27c0:	8d 91       	ld	r24, X+
    27c2:	9c 91       	ld	r25, X
    27c4:	57 97       	sbiw	r26, 0x17	; 23
    27c6:	89 2b       	or	r24, r25
    27c8:	a1 f3       	breq	.-24     	; 0x27b2 <ieee802_15_4_data_request+0x24>
    if (NULL == (mdr->mcps_data_confirm)) { return false; }
    27ca:	58 96       	adiw	r26, 0x18	; 24
    27cc:	cd 90       	ld	r12, X+
    27ce:	dc 90       	ld	r13, X
    27d0:	59 97       	sbiw	r26, 0x19	; 25
    27d2:	c1 14       	cp	r12, r1
    27d4:	d1 04       	cpc	r13, r1
    27d6:	69 f3       	breq	.-38     	; 0x27b2 <ieee802_15_4_data_request+0x24>
    
    // Check that the source address mode is a valid one.
    if ((mdr->SrcAddrMode != WPAN_ADDRMODE_NONE)  && 
    27d8:	bc 91       	ld	r27, X
    27da:	bb 23       	and	r27, r27
    27dc:	21 f0       	breq	.+8      	; 0x27e6 <ieee802_15_4_data_request+0x58>
    27de:	8e ef       	ldi	r24, 0xFE	; 254
    27e0:	8b 0f       	add	r24, r27
    27e2:	82 30       	cpi	r24, 0x02	; 2
    27e4:	30 f7       	brcc	.-52     	; 0x27b2 <ieee802_15_4_data_request+0x24>
        (mdr->SrcAddrMode != WPAN_ADDRMODE_SHORT) &&
        (mdr->SrcAddrMode != WPAN_ADDRMODE_LONG)) { return false; }
    
    // Check that the destination address mode is a valid one.
    if ((mdr->DstAddrMode != WPAN_ADDRMODE_NONE)  && 
    27e6:	f8 01       	movw	r30, r16
    27e8:	a1 85       	ldd	r26, Z+9	; 0x09
    27ea:	aa 23       	and	r26, r26
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <ieee802_15_4_data_request+0x62>
    27ee:	ca c0       	rjmp	.+404    	; 0x2984 <ieee802_15_4_data_request+0x1f6>
    27f0:	8e ef       	ldi	r24, 0xFE	; 254
    27f2:	8a 0f       	add	r24, r26
    27f4:	82 30       	cpi	r24, 0x02	; 2
    27f6:	e8 f6       	brcc	.-70     	; 0x27b2 <ieee802_15_4_data_request+0x24>
    // At least one address must be available.
    if ((mdr->SrcAddrMode == WPAN_ADDRMODE_NONE) && 
        (mdr->DstAddrMode == WPAN_ADDRMODE_NONE)) { return false; }
    
    // Check whether somebody requests an ACK of broadcast frame. Not allowed.
    if (((mdr->TxOptions & ACK_TRANSMISSION) == ACK_TRANSMISSION) && 
    27f8:	f8 01       	movw	r30, r16
    27fa:	84 89       	ldd	r24, Z+20	; 0x14
    27fc:	f8 2f       	mov	r31, r24
    27fe:	f1 70       	andi	r31, 0x01	; 1
    2800:	ef 2e       	mov	r14, r31
    2802:	80 ff       	sbrs	r24, 0
    2804:	16 c0       	rjmp	.+44     	; 0x2832 <ieee802_15_4_data_request+0xa4>
    2806:	a2 30       	cpi	r26, 0x02	; 2
    2808:	a1 f4       	brne	.+40     	; 0x2832 <ieee802_15_4_data_request+0xa4>
        (mdr->DstAddrMode == FCF_SHORT_ADDR) && 
    280a:	f8 01       	movw	r30, r16
    280c:	24 85       	ldd	r18, Z+12	; 0x0c
    280e:	35 85       	ldd	r19, Z+13	; 0x0d
    2810:	46 85       	ldd	r20, Z+14	; 0x0e
    2812:	57 85       	ldd	r21, Z+15	; 0x0f
    2814:	60 89       	ldd	r22, Z+16	; 0x10
    2816:	71 89       	ldd	r23, Z+17	; 0x11
    2818:	82 89       	ldd	r24, Z+18	; 0x12
    281a:	93 89       	ldd	r25, Z+19	; 0x13
    281c:	2f 3f       	cpi	r18, 0xFF	; 255
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	41 05       	cpc	r20, r1
    2822:	51 05       	cpc	r21, r1
    2824:	61 05       	cpc	r22, r1
    2826:	71 05       	cpc	r23, r1
    2828:	81 05       	cpc	r24, r1
    282a:	91 05       	cpc	r25, r1
    282c:	09 f0       	breq	.+2      	; 0x2830 <ieee802_15_4_data_request+0xa2>
    282e:	ae c0       	rjmp	.+348    	; 0x298c <ieee802_15_4_data_request+0x1fe>
    2830:	c0 cf       	rjmp	.-128    	; 0x27b2 <ieee802_15_4_data_request+0x24>
        (mdr->DstAddr == BROADCAST)) { return false; }
    
    // Check whether source or destination address is set to reserved values.
    if ((mdr->SrcAddrMode == FCF_RESERVED_ADDR) || 
    2832:	b1 30       	cpi	r27, 0x01	; 1
    2834:	09 f4       	brne	.+2      	; 0x2838 <ieee802_15_4_data_request+0xaa>
    2836:	bd cf       	rjmp	.-134    	; 0x27b2 <ieee802_15_4_data_request+0x24>
    2838:	a1 30       	cpi	r26, 0x01	; 1
    283a:	09 f4       	brne	.+2      	; 0x283e <ieee802_15_4_data_request+0xb0>
    283c:	ba cf       	rjmp	.-140    	; 0x27b2 <ieee802_15_4_data_request+0x24>
        (mdr->DstAddrMode == FCF_RESERVED_ADDR)) { return false; }
    
    /* Set some internal variables that is important in the following execution. */
    mcps_data_confirm = mdr->mcps_data_confirm;
    283e:	d0 92 b3 02 	sts	0x02B3, r13
    2842:	c0 92 b2 02 	sts	0x02B2, r12
    confirm_ptr = &(mdr->mdc);
    2846:	98 01       	movw	r18, r16
    2848:	26 5e       	subi	r18, 0xE6	; 230
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	30 93 b5 02 	sts	0x02B5, r19
    2850:	20 93 b4 02 	sts	0x02B4, r18
    original_mac_state = IEEE802_15_4_GET_STATE();
    2854:	f0 92 b6 02 	sts	0x02B6, r15
    
    /* Verify that the data length is valid. */
    if (0 == (mdr->msduLength)) { return false; }
    2858:	f8 01       	movw	r30, r16
    285a:	85 89       	ldd	r24, Z+21	; 0x15
    285c:	81 50       	subi	r24, 0x01	; 1
    285e:	86 36       	cpi	r24, 0x66	; 102
    2860:	08 f0       	brcs	.+2      	; 0x2864 <ieee802_15_4_data_request+0xd6>
    2862:	a7 cf       	rjmp	.-178    	; 0x27b2 <ieee802_15_4_data_request+0x24>
    
    /* 1. Build the FCF field and add to the buffer. */
    uint16_t fcf;
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_DATA);

    if (mdr->TxOptions & ACK_TRANSMISSION) { fcf |= FCF_ACK_REQUEST; }
    2864:	e1 10       	cpse	r14, r1
    2866:	03 c0       	rjmp	.+6      	; 0x286e <ieee802_15_4_data_request+0xe0>
    /* Get internal TX buffer to build the frame in. */
    uint8_t *frame_buffer = IEEE802_15_4_GET_TX_BUFFER();
    
    /* 1. Build the FCF field and add to the buffer. */
    uint16_t fcf;
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_DATA);
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <ieee802_15_4_data_request+0xe4>

    if (mdr->TxOptions & ACK_TRANSMISSION) { fcf |= FCF_ACK_REQUEST; }
    286e:	41 e2       	ldi	r20, 0x21	; 33
    2870:	50 e0       	ldi	r21, 0x00	; 0
    
    fcf |= FCF_INTRA_PAN;
    
    fcf |= FCF_SET_SOURCE_ADDR_MODE(mdr->SrcAddrMode);
    2872:	8b 2f       	mov	r24, r27
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	90 e4       	ldi	r25, 0x40	; 64
    2878:	89 9f       	mul	r24, r25
    287a:	90 2d       	mov	r25, r0
    287c:	88 27       	eor	r24, r24
    287e:	11 24       	eor	r1, r1
    fcf |= (FCF_SET_DEST_ADDR_MODE(mdr->DstAddrMode));
    2880:	2a 2f       	mov	r18, r26
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	32 2f       	mov	r19, r18
    2886:	22 27       	eor	r18, r18
    2888:	33 0f       	add	r19, r19
    288a:	33 0f       	add	r19, r19
    uint16_t fcf;
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_DATA);

    if (mdr->TxOptions & ACK_TRANSMISSION) { fcf |= FCF_ACK_REQUEST; }
    
    fcf |= FCF_INTRA_PAN;
    288c:	82 2b       	or	r24, r18
    288e:	93 2b       	or	r25, r19
    
    fcf |= FCF_SET_SOURCE_ADDR_MODE(mdr->SrcAddrMode);
    2890:	80 64       	ori	r24, 0x40	; 64
    fcf |= (FCF_SET_DEST_ADDR_MODE(mdr->DstAddrMode));
    2892:	84 2b       	or	r24, r20
    2894:	95 2b       	or	r25, r21
    
    uint8_t index = 0;
    
    frame_buffer[index++] = ((fcf >> 8*0) & 0xFF);
    2896:	80 93 3d 11 	sts	0x113D, r24
    frame_buffer[index++] = ((fcf >> 8*1) & 0xFF);
    289a:	90 93 3e 11 	sts	0x113E, r25
    
    /* 2. Add DSN field. */
    frame_buffer[index++] = IEEE802_15_4_GET_DSN();
    289e:	80 91 bf 11 	lds	r24, 0x11BF
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	98 0f       	add	r25, r24
    28a6:	90 93 bf 11 	sts	0x11BF, r25
    28aa:	80 93 3f 11 	sts	0x113F, r24
    
    /* 3. Add destination address. */
    if (FCF_NO_ADDR != (mdr->DstAddrMode)) {
    28ae:	aa 23       	and	r26, r26
    28b0:	e9 f0       	breq	.+58     	; 0x28ec <ieee802_15_4_data_request+0x15e>
        frame_buffer[index++] = (((mdr->DstPANId) >> 8*0) & 0xFF);
    28b2:	f8 01       	movw	r30, r16
    28b4:	92 85       	ldd	r25, Z+10	; 0x0a
    28b6:	83 85       	ldd	r24, Z+11	; 0x0b
    28b8:	90 93 40 11 	sts	0x1140, r25
        frame_buffer[index++] = (((mdr->DstPANId) >> 8*1) & 0xFF);
    28bc:	80 93 41 11 	sts	0x1141, r24
        
        if(FCF_LONG_ADDR == (mdr->DstAddrMode)) {
    28c0:	a3 30       	cpi	r26, 0x03	; 3
    28c2:	59 f4       	brne	.+22     	; 0x28da <ieee802_15_4_data_request+0x14c>
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->DstAddr)), sizeof(uint64_t));
    28c4:	88 e0       	ldi	r24, 0x08	; 8
    28c6:	3c 96       	adiw	r30, 0x0c	; 12
    28c8:	a2 e4       	ldi	r26, 0x42	; 66
    28ca:	b1 e1       	ldi	r27, 0x11	; 17
    28cc:	01 90       	ld	r0, Z+
    28ce:	0d 92       	st	X+, r0
    28d0:	8a 95       	dec	r24
    28d2:	e1 f7       	brne	.-8      	; 0x28cc <ieee802_15_4_data_request+0x13e>
            index += sizeof(uint64_t);
    28d4:	2d e0       	ldi	r18, 0x0D	; 13
    28d6:	f2 2e       	mov	r15, r18
    28d8:	0b c0       	rjmp	.+22     	; 0x28f0 <ieee802_15_4_data_request+0x162>
        } else {
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->DstAddr)), sizeof(uint16_t));
    28da:	84 85       	ldd	r24, Z+12	; 0x0c
    28dc:	95 85       	ldd	r25, Z+13	; 0x0d
    28de:	90 93 43 11 	sts	0x1143, r25
    28e2:	80 93 42 11 	sts	0x1142, r24
            index += sizeof(uint16_t);
    28e6:	97 e0       	ldi	r25, 0x07	; 7
    28e8:	f9 2e       	mov	r15, r25
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <ieee802_15_4_data_request+0x162>
    
    frame_buffer[index++] = ((fcf >> 8*0) & 0xFF);
    frame_buffer[index++] = ((fcf >> 8*1) & 0xFF);
    
    /* 2. Add DSN field. */
    frame_buffer[index++] = IEEE802_15_4_GET_DSN();
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	f8 2e       	mov	r15, r24
            index += sizeof(uint16_t);
        }
    }
    
    /* 4. Add source address. */
    if (FCF_NO_ADDR  != (mdr->SrcAddrMode)) {
    28f0:	f8 01       	movw	r30, r16
    28f2:	80 81       	ld	r24, Z
    28f4:	88 23       	and	r24, r24
    28f6:	b1 f0       	breq	.+44     	; 0x2924 <ieee802_15_4_data_request+0x196>
    28f8:	af 2d       	mov	r26, r15
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
        if(FCF_LONG_ADDR == (mdr->SrcAddrMode)) {
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->SrcAddr)), sizeof(uint64_t));
    28fc:	a3 5c       	subi	r26, 0xC3	; 195
    28fe:	be 4e       	sbci	r27, 0xEE	; 238
        }
    }
    
    /* 4. Add source address. */
    if (FCF_NO_ADDR  != (mdr->SrcAddrMode)) {
        if(FCF_LONG_ADDR == (mdr->SrcAddrMode)) {
    2900:	83 30       	cpi	r24, 0x03	; 3
    2902:	49 f4       	brne	.+18     	; 0x2916 <ieee802_15_4_data_request+0x188>
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->SrcAddr)), sizeof(uint64_t));
    2904:	88 e0       	ldi	r24, 0x08	; 8
    2906:	31 96       	adiw	r30, 0x01	; 1
    2908:	01 90       	ld	r0, Z+
    290a:	0d 92       	st	X+, r0
    290c:	8a 95       	dec	r24
    290e:	e1 f7       	brne	.-8      	; 0x2908 <ieee802_15_4_data_request+0x17a>
            index += sizeof(uint64_t);
    2910:	f8 e0       	ldi	r31, 0x08	; 8
    2912:	ff 0e       	add	r15, r31
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <ieee802_15_4_data_request+0x196>
        } else {
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->SrcAddr)), sizeof(uint16_t));
    2916:	f8 01       	movw	r30, r16
    2918:	21 81       	ldd	r18, Z+1	; 0x01
    291a:	32 81       	ldd	r19, Z+2	; 0x02
    291c:	2d 93       	st	X+, r18
    291e:	3c 93       	st	X, r19
            index += sizeof(uint16_t);
    2920:	f3 94       	inc	r15
    2922:	f3 94       	inc	r15
        }
    }
    
    /* 5. Copy user data into frame buffer. */
    memcpy((void *)(&frame_buffer[index]), (void *)(mdr->data), mdr->msduLength);
    2924:	8f 2d       	mov	r24, r15
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	d8 01       	movw	r26, r16
    292a:	55 96       	adiw	r26, 0x15	; 21
    292c:	4c 91       	ld	r20, X
    292e:	55 97       	sbiw	r26, 0x15	; 21
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	56 96       	adiw	r26, 0x16	; 22
    2934:	6d 91       	ld	r22, X+
    2936:	7c 91       	ld	r23, X
    2938:	57 97       	sbiw	r26, 0x17	; 23
    293a:	83 5c       	subi	r24, 0xC3	; 195
    293c:	9e 4e       	sbci	r25, 0xEE	; 238
    293e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    index += mdr->msduLength;
    2942:	f8 01       	movw	r30, r16
    2944:	85 89       	ldd	r24, Z+21	; 0x15
    2946:	8e 5f       	subi	r24, 0xFE	; 254
     */
    index += CRC_SIZE;
    
    /* 7. Send data. */
    bool mcdr_status = false;
    if (true != ieee802_15_4_send(index, frame_buffer)) {
    2948:	6d e3       	ldi	r22, 0x3D	; 61
    294a:	71 e1       	ldi	r23, 0x11	; 17
    294c:	8f 0d       	add	r24, r15
    294e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    2952:	18 2f       	mov	r17, r24
    2954:	81 11       	cpse	r24, r1
    2956:	0d c0       	rjmp	.+26     	; 0x2972 <ieee802_15_4_data_request+0x1e4>
        /* Frame could not be sent. Go back to RX_AACK_ON or to SLEEP. */
        tat_reset();
    2958:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <tat_reset>
        if (true != IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    295c:	80 91 bd 11 	lds	r24, 0x11BD
    2960:	81 11       	cpse	r24, r1
    2962:	03 c0       	rjmp	.+6      	; 0x296a <ieee802_15_4_data_request+0x1dc>
            tat_go_to_sleep();
    2964:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    2968:	15 c0       	rjmp	.+42     	; 0x2994 <ieee802_15_4_data_request+0x206>
        } else {
            (bool)tat_set_state(RX_AACK_ON);
    296a:	86 e1       	ldi	r24, 0x16	; 22
    296c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    2970:	11 c0       	rjmp	.+34     	; 0x2994 <ieee802_15_4_data_request+0x206>
        }
    } else {
        /* Change internal state to busy transmitting. */
        IEEE802_15_4_SET_STATE(IEEE_MAC_TX_WAITING_ACK);
    2972:	8f b7       	in	r24, 0x3f	; 63
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	f8 94       	cli
    2978:	83 e0       	ldi	r24, 0x03	; 3
    297a:	80 93 09 01 	sts	0x0109, r24
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	8f bf       	out	0x3f, r24	; 63
    2982:	08 c0       	rjmp	.+16     	; 0x2994 <ieee802_15_4_data_request+0x206>
    if ((mdr->DstAddrMode != WPAN_ADDRMODE_NONE)  && 
        (mdr->DstAddrMode != WPAN_ADDRMODE_SHORT) && 
        (mdr->DstAddrMode != WPAN_ADDRMODE_LONG)) { return false; }
    
    // At least one address must be available.
    if ((mdr->SrcAddrMode == WPAN_ADDRMODE_NONE) && 
    2984:	bb 23       	and	r27, r27
    2986:	09 f4       	brne	.+2      	; 0x298a <ieee802_15_4_data_request+0x1fc>
    2988:	14 cf       	rjmp	.-472    	; 0x27b2 <ieee802_15_4_data_request+0x24>
    298a:	36 cf       	rjmp	.-404    	; 0x27f8 <ieee802_15_4_data_request+0x6a>
    if (((mdr->TxOptions & ACK_TRANSMISSION) == ACK_TRANSMISSION) && 
        (mdr->DstAddrMode == FCF_SHORT_ADDR) && 
        (mdr->DstAddr == BROADCAST)) { return false; }
    
    // Check whether source or destination address is set to reserved values.
    if ((mdr->SrcAddrMode == FCF_RESERVED_ADDR) || 
    298c:	b1 30       	cpi	r27, 0x01	; 1
    298e:	09 f0       	breq	.+2      	; 0x2992 <ieee802_15_4_data_request+0x204>
    2990:	56 cf       	rjmp	.-340    	; 0x283e <ieee802_15_4_data_request+0xb0>
    2992:	0f cf       	rjmp	.-482    	; 0x27b2 <ieee802_15_4_data_request+0x24>
        IEEE802_15_4_SET_STATE(IEEE_MAC_TX_WAITING_ACK);
        mcdr_status = true;
    }
    
    return mcdr_status;
}
    2994:	81 2f       	mov	r24, r17
    2996:	0f 90       	pop	r0
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	08 95       	ret

000029aa <ieee802_15_4_data_process_ack>:


void ieee802_15_4_data_process_ack(void *tx_status) {
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    /* Set the correct confirm status. */
    uint8_t status = *((uint8_t *)tx_status);
    29b4:	fc 01       	movw	r30, r24
    29b6:	80 81       	ld	r24, Z
    if ((TRAC_SUCCESS == status) || (TRAC_SUCCESS_DATA_PENDING == status)) {
    29b8:	82 30       	cpi	r24, 0x02	; 2
    29ba:	20 f0       	brcs	.+8      	; 0x29c4 <ieee802_15_4_data_process_ack+0x1a>
        status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == status) {
    29bc:	85 30       	cpi	r24, 0x05	; 5
    29be:	21 f4       	brne	.+8      	; 0x29c8 <ieee802_15_4_data_process_ack+0x1e>
        status = MAC_NO_ACK;
    29c0:	29 ee       	ldi	r18, 0xE9	; 233
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <ieee802_15_4_data_process_ack+0x20>

void ieee802_15_4_data_process_ack(void *tx_status) {
    /* Set the correct confirm status. */
    uint8_t status = *((uint8_t *)tx_status);
    if ((TRAC_SUCCESS == status) || (TRAC_SUCCESS_DATA_PENDING == status)) {
        status = MAC_SUCCESS;
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <ieee802_15_4_data_process_ack+0x20>
    } else if (TRAC_NO_ACK == status) {
        status = MAC_NO_ACK;
    } else {
        status = MAC_CHANNEL_ACCESS_FAILURE;
    29c8:	21 ee       	ldi	r18, 0xE1	; 225
    }
    
    /* Set the status variable that will be used in the callback. */
    confirm_ptr->status = status;
    29ca:	80 91 b4 02 	lds	r24, 0x02B4
    29ce:	90 91 b5 02 	lds	r25, 0x02B5
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 83       	st	Z, r18
        
    /* The last transitted frame has been acknowledged. The user is notified 
     * through the ieee802_15_4_data_confirm callback. 
     */
    mcps_data_confirm(confirm_ptr);
    29d6:	e0 91 b2 02 	lds	r30, 0x02B2
    29da:	f0 91 b3 02 	lds	r31, 0x02B3
    29de:	09 95       	icall
    
    /* Take the radio transceiver to sleep or RX_AACK_ON depending on the 
     * RX_ON_WHEN_IDLE flag. The device will be in TRX_OFF when coming here.
     */
    if (true != IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    29e0:	80 91 bd 11 	lds	r24, 0x11BD
    29e4:	81 11       	cpse	r24, r1
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <ieee802_15_4_data_process_ack+0x44>
        tat_go_to_sleep();
    29e8:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    29ec:	05 c0       	rjmp	.+10     	; 0x29f8 <ieee802_15_4_data_process_ack+0x4e>
    } else {
        tat_reset();
    29ee:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <tat_reset>
        (bool)tat_set_state(RX_AACK_ON);
    29f2:	86 e1       	ldi	r24, 0x16	; 22
    29f4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    }
    
    /* Set back the state to either MAC_ASSOCIATED or MAC_STATRTED. */
    IEEE802_15_4_SET_STATE(original_mac_state);
    29f8:	8f b7       	in	r24, 0x3f	; 63
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	f8 94       	cli
    29fe:	80 91 b6 02 	lds	r24, 0x02B6
    2a02:	80 93 09 01 	sts	0x0109, r24
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	8f bf       	out	0x3f, r24	; 63
}
    2a0a:	0f 90       	pop	r0
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	08 95       	ret

00002a12 <ieee802_15_4_process_data_indication>:


void ieee802_15_4_process_data_indication(void *mdi_frame_info) {
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	8c 01       	movw	r16, r24
    /* Cast the received pointer back to a vrt_packet. */
    ieee802_15_4_meta_data_t *ind_information = (ieee802_15_4_meta_data_t *)mdi_frame_info;
    
    /* Build MCPS_DATA.indication: Allocate memory to build on. */
    mcps_data_ind_t *indication = (mcps_data_ind_t *)MEM_ALLOC_ARRAY(uint8_t, sizeof (mcps_data_ind_t) + (ind_information->msdu_length));
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	46 96       	adiw	r24, 0x16	; 22
    2a24:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    2a28:	ec 01       	movw	r28, r24
    
    if (NULL == indication) {
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	79 f4       	brne	.+30     	; 0x2a4c <ieee802_15_4_process_data_indication+0x3a>
    2a2e:	f5 e3       	ldi	r31, 0x35	; 53
    2a30:	fa 95       	dec	r31
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <ieee802_15_4_process_data_indication+0x1e>
    2a34:	00 00       	nop
        /* Go back to RX_AACK_ON if it was not possible to allocate memory, but first
         * wait for the PLL_ON state to be entered.
         */
        do {
            delay_us(20);
        } while (CMD_PLL_ON != tat_get_state());
    2a36:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <tat_get_state>
    2a3a:	89 30       	cpi	r24, 0x09	; 9
    2a3c:	c1 f7       	brne	.-16     	; 0x2a2e <ieee802_15_4_process_data_indication+0x1c>
        
        (bool)tat_set_state(RX_AACK_ON);
    2a3e:	86 e1       	ldi	r24, 0x16	; 22
            delay_us(20);
        } while (CMD_PLL_ON != tat_get_state());
        
        (bool)tat_set_state(RX_AACK_ON);
    }
}
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
         */
        do {
            delay_us(20);
        } while (CMD_PLL_ON != tat_get_state());
        
        (bool)tat_set_state(RX_AACK_ON);
    2a48:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <tat_set_state>
        
        return;
    }
    
    /* Set source addressing items. */
    indication->SrcAddrMode = ind_information->src_addr_mode;
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	85 85       	ldd	r24, Z+13	; 0x0d
    2a50:	88 83       	st	Y, r24
    indication->SrcAddr = 0;
    2a52:	19 82       	std	Y+1, r1	; 0x01
    2a54:	1a 82       	std	Y+2, r1	; 0x02
    2a56:	1b 82       	std	Y+3, r1	; 0x03
    2a58:	1c 82       	std	Y+4, r1	; 0x04
    2a5a:	1d 82       	std	Y+5, r1	; 0x05
    2a5c:	1e 82       	std	Y+6, r1	; 0x06
    2a5e:	1f 82       	std	Y+7, r1	; 0x07
    2a60:	18 86       	std	Y+8, r1	; 0x08
    if (FCF_LONG_ADDR== (indication->SrcAddrMode)) {
    2a62:	83 30       	cpi	r24, 0x03	; 3
    2a64:	49 f4       	brne	.+18     	; 0x2a78 <ieee802_15_4_process_data_indication+0x66>
        memcpy((void *)(&(indication->SrcAddr)), (void *)(&(ind_information->src_addr)), sizeof(uint64_t));
    2a66:	88 e0       	ldi	r24, 0x08	; 8
    2a68:	70 96       	adiw	r30, 0x10	; 16
    2a6a:	de 01       	movw	r26, r28
    2a6c:	11 96       	adiw	r26, 0x01	; 1
    2a6e:	01 90       	ld	r0, Z+
    2a70:	0d 92       	st	X+, r0
    2a72:	8a 95       	dec	r24
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <ieee802_15_4_process_data_indication+0x5c>
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <ieee802_15_4_process_data_indication+0x70>
    } else {
        memcpy((void *)(&(indication->SrcAddr)), (void *)(&(ind_information->src_addr)), sizeof(uint16_t));
    2a78:	f8 01       	movw	r30, r16
    2a7a:	80 89       	ldd	r24, Z+16	; 0x10
    2a7c:	91 89       	ldd	r25, Z+17	; 0x11
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    }
    
    /* Set PAN ID. */
    memcpy((void *)(&(ind_information->dst_pan_id)), (void *)(&(indication->DstPANId)), sizeof(uint16_t));
    2a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a86:	f8 01       	movw	r30, r16
    2a88:	94 83       	std	Z+4, r25	; 0x04
    2a8a:	83 83       	std	Z+3, r24	; 0x03
    
    /* Set destination addressing items. */
    indication->DstAddrMode = ind_information->dst_addr_mode;
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	89 87       	std	Y+9, r24	; 0x09
    indication->DstAddr = 0;
    2a90:	1c 86       	std	Y+12, r1	; 0x0c
    2a92:	1d 86       	std	Y+13, r1	; 0x0d
    2a94:	1e 86       	std	Y+14, r1	; 0x0e
    2a96:	1f 86       	std	Y+15, r1	; 0x0f
    2a98:	18 8a       	std	Y+16, r1	; 0x10
    2a9a:	19 8a       	std	Y+17, r1	; 0x11
    2a9c:	1a 8a       	std	Y+18, r1	; 0x12
    2a9e:	1b 8a       	std	Y+19, r1	; 0x13
    if (FCF_LONG_ADDR== (indication->DstAddrMode)) {
    2aa0:	83 30       	cpi	r24, 0x03	; 3
    2aa2:	49 f4       	brne	.+18     	; 0x2ab6 <ieee802_15_4_process_data_indication+0xa4>
        memcpy((void *)(&(indication->DstAddr)), (void *)(&(ind_information->dst_addr)), sizeof(uint64_t));
    2aa4:	88 e0       	ldi	r24, 0x08	; 8
    2aa6:	35 96       	adiw	r30, 0x05	; 5
    2aa8:	de 01       	movw	r26, r28
    2aaa:	1c 96       	adiw	r26, 0x0c	; 12
    2aac:	01 90       	ld	r0, Z+
    2aae:	0d 92       	st	X+, r0
    2ab0:	8a 95       	dec	r24
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <ieee802_15_4_process_data_indication+0x9a>
    2ab4:	05 c0       	rjmp	.+10     	; 0x2ac0 <ieee802_15_4_process_data_indication+0xae>
    } else {
        memcpy((void *)(&(indication->DstAddr)), (void *)(&(ind_information->dst_addr)), sizeof(uint16_t));
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	85 81       	ldd	r24, Z+5	; 0x05
    2aba:	96 81       	ldd	r25, Z+6	; 0x06
    2abc:	9d 87       	std	Y+13, r25	; 0x0d
    2abe:	8c 87       	std	Y+12, r24	; 0x0c
    }
    
    /* Set the msdu fields. */
    indication->mpduLinkQuality = ind_information->lqi;
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ac4:	8c 8b       	std	Y+20, r24	; 0x14
    indication->msduLength      = ind_information->msdu_length;
    2ac6:	83 8d       	ldd	r24, Z+27	; 0x1b
    2ac8:	8d 8b       	std	Y+21, r24	; 0x15
    memcpy((void *)(indication->msdu), (void *)(ind_information->msdu), ind_information->msdu_length);
    2aca:	43 8d       	ldd	r20, Z+27	; 0x1b
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	61 8d       	ldd	r22, Z+25	; 0x19
    2ad0:	72 8d       	ldd	r23, Z+26	; 0x1a
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	46 96       	adiw	r24, 0x16	; 22
    2ad6:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    
    /* Post indication event. */
    if (true != vrt_post_event(ieee802_15_4_data_indication_do_callback, (void *)indication)) {
    2ada:	be 01       	movw	r22, r28
    2adc:	83 ea       	ldi	r24, 0xA3	; 163
    2ade:	93 e1       	ldi	r25, 0x13	; 19
    2ae0:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	0c c0       	rjmp	.+24     	; 0x2b00 <ieee802_15_4_process_data_indication+0xee>
        /* Free up allocated memory. */
        MEM_FREE(indication);
    2ae8:	ce 01       	movw	r24, r28
    2aea:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
    2aee:	f5 e3       	ldi	r31, 0x35	; 53
    2af0:	fa 95       	dec	r31
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <ieee802_15_4_process_data_indication+0xde>
    2af4:	00 00       	nop
        /* Go back to RX_AACK_ON if it was not possible to post the event handler, but first
         * wait for the PLL_ON state to be entered.
         */
        do {
            delay_us(20);
        } while (CMD_PLL_ON != tat_get_state());
    2af6:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <tat_get_state>
    2afa:	89 30       	cpi	r24, 0x09	; 9
    2afc:	c1 f7       	brne	.-16     	; 0x2aee <ieee802_15_4_process_data_indication+0xdc>
    2afe:	9f cf       	rjmp	.-194    	; 0x2a3e <ieee802_15_4_process_data_indication+0x2c>
        
        (bool)tat_set_state(RX_AACK_ON);
    }
}
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	08 95       	ret

00002b0a <ieee802_15_4_disassociate_request>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_disassociate_request(mlme_disassociate_req_t* mdr) {
    2b0a:	2f 92       	push	r2
    2b0c:	3f 92       	push	r3
    2b0e:	4f 92       	push	r4
    2b10:	5f 92       	push	r5
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	1f 92       	push	r1
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	4c 01       	movw	r8, r24
    /* Check if it is possible to execute this primitive from the given internal 
     * state. A device must be associated before it can disassociate itself, and 
     * a  PAN coordinator must be started before it can force one of its children
     * to disassociate.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
    2b36:	80 91 09 01 	lds	r24, 0x0109
    2b3a:	84 50       	subi	r24, 0x04	; 4
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	08 f0       	brcs	.+2      	; 0x2b42 <ieee802_15_4_disassociate_request+0x38>
    2b40:	be c0       	rjmp	.+380    	; 0x2cbe <ieee802_15_4_disassociate_request+0x1b4>
        
        return false;
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == (mdr->mlme_disassociate_confirm)) {
    2b42:	f4 01       	movw	r30, r8
    2b44:	81 85       	ldd	r24, Z+9	; 0x09
    2b46:	92 85       	ldd	r25, Z+10	; 0x0a
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <ieee802_15_4_disassociate_request+0x44>
    2b4c:	b8 c0       	rjmp	.+368    	; 0x2cbe <ieee802_15_4_disassociate_request+0x1b4>
    
    // 1. Request some memory to build the disassociation request frame.
    uint8_t* disassociation_request  = IEEE802_15_4_GET_TX_BUFFER();
    
    /* Store some internal variables. */
    mac_param.disassociate.mlme_disassociate_confirm = mdr->mlme_disassociate_confirm;
    2b4e:	90 93 16 11 	sts	0x1116, r25
    2b52:	80 93 15 11 	sts	0x1115, r24
    mac_param.disassociate.mdc = &(mdr->mdc);
    2b56:	c4 01       	movw	r24, r8
    2b58:	0b 96       	adiw	r24, 0x0b	; 11
    2b5a:	90 93 18 11 	sts	0x1118, r25
    2b5e:	80 93 17 11 	sts	0x1117, r24

    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR) |
          FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;

    // Add the Frame Control Field
    disassociation_request[index++] = ((fcf >> 8*0) & 0xFF);
    2b62:	83 e2       	ldi	r24, 0x23	; 35
    2b64:	80 93 3d 11 	sts	0x113D, r24
    disassociation_request[index++] = ((fcf >> 8*1) & 0xFF);
    2b68:	8c ec       	ldi	r24, 0xCC	; 204
    2b6a:	80 93 3e 11 	sts	0x113E, r24

    // 3. Add the DSN.
    disassociation_request[index++] = IEEE802_15_4_GET_DSN();
    2b6e:	80 91 bf 11 	lds	r24, 0x11BF
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	98 0f       	add	r25, r24
    2b76:	90 93 bf 11 	sts	0x11BF, r25
    2b7a:	80 93 3f 11 	sts	0x113F, r24

    // 4. Add destination PAN ID.
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID()) >> 8*0) & 0xFF;
    2b7e:	90 91 c5 11 	lds	r25, 0x11C5
    2b82:	80 91 c6 11 	lds	r24, 0x11C6
    2b86:	90 93 40 11 	sts	0x1140, r25
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID()) >> 8*1) & 0xFF;
    2b8a:	80 93 41 11 	sts	0x1141, r24

    // 5. If a coordinator, then destination address is the 64 bit address of 
    //    the device. If a device, then the destination address is 
    //     "macCoordExtendedAddress".
    if ((mdr->DeviceAddress) != IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS()) {
    2b8e:	40 80       	ld	r4, Z
    2b90:	51 80       	ldd	r5, Z+1	; 0x01
    2b92:	62 80       	ldd	r6, Z+2	; 0x02
    2b94:	73 80       	ldd	r7, Z+3	; 0x03
    2b96:	b4 81       	ldd	r27, Z+4	; 0x04
    2b98:	a5 81       	ldd	r26, Z+5	; 0x05
    2b9a:	36 80       	ldd	r3, Z+6	; 0x06
    2b9c:	27 80       	ldd	r2, Z+7	; 0x07
    2b9e:	a0 90 cf 11 	lds	r10, 0x11CF
    2ba2:	b0 90 d0 11 	lds	r11, 0x11D0
    2ba6:	c0 90 d1 11 	lds	r12, 0x11D1
    2baa:	d0 90 d2 11 	lds	r13, 0x11D2
    2bae:	e0 90 d3 11 	lds	r14, 0x11D3
    2bb2:	f0 90 d4 11 	lds	r15, 0x11D4
    2bb6:	00 91 d5 11 	lds	r16, 0x11D5
    2bba:	10 91 d6 11 	lds	r17, 0x11D6
    2bbe:	92 01       	movw	r18, r4
    2bc0:	a3 01       	movw	r20, r6
    2bc2:	6b 2f       	mov	r22, r27
    2bc4:	7a 2f       	mov	r23, r26
    2bc6:	83 2d       	mov	r24, r3
    2bc8:	92 2d       	mov	r25, r2
    2bca:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__cmpdi2>
    2bce:	41 f0       	breq	.+16     	; 0x2be0 <ieee802_15_4_disassociate_request+0xd6>
        memcpy((void *)(&disassociation_request[index]), (void *)(&(mdr->DeviceAddress)), sizeof(uint64_t));
    2bd0:	88 e0       	ldi	r24, 0x08	; 8
    2bd2:	a2 e4       	ldi	r26, 0x42	; 66
    2bd4:	b1 e1       	ldi	r27, 0x11	; 17
    2bd6:	01 90       	ld	r0, Z+
    2bd8:	0d 92       	st	X+, r0
    2bda:	8a 95       	dec	r24
    2bdc:	e1 f7       	brne	.-8      	; 0x2bd6 <ieee802_15_4_disassociate_request+0xcc>
    2bde:	24 c0       	rjmp	.+72     	; 0x2c28 <ieee802_15_4_disassociate_request+0x11e>
        index += sizeof(uint64_t);
    } else {
        memcpy((void *)(&disassociation_request[index]), (void *)(&(IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS())), sizeof(uint64_t));
    2be0:	40 92 42 11 	sts	0x1142, r4
    2be4:	50 92 43 11 	sts	0x1143, r5
    2be8:	60 92 44 11 	sts	0x1144, r6
    2bec:	70 92 45 11 	sts	0x1145, r7
    2bf0:	b0 93 46 11 	sts	0x1146, r27
    2bf4:	a0 93 47 11 	sts	0x1147, r26
    2bf8:	30 92 48 11 	sts	0x1148, r3
    2bfc:	20 92 49 11 	sts	0x1149, r2
        index += sizeof(uint64_t);
        IEEE802_15_4_SET_COORD_EXTENDED_ADDRESS(0);
    2c00:	10 92 cf 11 	sts	0x11CF, r1
    2c04:	10 92 d0 11 	sts	0x11D0, r1
    2c08:	10 92 d1 11 	sts	0x11D1, r1
    2c0c:	10 92 d2 11 	sts	0x11D2, r1
    2c10:	10 92 d3 11 	sts	0x11D3, r1
    2c14:	10 92 d4 11 	sts	0x11D4, r1
    2c18:	10 92 d5 11 	sts	0x11D5, r1
    2c1c:	10 92 d6 11 	sts	0x11D6, r1
        (uint8_t)ieee802_15_4_set_short_address(BROADCAST);
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	9f ef       	ldi	r25, 0xFF	; 255
    2c24:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <ieee802_15_4_set_short_address>
    }

    // 6. Add the source pan id.
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*0) & 0xFF);
    2c28:	90 91 c5 11 	lds	r25, 0x11C5
    2c2c:	80 91 c6 11 	lds	r24, 0x11C6
    2c30:	90 93 4a 11 	sts	0x114A, r25
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*1) & 0xFF);
    2c34:	80 93 4b 11 	sts	0x114B, r24

    // 7. Add the source address, the source address of the device sending the command.
    memcpy((void *)(&disassociation_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    2c38:	80 91 c7 11 	lds	r24, 0x11C7
    2c3c:	80 93 4c 11 	sts	0x114C, r24
    2c40:	80 91 c8 11 	lds	r24, 0x11C8
    2c44:	80 93 4d 11 	sts	0x114D, r24
    2c48:	80 91 c9 11 	lds	r24, 0x11C9
    2c4c:	80 93 4e 11 	sts	0x114E, r24
    2c50:	80 91 ca 11 	lds	r24, 0x11CA
    2c54:	80 93 4f 11 	sts	0x114F, r24
    2c58:	80 91 cb 11 	lds	r24, 0x11CB
    2c5c:	80 93 50 11 	sts	0x1150, r24
    2c60:	80 91 cc 11 	lds	r24, 0x11CC
    2c64:	80 93 51 11 	sts	0x1151, r24
    2c68:	80 91 cd 11 	lds	r24, 0x11CD
    2c6c:	80 93 52 11 	sts	0x1152, r24
    2c70:	80 91 ce 11 	lds	r24, 0x11CE
    2c74:	80 93 53 11 	sts	0x1153, r24
    index += sizeof(uint64_t);
    
    // 8. Add the command frame identifier.
    disassociation_request[index++] = DISASSOCIATIONNOTIFICATION;
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	80 93 54 11 	sts	0x1154, r24

    // 9. Add the disassociation reason code.
    disassociation_request[index++] = mdr->DisassociateReason;
    2c7e:	f4 01       	movw	r30, r8
    2c80:	80 85       	ldd	r24, Z+8	; 0x08
    2c82:	80 93 55 11 	sts	0x1155, r24
    
    // 10. Add two dummy bytes as CRC.
    index += CRC_SIZE;
    
    bool mdr_status = false;
    if (true != ieee802_15_4_send(index, disassociation_request)) {
    2c86:	6d e3       	ldi	r22, 0x3D	; 61
    2c88:	71 e1       	ldi	r23, 0x11	; 17
    2c8a:	8b e1       	ldi	r24, 0x1B	; 27
    2c8c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    2c90:	98 2e       	mov	r9, r24
    2c92:	81 11       	cpse	r24, r1
    2c94:	0b c0       	rjmp	.+22     	; 0x2cac <ieee802_15_4_disassociate_request+0x1a2>
        if (true != IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    2c96:	80 91 bd 11 	lds	r24, 0x11BD
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	03 c0       	rjmp	.+6      	; 0x2ca4 <ieee802_15_4_disassociate_request+0x19a>
            tat_go_to_sleep();
    2c9e:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    2ca2:	0e c0       	rjmp	.+28     	; 0x2cc0 <ieee802_15_4_disassociate_request+0x1b6>
        } else {
            (bool)tat_set_state(RX_AACK_ON);
    2ca4:	86 e1       	ldi	r24, 0x16	; 22
    2ca6:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    2caa:	0a c0       	rjmp	.+20     	; 0x2cc0 <ieee802_15_4_disassociate_request+0x1b6>
        }
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_DISASSOCIATE_WAITING_ACK);
    2cac:	8f b7       	in	r24, 0x3f	; 63
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	f8 94       	cli
    2cb2:	8d e0       	ldi	r24, 0x0D	; 13
    2cb4:	80 93 09 01 	sts	0x0109, r24
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	8f bf       	out	0x3f, r24	; 63
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <ieee802_15_4_disassociate_request+0x1b6>
     * to disassociate.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
        (IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE())) {
        
        return false;
    2cbe:	91 2c       	mov	r9, r1
        IEEE802_15_4_SET_STATE(IEEE_MAC_DISASSOCIATE_WAITING_ACK);
        mdr_status = true;
    } 
    
    return mdr_status;
}
    2cc0:	89 2d       	mov	r24, r9
    2cc2:	0f 90       	pop	r0
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	df 90       	pop	r13
    2cd2:	cf 90       	pop	r12
    2cd4:	bf 90       	pop	r11
    2cd6:	af 90       	pop	r10
    2cd8:	9f 90       	pop	r9
    2cda:	8f 90       	pop	r8
    2cdc:	7f 90       	pop	r7
    2cde:	6f 90       	pop	r6
    2ce0:	5f 90       	pop	r5
    2ce2:	4f 90       	pop	r4
    2ce4:	3f 90       	pop	r3
    2ce6:	2f 90       	pop	r2
    2ce8:	08 95       	ret

00002cea <ieee802_15_4_disassociate_process_ack>:


void ieee802_15_4_disassociate_process_ack(void *tx_status) {
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <ieee802_15_4_disassociate_process_ack+0x6>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    /* Extract status of transmission, for then to set the correct confirm status. */
    uint8_t status = *((uint8_t*)tx_status);
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	80 81       	ld	r24, Z
    2cf8:	e0 91 17 11 	lds	r30, 0x1117
    2cfc:	f0 91 18 11 	lds	r31, 0x1118
    
    if ((TRAC_SUCCESS == status) || (TRAC_SUCCESS_DATA_PENDING == status)) {
    2d00:	82 30       	cpi	r24, 0x02	; 2
    2d02:	10 f4       	brcc	.+4      	; 0x2d08 <ieee802_15_4_disassociate_process_ack+0x1e>
        mac_param.disassociate.mdc->status = MAC_SUCCESS;
    2d04:	10 82       	st	Z, r1
    2d06:	06 c0       	rjmp	.+12     	; 0x2d14 <ieee802_15_4_disassociate_process_ack+0x2a>
    } else if (TRAC_NO_ACK == status) {
    2d08:	85 30       	cpi	r24, 0x05	; 5
    2d0a:	11 f4       	brne	.+4      	; 0x2d10 <ieee802_15_4_disassociate_process_ack+0x26>
        mac_param.disassociate.mdc->status = MAC_NO_ACK;
    2d0c:	89 ee       	ldi	r24, 0xE9	; 233
    2d0e:	01 c0       	rjmp	.+2      	; 0x2d12 <ieee802_15_4_disassociate_process_ack+0x28>
    } else {
        mac_param.disassociate.mdc->status = MAC_CHANNEL_ACCESS_FAILURE;
    2d10:	81 ee       	ldi	r24, 0xE1	; 225
    2d12:	80 83       	st	Z, r24
    }
        
    /* The last transitted frame has been acknowledged. The user is notified 
     * through the callback. 
     */
    mac_param.disassociate.mlme_disassociate_confirm(mac_param.disassociate.mdc);
    2d14:	e0 91 15 11 	lds	r30, 0x1115
    2d18:	f0 91 16 11 	lds	r31, 0x1116
    2d1c:	80 91 17 11 	lds	r24, 0x1117
    2d20:	90 91 18 11 	lds	r25, 0x1118
    2d24:	09 95       	icall
    
    if (true != IEEE802_15_4_GET_I_AM_COORDINATOR()) {
    2d26:	80 91 be 11 	lds	r24, 0x11BE
    2d2a:	81 11       	cpse	r24, r1
    2d2c:	0a c0       	rjmp	.+20     	; 0x2d42 <ieee802_15_4_disassociate_process_ack+0x58>
        tat_go_to_sleep();
    2d2e:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    2d32:	8f b7       	in	r24, 0x3f	; 63
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	f8 94       	cli
    2d38:	10 92 09 01 	sts	0x0109, r1
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	8f bf       	out	0x3f, r24	; 63
    2d40:	0b c0       	rjmp	.+22     	; 0x2d58 <ieee802_15_4_disassociate_process_ack+0x6e>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    2d42:	8f b7       	in	r24, 0x3f	; 63
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	f8 94       	cli
    2d48:	85 e0       	ldi	r24, 0x05	; 5
    2d4a:	80 93 09 01 	sts	0x0109, r24
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	8f bf       	out	0x3f, r24	; 63
        (bool)tat_set_state(RX_AACK_ON);
    2d52:	86 e1       	ldi	r24, 0x16	; 22
    2d54:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    }
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <ieee802_15_4_coord_realign_process_ack>:
    
    return mor_status;
}


void ieee802_15_4_coord_realign_process_ack(void *tx_status) {
    2d62:	0f 93       	push	r16
    2d64:	1f 93       	push	r17
    2d66:	cf 93       	push	r28
    2d68:	df 93       	push	r29
    2d6a:	1f 92       	push	r1
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	8c 01       	movw	r16, r24
    /* Issue MLME_COMM_STATUS.indication. */
    ieee802_15_4_comm_status_indication_t msci_callback = ieee802_15_4_get_mlme_comm_status_indication();
    2d72:	0e 94 43 0c 	call	0x1886	; 0x1886 <ieee802_15_4_get_mlme_comm_status_indication>
    2d76:	fc 01       	movw	r30, r24
    
    if (NULL == msci_callback) { return; }
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	e9 f0       	breq	.+58     	; 0x2db6 <ieee802_15_4_coord_realign_process_ack+0x54>
    
    uint8_t mcsi_status = *((uint8_t*)tx_status);
    2d7c:	d8 01       	movw	r26, r16
    2d7e:	8c 91       	ld	r24, X
    
    if (TRAC_SUCCESS == mcsi_status) {
    2d80:	88 23       	and	r24, r24
    2d82:	49 f0       	breq	.+18     	; 0x2d96 <ieee802_15_4_coord_realign_process_ack+0x34>
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
    2d84:	85 30       	cpi	r24, 0x05	; 5
    2d86:	21 f0       	breq	.+8      	; 0x2d90 <ieee802_15_4_coord_realign_process_ack+0x2e>
        mcsi_status = MAC_NO_ACK;
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
    2d88:	83 30       	cpi	r24, 0x03	; 3
    2d8a:	21 f4       	brne	.+8      	; 0x2d94 <ieee802_15_4_coord_realign_process_ack+0x32>
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    2d8c:	81 ee       	ldi	r24, 0xE1	; 225
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <ieee802_15_4_coord_realign_process_ack+0x34>
    uint8_t mcsi_status = *((uint8_t*)tx_status);
    
    if (TRAC_SUCCESS == mcsi_status) {
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
        mcsi_status = MAC_NO_ACK;
    2d90:	89 ee       	ldi	r24, 0xE9	; 233
    2d92:	01 c0       	rjmp	.+2      	; 0x2d96 <ieee802_15_4_coord_realign_process_ack+0x34>
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    } else {
        mcsi_status = MAC_NO_DATA;
    2d94:	8b ee       	ldi	r24, 0xEB	; 235
    }
    
    mcsi.status = mcsi_status;
    2d96:	80 93 cb 02 	sts	0x02CB, r24
    
    /* Execute callback. */
    msci_callback(&mcsi);
    2d9a:	87 eb       	ldi	r24, 0xB7	; 183
    2d9c:	92 e0       	ldi	r25, 0x02	; 2
    2d9e:	09 95       	icall
    
    /* Set state from TRX_OFF to RX_AACK_ON. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    2da0:	8f b7       	in	r24, 0x3f	; 63
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	f8 94       	cli
    2da6:	85 e0       	ldi	r24, 0x05	; 5
    2da8:	80 93 09 01 	sts	0x0109, r24
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	8f bf       	out	0x3f, r24	; 63
    (bool)tat_set_state(RX_AACK_ON);
    2db0:	86 e1       	ldi	r24, 0x16	; 22
    2db2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
}
    2db6:	0f 90       	pop	r0
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	08 95       	ret

00002dc2 <ieee802_15_4_pib_init>:
bool mac_i_am_coordinator;
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

void ieee802_15_4_pib_init(void) {
    mac_pib_macAssociationPermit          = macAssociationPermit_def;
    2dc2:	10 92 bc 11 	sts	0x11BC, r1
    mac_pib_macCoordExtendedAddress       = 0;
    2dc6:	10 92 cf 11 	sts	0x11CF, r1
    2dca:	10 92 d0 11 	sts	0x11D0, r1
    2dce:	10 92 d1 11 	sts	0x11D1, r1
    2dd2:	10 92 d2 11 	sts	0x11D2, r1
    2dd6:	10 92 d3 11 	sts	0x11D3, r1
    2dda:	10 92 d4 11 	sts	0x11D4, r1
    2dde:	10 92 d5 11 	sts	0x11D5, r1
    2de2:	10 92 d6 11 	sts	0x11D6, r1
    mac_pib_macCoordShortAddress          = macCoordShortAddress_def;
    2de6:	8f ef       	ldi	r24, 0xFF	; 255
    2de8:	9f ef       	ldi	r25, 0xFF	; 255
    2dea:	90 93 c4 11 	sts	0x11C4, r25
    2dee:	80 93 c3 11 	sts	0x11C3, r24
    mac_pib_macDSN                        = ((mac_pib_macExtendedAddress >> 8*0) & 0xFF);
    2df2:	20 91 c7 11 	lds	r18, 0x11C7
    2df6:	20 93 bf 11 	sts	0x11BF, r18
    mac_pib_macPANId                      = macPANId_def;
    2dfa:	90 93 c6 11 	sts	0x11C6, r25
    2dfe:	80 93 c5 11 	sts	0x11C5, r24
    mac_pib_macShortAddress               = macShortAddress_def;
    2e02:	90 93 d8 11 	sts	0x11D8, r25
    2e06:	80 93 d7 11 	sts	0x11D7, r24
    mac_pib_macRxOnWhenIdle               = macRxOnWhenIdle_def;
    2e0a:	10 92 bd 11 	sts	0x11BD, r1
    mac_pib_macTransactionPersistenceTime = macTransactionPersistenceTime_def;
    2e0e:	84 ef       	ldi	r24, 0xF4	; 244
    2e10:	91 e0       	ldi	r25, 0x01	; 1
    2e12:	90 93 c1 11 	sts	0x11C1, r25
    2e16:	80 93 c0 11 	sts	0x11C0, r24
    mac_pib_current_channel               = 11;
    2e1a:	8b e0       	ldi	r24, 0x0B	; 11
    2e1c:	80 93 c2 11 	sts	0x11C2, r24
    mac_pib_macAssociationPermit          = macAssociationPermit_def;
    mac_i_am_coordinator                  = false;
    2e20:	10 92 be 11 	sts	0x11BE, r1
    2e24:	08 95       	ret

00002e26 <ieee802_15_4_set_pan_id>:
}


uint8_t ieee802_15_4_set_pan_id(uint16_t pan_id) {
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	ec 01       	movw	r28, r24
    uint8_t set_pan_id_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2e2c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    2e30:	88 23       	and	r24, r24
    2e32:	49 f0       	breq	.+18     	; 0x2e46 <ieee802_15_4_set_pan_id+0x20>
    } else {
        mac_pib_macPANId = pan_id;
    2e34:	d0 93 c6 11 	sts	0x11C6, r29
    2e38:	c0 93 c5 11 	sts	0x11C5, r28
        tat_set_pan_id(mac_pib_macPANId);
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <tat_set_pan_id>
        set_pan_id_status = MAC_SUCCESS;
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <ieee802_15_4_set_pan_id+0x22>
    mac_i_am_coordinator                  = false;
}


uint8_t ieee802_15_4_set_pan_id(uint16_t pan_id) {
    uint8_t set_pan_id_status = MAC_INVALID_PARAMETER;
    2e46:	88 ee       	ldi	r24, 0xE8	; 232
        tat_set_pan_id(mac_pib_macPANId);
        set_pan_id_status = MAC_SUCCESS;
    }
    
    return set_pan_id_status;
}
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	08 95       	ret

00002e4e <ieee802_15_4_set_short_address>:


uint8_t ieee802_15_4_set_short_address(uint16_t short_address) {
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	ec 01       	movw	r28, r24
    uint8_t set_short_address_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2e54:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    2e58:	88 23       	and	r24, r24
    2e5a:	49 f0       	breq	.+18     	; 0x2e6e <ieee802_15_4_set_short_address+0x20>
    } else {
        mac_pib_macShortAddress = short_address;
    2e5c:	d0 93 d8 11 	sts	0x11D8, r29
    2e60:	c0 93 d7 11 	sts	0x11D7, r28
        tat_set_short_address(mac_pib_macShortAddress);
    2e64:	ce 01       	movw	r24, r28
    2e66:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <tat_set_short_address>
        set_short_address_status = MAC_SUCCESS;
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	01 c0       	rjmp	.+2      	; 0x2e70 <ieee802_15_4_set_short_address+0x22>
    return set_pan_id_status;
}


uint8_t ieee802_15_4_set_short_address(uint16_t short_address) {
    uint8_t set_short_address_status = MAC_INVALID_PARAMETER;
    2e6e:	88 ee       	ldi	r24, 0xE8	; 232
        tat_set_short_address(mac_pib_macShortAddress);
        set_short_address_status = MAC_SUCCESS;
    }
    
    return set_short_address_status;
}
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	08 95       	ret

00002e76 <ieee802_15_4_set_channel>:


uint8_t ieee802_15_4_set_channel(uint8_t channel) {
    2e76:	cf 93       	push	r28
    2e78:	c8 2f       	mov	r28, r24
    uint8_t set_channel_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2e7a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    2e7e:	81 11       	cpse	r24, r1
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <ieee802_15_4_set_channel+0x10>
    return set_short_address_status;
}


uint8_t ieee802_15_4_set_channel(uint8_t channel) {
    uint8_t set_channel_status = MAC_INVALID_PARAMETER;
    2e82:	88 ee       	ldi	r24, 0xE8	; 232
    2e84:	08 c0       	rjmp	.+16     	; 0x2e96 <ieee802_15_4_set_channel+0x20>
    
    if (true != tat_wake_up()) {
    } else if (true != tat_set_channel(channel)) {
    2e86:	8c 2f       	mov	r24, r28
    2e88:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <tat_set_channel>
    2e8c:	88 23       	and	r24, r24
    2e8e:	c9 f3       	breq	.-14     	; 0x2e82 <ieee802_15_4_set_channel+0xc>
    } else {
        mac_pib_current_channel = channel;
    2e90:	c0 93 c2 11 	sts	0x11C2, r28
        set_channel_status = MAC_SUCCESS;
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    return set_channel_status;
}
    2e96:	cf 91       	pop	r28
    2e98:	08 95       	ret

00002e9a <ieee802_15_4_reset>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_reset(bool set_default_pib) {
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	1f 92       	push	r1
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	18 2f       	mov	r17, r24
    
    /* Reset the MAC's internal state. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    2ea8:	8f b7       	in	r24, 0x3f	; 63
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	f8 94       	cli
    2eae:	10 92 09 01 	sts	0x0109, r1
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	8f bf       	out	0x3f, r24	; 63
    
    uint8_t reset_status = false;
    if (true != tat_init()) {
    2eb6:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <tat_init>
    2eba:	81 11       	cpse	r24, r1
    2ebc:	04 c0       	rjmp	.+8      	; 0x2ec6 <ieee802_15_4_reset+0x2c>
        tat_deinit();
    2ebe:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <tat_deinit>
bool ieee802_15_4_reset(bool set_default_pib) {
    
    /* Reset the MAC's internal state. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    
    uint8_t reset_status = false;
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	34 c0       	rjmp	.+104    	; 0x2f2e <ieee802_15_4_reset+0x94>
    if (true != tat_init()) {
        tat_deinit();
    } else{
        
        /* Reset the PIBs if requested. */
        if (true == set_default_pib) {
    2ec6:	11 11       	cpse	r17, r1
            ieee802_15_4_pib_init();
    2ec8:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <ieee802_15_4_pib_init>
        }
        
        /* Reset callback TAT callback handlers. */
        tat_set_tx_callback_handler(ieee802_15_4_send_ack_event_handler);
    2ecc:	84 ea       	ldi	r24, 0xA4	; 164
    2ece:	9d e0       	ldi	r25, 0x0D	; 13
    2ed0:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <tat_set_tx_callback_handler>
        tat_set_rx_callback_handler(ieee802_15_4_pd_data_indication);
    2ed4:	83 e8       	ldi	r24, 0x83	; 131
    2ed6:	9c e0       	ldi	r25, 0x0C	; 12
    2ed8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <tat_set_rx_callback_handler>
        
        /* Configure the radio transceiver; CMSA and frame filer. */
        rf230_subregister_write(SR_MIN_BE, macMinBE_def);
    2edc:	23 e0       	ldi	r18, 0x03	; 3
    2ede:	46 e0       	ldi	r20, 0x06	; 6
    2ee0:	60 ec       	ldi	r22, 0xC0	; 192
    2ee2:	8e e2       	ldi	r24, 0x2E	; 46
    2ee4:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_subregister_write(SR_MAX_CSMA_RETRIES, macMaxCSMABackoffs_def);
    2ee8:	24 e0       	ldi	r18, 0x04	; 4
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	6e e0       	ldi	r22, 0x0E	; 14
    2eee:	8c e2       	ldi	r24, 0x2C	; 44
    2ef0:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_subregister_write(SR_MAX_FRAME_RETRIES, aMaxFrameRetries);
    2ef4:	23 e0       	ldi	r18, 0x03	; 3
    2ef6:	44 e0       	ldi	r20, 0x04	; 4
    2ef8:	60 ef       	ldi	r22, 0xF0	; 240
    2efa:	8c e2       	ldi	r24, 0x2C	; 44
    2efc:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        
        tat_set_ieee_address((uint8_t *)(&IEEE802_15_4_GET_EXTENDED_ADDRESS()));
    2f00:	87 ec       	ldi	r24, 0xC7	; 199
    2f02:	91 e1       	ldi	r25, 0x11	; 17
    2f04:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <tat_set_ieee_address>
        tat_set_short_address(IEEE802_15_4_GET_SHORT_ADDRESS());
    2f08:	80 91 d7 11 	lds	r24, 0x11D7
    2f0c:	90 91 d8 11 	lds	r25, 0x11D8
    2f10:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <tat_set_short_address>
        tat_set_pan_id(IEEE802_15_4_GET_PAN_ID());
    2f14:	80 91 c5 11 	lds	r24, 0x11C5
    2f18:	90 91 c6 11 	lds	r25, 0x11C6
    2f1c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <tat_set_pan_id>
        
        /* Go to sleep if configured to do so. Otherwise the radio transceiver will
         * stay in TRX_OFF state.
         */
        if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    2f20:	80 91 bd 11 	lds	r24, 0x11BD
    2f24:	81 11       	cpse	r24, r1
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <ieee802_15_4_reset+0x92>
            tat_go_to_sleep();
    2f28:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
        }
        
        reset_status = true;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    return reset_status;
}
    2f2e:	0f 90       	pop	r0
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	08 95       	ret

00002f38 <ieee802_15_4_rx_enable>:

uint8_t ieee802_15_4_rx_enable(void) {
    /* Check first that the MAC is in a state where it is possible to send
     * data. A coordinator must be started and a router or device must be associated.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
    2f38:	80 91 09 01 	lds	r24, 0x0109
    2f3c:	84 50       	subi	r24, 0x04	; 4
    2f3e:	82 30       	cpi	r24, 0x02	; 2
    2f40:	78 f4       	brcc	.+30     	; 0x2f60 <ieee802_15_4_rx_enable+0x28>
        return MAC_INVALID_PARAMETER;
    }
    
    uint8_t rx_enable_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2f42:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    2f46:	88 23       	and	r24, r24
    2f48:	59 f0       	breq	.+22     	; 0x2f60 <ieee802_15_4_rx_enable+0x28>
    } else if (true != tat_set_state(RX_AACK_ON)) {
    2f4a:	86 e1       	ldi	r24, 0x16	; 22
    2f4c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    2f50:	81 11       	cpse	r24, r1
    2f52:	08 c0       	rjmp	.+16     	; 0x2f64 <ieee802_15_4_rx_enable+0x2c>
        if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    2f54:	80 91 bd 11 	lds	r24, 0x11BD
    2f58:	81 11       	cpse	r24, r1
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <ieee802_15_4_rx_enable+0x28>
            tat_go_to_sleep();
    2f5c:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
        (IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE())) {
        return MAC_INVALID_PARAMETER;
    }
    
    uint8_t rx_enable_status = MAC_INVALID_PARAMETER;
    2f60:	88 ee       	ldi	r24, 0xE8	; 232
    2f62:	08 95       	ret
    } else if (true != tat_set_state(RX_AACK_ON)) {
        if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
            tat_go_to_sleep();
        }
    } else {
        rx_enable_status = MAC_SUCCESS;
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    return rx_enable_status;
}
    2f66:	08 95       	ret

00002f68 <ieee802_15_4_scan_do_confirm>:
     */
    scan_time_elapsed_callback(NULL);
}


void ieee802_15_4_scan_do_confirm(void *msc) {
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	1f 92       	push	r1
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	8c 01       	movw	r16, r24
    /* The radio transceiver will be in TRX_OFF when it arrives here. Put back 
     * the stored PAN ID and go to sleep.
     */
    ieee802_15_4_set_pan_id(mac_param.scan.saved_pan_id);
    2f78:	80 91 19 11 	lds	r24, 0x1119
    2f7c:	90 91 1a 11 	lds	r25, 0x111A
    2f80:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
    
    /* Verify that the pointer is valid. */
    if (NULL == msc) { return; }
    2f84:	01 15       	cp	r16, r1
    2f86:	11 05       	cpc	r17, r1
    2f88:	69 f0       	breq	.+26     	; 0x2fa4 <ieee802_15_4_scan_do_confirm+0x3c>
    
    /* Execute the callback. */
    mac_param.scan.mlme_scan_confirm((mlme_scan_conf_t *)msc);
    2f8a:	e0 91 1b 11 	lds	r30, 0x111B
    2f8e:	f0 91 1c 11 	lds	r31, 0x111C
    2f92:	c8 01       	movw	r24, r16
    2f94:	09 95       	icall
    
    /* Set the internal state back to IDLE. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    2f96:	8f b7       	in	r24, 0x3f	; 63
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	f8 94       	cli
    2f9c:	10 92 09 01 	sts	0x0109, r1
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	8f bf       	out	0x3f, r24	; 63
}
    2fa4:	0f 90       	pop	r0
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <scan_time_elapsed_callback>:
/*                          Callbacks                                         */


static void scan_time_elapsed_callback(void *null) {
    /* Take the radio transceiver to sleep. */
    tat_go_to_sleep();
    2fb0:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    
    /* Check if it is possible to post event. */
    if (0 == VRT_GET_ITEMS_FREE()) {
    2fb4:	30 91 33 12 	lds	r19, 0x1233
    2fb8:	31 11       	cpse	r19, r1
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <scan_time_elapsed_callback+0x18>
        VRT_EVENT_MISSED();
    2fbc:	80 91 32 12 	lds	r24, 0x1232
    2fc0:	8f 5f       	subi	r24, 0xFF	; 255
    2fc2:	80 93 32 12 	sts	0x1232, r24
    2fc6:	08 95       	ret
        return;
    }
    
    mlme_scan_conf_t *msc = (mlme_scan_conf_t *)mac_param.scan.msc;
    2fc8:	a0 91 1d 11 	lds	r26, 0x111D
    2fcc:	b0 91 1e 11 	lds	r27, 0x111E
       
    if (0 == msc->ResultListSize) {
    2fd0:	12 96       	adiw	r26, 0x02	; 2
    2fd2:	8c 91       	ld	r24, X
    2fd4:	12 97       	sbiw	r26, 0x02	; 2
    2fd6:	81 11       	cpse	r24, r1
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <scan_time_elapsed_callback+0x30>
        msc->status = MAC_NO_BEACON;
    2fda:	8a ee       	ldi	r24, 0xEA	; 234
    2fdc:	8c 93       	st	X, r24
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <scan_time_elapsed_callback+0x32>
    } else {
        msc->status = MAC_SUCCESS;
    2fe0:	1c 92       	st	X, r1
    }
    
    /* Post event. */
    vrt_quick_post_event(ieee802_15_4_scan_do_confirm, (void *)msc);
    2fe2:	20 91 e1 11 	lds	r18, 0x11E1
    2fe6:	84 e0       	ldi	r24, 0x04	; 4
    2fe8:	28 9f       	mul	r18, r24
    2fea:	f0 01       	movw	r30, r0
    2fec:	11 24       	eor	r1, r1
    2fee:	ee 51       	subi	r30, 0x1E	; 30
    2ff0:	fe 4e       	sbci	r31, 0xEE	; 238
    2ff2:	84 eb       	ldi	r24, 0xB4	; 180
    2ff4:	97 e1       	ldi	r25, 0x17	; 23
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	80 83       	st	Z, r24
    2ffa:	b3 83       	std	Z+3, r27	; 0x03
    2ffc:	a2 83       	std	Z+2, r26	; 0x02
    2ffe:	23 31       	cpi	r18, 0x13	; 19
    3000:	19 f4       	brne	.+6      	; 0x3008 <scan_time_elapsed_callback+0x58>
    3002:	10 92 e1 11 	sts	0x11E1, r1
    3006:	03 c0       	rjmp	.+6      	; 0x300e <scan_time_elapsed_callback+0x5e>
    3008:	2f 5f       	subi	r18, 0xFF	; 255
    300a:	20 93 e1 11 	sts	0x11E1, r18
    300e:	31 50       	subi	r19, 0x01	; 1
    3010:	30 93 33 12 	sts	0x1233, r19
    3014:	80 91 e0 11 	lds	r24, 0x11E0
    3018:	8f 5f       	subi	r24, 0xFF	; 255
    301a:	80 93 e0 11 	sts	0x11E0, r24
    301e:	08 95       	ret

00003020 <ieee802_15_4_scan_request>:
 *  \param[in] ScanDuration Length of the scan in symbols.
 */
static bool do_orphan_scan(uint8_t ScanDuration);


bool ieee802_15_4_scan_request(mlme_scan_req_t* msr) {
    3020:	df 92       	push	r13
    3022:	ef 92       	push	r14
    3024:	ff 92       	push	r15
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	00 d0       	rcall	.+0      	; 0x3030 <ieee802_15_4_scan_request+0x10>
    3030:	1f 92       	push	r1
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	8c 01       	movw	r16, r24
    /* This primitive can only be executed with the IEEE 802.15.4 MAC's internal 
     * state.
     */
    if (IEEE_MAC_IDLE != IEEE802_15_4_GET_STATE()) { return false; }
    3038:	80 91 09 01 	lds	r24, 0x0109
    303c:	81 11       	cpse	r24, r1
    303e:	14 c0       	rjmp	.+40     	; 0x3068 <ieee802_15_4_scan_request+0x48>
    
    /* Perform sanity check on supplied set of parameters. */
    if (NULL == msr) { return false; }
    3040:	01 15       	cp	r16, r1
    3042:	11 05       	cpc	r17, r1
    3044:	89 f0       	breq	.+34     	; 0x3068 <ieee802_15_4_scan_request+0x48>
    if (NULL == (msr->mlme_scan_confirm)) { return false; }
    3046:	f8 01       	movw	r30, r16
    3048:	83 81       	ldd	r24, Z+3	; 0x03
    304a:	94 81       	ldd	r25, Z+4	; 0x04
    304c:	89 2b       	or	r24, r25
    304e:	61 f0       	breq	.+24     	; 0x3068 <ieee802_15_4_scan_request+0x48>
    
    uint8_t scan_type = msr->ScanType;
    3050:	f0 80       	ld	r15, Z
    uint8_t scan_duration = msr->ScanDuration;
    3052:	e2 80       	ldd	r14, Z+2	; 0x02
    uint8_t scan_channel = msr->ScanChannel;
    3054:	d1 80       	ldd	r13, Z+1	; 0x01
    
    if (scan_duration > BEACON_NETWORK_MAX_BO)  { return false; }
    3056:	fe e0       	ldi	r31, 0x0E	; 14
    3058:	fe 15       	cp	r31, r14
    305a:	30 f0       	brcs	.+12     	; 0x3068 <ieee802_15_4_scan_request+0x48>
    
    /* Try to wake up the device and take it to TRX_OFF. */
    if (true != tat_wake_up()) {
    305c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    3060:	81 11       	cpse	r24, r1
    3062:	04 c0       	rjmp	.+8      	; 0x306c <ieee802_15_4_scan_request+0x4c>
        tat_go_to_sleep();
    3064:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
        return false;
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	1a c1       	rjmp	.+564    	; 0x32a0 <ieee802_15_4_scan_request+0x280>
    }
    
    /* Try to set the selected channel. */    
    if (MAC_SUCCESS != ieee802_15_4_set_channel(scan_channel)) {
    306c:	8d 2d       	mov	r24, r13
    306e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <ieee802_15_4_set_channel>
    3072:	81 11       	cpse	r24, r1
    3074:	f7 cf       	rjmp	.-18     	; 0x3064 <ieee802_15_4_scan_request+0x44>
    }
    
    /* Set callback and storage pointer before proceeding. These parameters are
     * stored in the internal IEEE 802.15.4 MAC storgae container (mac_param).
     */
    mac_param.scan.mlme_scan_confirm = msr->mlme_scan_confirm;
    3076:	f8 01       	movw	r30, r16
    3078:	83 81       	ldd	r24, Z+3	; 0x03
    307a:	94 81       	ldd	r25, Z+4	; 0x04
    307c:	90 93 1c 11 	sts	0x111C, r25
    3080:	80 93 1b 11 	sts	0x111B, r24
    mac_param.scan.msc = &(msr->msc);
    3084:	0b 5f       	subi	r16, 0xFB	; 251
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	10 93 1e 11 	sts	0x111E, r17
    308c:	00 93 1d 11 	sts	0x111D, r16
    
    bool msr_status = false;
    
    
    if (MLME_SCAN_TYPE_ED == scan_type) {
    3090:	ff 20       	and	r15, r15
    3092:	51 f3       	breq	.-44     	; 0x3068 <ieee802_15_4_scan_request+0x48>
        /* ED scan not supported at the moment. */
    } else if (MLME_SCAN_TYPE_ACTIVE == scan_type) {
    3094:	f1 e0       	ldi	r31, 0x01	; 1
    3096:	ff 12       	cpse	r15, r31
    3098:	54 c0       	rjmp	.+168    	; 0x3142 <ieee802_15_4_scan_request+0x122>
static bool do_active_scan(uint8_t ScanDuration) {
    /* Try to allocate some memory to build the Beacon Request commando on. */
    uint8_t* beacon_request = IEEE802_15_4_GET_TX_BUFFER();

    /* Calculate scan duration in symbols. */
    mac_param.scan.scan_time = (1 << ScanDuration) + 1;
    309a:	a1 e0       	ldi	r26, 0x01	; 1
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <ieee802_15_4_scan_request+0x84>
    30a0:	aa 0f       	add	r26, r26
    30a2:	bb 1f       	adc	r27, r27
    30a4:	ea 94       	dec	r14
    30a6:	e2 f7       	brpl	.-8      	; 0x30a0 <ieee802_15_4_scan_request+0x80>
    30a8:	11 96       	adiw	r26, 0x01	; 1
    mac_param.scan.scan_time *= aBaseSuperframeDuration;
    30aa:	20 ec       	ldi	r18, 0xC0	; 192
    30ac:	33 e0       	ldi	r19, 0x03	; 3
    30ae:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <__usmulhisi3>
    30b2:	60 93 15 11 	sts	0x1115, r22
    30b6:	70 93 16 11 	sts	0x1116, r23
    30ba:	80 93 17 11 	sts	0x1117, r24
    30be:	90 93 18 11 	sts	0x1118, r25
    
    /* Store current PAN_ID as specified in the IEEE802.15.4 standard. */
    mac_param.scan.saved_pan_id = IEEE802_15_4_GET_PAN_ID();
    30c2:	80 91 c5 11 	lds	r24, 0x11C5
    30c6:	90 91 c6 11 	lds	r25, 0x11C6
    30ca:	90 93 1a 11 	sts	0x111A, r25
    30ce:	80 93 19 11 	sts	0x1119, r24
    uint16_t fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) |
                   FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR)   |
                   FCF_SET_SOURCE_ADDR_MODE(FCF_NO_ADDR);

    uint8_t index = 0;
    beacon_request[index++] = ((fcf >> 8*0) & 0xFF);
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	80 93 3d 11 	sts	0x113D, r24
    beacon_request[index++] = ((fcf >> 8*1) & 0xFF);
    30d8:	88 e0       	ldi	r24, 0x08	; 8
    30da:	80 93 3e 11 	sts	0x113E, r24

    /* sequence number */
    beacon_request[index++] = IEEE802_15_4_GET_DSN();
    30de:	80 91 bf 11 	lds	r24, 0x11BF
    30e2:	91 e0       	ldi	r25, 0x01	; 1
    30e4:	98 0f       	add	r25, r24
    30e6:	90 93 bf 11 	sts	0x11BF, r25
    30ea:	80 93 3f 11 	sts	0x113F, r24

    /* dst PANid */
    beacon_request[index++] = 0xFF;
    30ee:	8f ef       	ldi	r24, 0xFF	; 255
    30f0:	80 93 40 11 	sts	0x1140, r24
    beacon_request[index++] = 0xFF;
    30f4:	80 93 41 11 	sts	0x1141, r24

    /* dst address */
    beacon_request[index++] = 0xFF;
    30f8:	80 93 42 11 	sts	0x1142, r24
    beacon_request[index++] = 0xFF;
    30fc:	80 93 43 11 	sts	0x1143, r24
    
    beacon_request[index++] = BEACONREQUEST;
    3100:	87 e0       	ldi	r24, 0x07	; 7
    3102:	80 93 44 11 	sts	0x1144, r24
    bool masr_status = false;
    
    /* The radio transceiver will be in TRX_OFF state here and with the channel
     * set correctly.
     */
    if (MAC_SUCCESS != ieee802_15_4_set_pan_id(BROADCAST)) {
    3106:	8f ef       	ldi	r24, 0xFF	; 255
    3108:	9f ef       	ldi	r25, 0xFF	; 255
    310a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
    310e:	81 11       	cpse	r24, r1
    3110:	a9 cf       	rjmp	.-174    	; 0x3064 <ieee802_15_4_scan_request+0x44>
        tat_go_to_sleep();
    } else if (true != ieee802_15_4_send(index, beacon_request)) {
    3112:	6d e3       	ldi	r22, 0x3D	; 61
    3114:	71 e1       	ldi	r23, 0x11	; 17
    3116:	8a e0       	ldi	r24, 0x0A	; 10
    3118:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    311c:	88 23       	and	r24, r24
    311e:	09 f4       	brne	.+2      	; 0x3122 <ieee802_15_4_scan_request+0x102>
    3120:	a1 cf       	rjmp	.-190    	; 0x3064 <ieee802_15_4_scan_request+0x44>
        tat_go_to_sleep();
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_BUSY_SCANNING);
    3122:	8f b7       	in	r24, 0x3f	; 63
    3124:	8b 83       	std	Y+3, r24	; 0x03
    3126:	f8 94       	cli
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	80 93 09 01 	sts	0x0109, r24
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	8f bf       	out	0x3f, r24	; 63
        mac_param.scan.msc->ResultListSize = 0;
    3132:	e0 91 1d 11 	lds	r30, 0x111D
    3136:	f0 91 1e 11 	lds	r31, 0x111E
    313a:	12 82       	std	Z+2, r1	; 0x02
        mac_param.scan.msc->ScanType = MLME_SCAN_TYPE_ACTIVE;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	81 83       	std	Z+1, r24	; 0x01
    3140:	af c0       	rjmp	.+350    	; 0x32a0 <ieee802_15_4_scan_request+0x280>
    
    if (MLME_SCAN_TYPE_ED == scan_type) {
        /* ED scan not supported at the moment. */
    } else if (MLME_SCAN_TYPE_ACTIVE == scan_type) {
        msr_status = do_active_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_PASSIVE == scan_type) {
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	f8 12       	cpse	r15, r24
    3146:	47 c0       	rjmp	.+142    	; 0x31d6 <ieee802_15_4_scan_request+0x1b6>
}


static bool do_passive_scan(uint8_t ScanDuration) {
    /* Calculate scan duration in symbols. */
    mac_param.scan.scan_time = (1 << ScanDuration) + 1;
    3148:	a1 e0       	ldi	r26, 0x01	; 1
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <ieee802_15_4_scan_request+0x132>
    314e:	aa 0f       	add	r26, r26
    3150:	bb 1f       	adc	r27, r27
    3152:	ea 94       	dec	r14
    3154:	e2 f7       	brpl	.-8      	; 0x314e <ieee802_15_4_scan_request+0x12e>
    3156:	11 96       	adiw	r26, 0x01	; 1
    mac_param.scan.scan_time *= aBaseSuperframeDuration;
    3158:	20 ec       	ldi	r18, 0xC0	; 192
    315a:	33 e0       	ldi	r19, 0x03	; 3
    315c:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <__usmulhisi3>
    3160:	60 93 15 11 	sts	0x1115, r22
    3164:	70 93 16 11 	sts	0x1116, r23
    3168:	80 93 17 11 	sts	0x1117, r24
    316c:	90 93 18 11 	sts	0x1118, r25
    
    /* Store current PAN_ID as specified in the IEEE802.15.4 standard. */
    mac_param.scan.saved_pan_id = IEEE802_15_4_GET_PAN_ID();
    3170:	80 91 c5 11 	lds	r24, 0x11C5
    3174:	90 91 c6 11 	lds	r25, 0x11C6
    3178:	90 93 1a 11 	sts	0x111A, r25
    317c:	80 93 19 11 	sts	0x1119, r24
    bool mpsr_status = false;
    
    /* The radio transceiver will be in TRX_OFF state here and with the channel
     * set correctly.
     */
    if (MAC_SUCCESS != ieee802_15_4_set_pan_id(BROADCAST)) {
    3180:	8f ef       	ldi	r24, 0xFF	; 255
    3182:	9f ef       	ldi	r25, 0xFF	; 255
    3184:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
    3188:	81 11       	cpse	r24, r1
    318a:	6c cf       	rjmp	.-296    	; 0x3064 <ieee802_15_4_scan_request+0x44>
        tat_go_to_sleep();
    } else if (true != tat_set_state(RX_AACK_ON)){
    318c:	86 e1       	ldi	r24, 0x16	; 22
    318e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    3192:	88 23       	and	r24, r24
    3194:	09 f4       	brne	.+2      	; 0x3198 <ieee802_15_4_scan_request+0x178>
    3196:	66 cf       	rjmp	.-308    	; 0x3064 <ieee802_15_4_scan_request+0x44>
        tat_go_to_sleep();
    } else if (true != vrt_timer_start_high_pri_delay(mac_param.scan.scan_time,\
    3198:	60 91 15 11 	lds	r22, 0x1115
    319c:	70 91 16 11 	lds	r23, 0x1116
    31a0:	80 91 17 11 	lds	r24, 0x1117
    31a4:	90 91 18 11 	lds	r25, 0x1118
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	48 ed       	ldi	r20, 0xD8	; 216
    31ae:	57 e1       	ldi	r21, 0x17	; 23
    31b0:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <vrt_timer_start_high_pri_delay>
    31b4:	88 23       	and	r24, r24
    31b6:	09 f4       	brne	.+2      	; 0x31ba <ieee802_15_4_scan_request+0x19a>
    31b8:	55 cf       	rjmp	.-342    	; 0x3064 <ieee802_15_4_scan_request+0x44>
                                                      scan_time_elapsed_callback, (void *)NULL)) {
        tat_go_to_sleep();
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_BUSY_SCANNING);
    31ba:	8f b7       	in	r24, 0x3f	; 63
    31bc:	8a 83       	std	Y+2, r24	; 0x02
    31be:	f8 94       	cli
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	80 93 09 01 	sts	0x0109, r24
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	9f bf       	out	0x3f, r25	; 63
        mac_param.scan.msc->ResultListSize = 0;
    31ca:	e0 91 1d 11 	lds	r30, 0x111D
    31ce:	f0 91 1e 11 	lds	r31, 0x111E
    31d2:	12 82       	std	Z+2, r1	; 0x02
    31d4:	63 c0       	rjmp	.+198    	; 0x329c <ieee802_15_4_scan_request+0x27c>
        /* ED scan not supported at the moment. */
    } else if (MLME_SCAN_TYPE_ACTIVE == scan_type) {
        msr_status = do_active_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_PASSIVE == scan_type) {
        msr_status = do_passive_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_ORPHAN == scan_type) {
    31d6:	e3 e0       	ldi	r30, 0x03	; 3
    31d8:	fe 12       	cpse	r15, r30
    31da:	44 cf       	rjmp	.-376    	; 0x3064 <ieee802_15_4_scan_request+0x44>
    uint8_t* orphan_notification = IEEE802_15_4_GET_TX_BUFFER();
    
    /* Set the scan duration in symbols. That is how long to wait for a Coordinator
     * Realignment command.
     */
    mac_param.scan.scan_time = aResponseWaitTime;
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	98 e7       	ldi	r25, 0x78	; 120
    31e0:	a0 e0       	ldi	r26, 0x00	; 0
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	80 93 15 11 	sts	0x1115, r24
    31e8:	90 93 16 11 	sts	0x1116, r25
    31ec:	a0 93 17 11 	sts	0x1117, r26
    31f0:	b0 93 18 11 	sts	0x1118, r27
                   FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR)   |
                   FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
    
    uint8_t index = 0;
    
    orphan_notification[index++] = ((fcf >> 8*0) & 0xFF);
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	80 93 3d 11 	sts	0x113D, r24
    orphan_notification[index++] = ((fcf >> 8*1) & 0xFF);
    31fa:	88 ec       	ldi	r24, 0xC8	; 200
    31fc:	80 93 3e 11 	sts	0x113E, r24

    /* sequence number */
    orphan_notification[index++] = IEEE802_15_4_GET_DSN();;
    3200:	80 91 bf 11 	lds	r24, 0x11BF
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	98 0f       	add	r25, r24
    3208:	90 93 bf 11 	sts	0x11BF, r25
    320c:	80 93 3f 11 	sts	0x113F, r24

    /* dst PANid */
    orphan_notification[index++] = 0xFF;
    3210:	8f ef       	ldi	r24, 0xFF	; 255
    3212:	80 93 40 11 	sts	0x1140, r24
    orphan_notification[index++] = 0xFF;
    3216:	80 93 41 11 	sts	0x1141, r24

    /* dst address */
    orphan_notification[index++] = 0xFF;
    321a:	80 93 42 11 	sts	0x1142, r24
    orphan_notification[index++] = 0xFF;
    321e:	80 93 43 11 	sts	0x1143, r24

    /* src PANid */
    orphan_notification[index++] = 0xFF;
    3222:	80 93 44 11 	sts	0x1144, r24
    orphan_notification[index++] = 0xFF;
    3226:	80 93 45 11 	sts	0x1145, r24
    
    /* src address */
    memcpy((void *)(&orphan_notification[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    322a:	80 91 c7 11 	lds	r24, 0x11C7
    322e:	80 93 46 11 	sts	0x1146, r24
    3232:	80 91 c8 11 	lds	r24, 0x11C8
    3236:	80 93 47 11 	sts	0x1147, r24
    323a:	80 91 c9 11 	lds	r24, 0x11C9
    323e:	80 93 48 11 	sts	0x1148, r24
    3242:	80 91 ca 11 	lds	r24, 0x11CA
    3246:	80 93 49 11 	sts	0x1149, r24
    324a:	80 91 cb 11 	lds	r24, 0x11CB
    324e:	80 93 4a 11 	sts	0x114A, r24
    3252:	80 91 cc 11 	lds	r24, 0x11CC
    3256:	80 93 4b 11 	sts	0x114B, r24
    325a:	80 91 cd 11 	lds	r24, 0x11CD
    325e:	80 93 4c 11 	sts	0x114C, r24
    3262:	80 91 ce 11 	lds	r24, 0x11CE
    3266:	80 93 4d 11 	sts	0x114D, r24
    index += sizeof(uint64_t);
    
    orphan_notification[index++] = ORPHANNOTIFICATION;
    326a:	86 e0       	ldi	r24, 0x06	; 6
    326c:	80 93 4e 11 	sts	0x114E, r24
    bool mosr_status = false;
    
    /* The radio transceiver will be in TRX_OFF state here and with the channel
     * set correctly.
     */
    if (true != ieee802_15_4_send(index, orphan_notification)) {
    3270:	6d e3       	ldi	r22, 0x3D	; 61
    3272:	71 e1       	ldi	r23, 0x11	; 17
    3274:	84 e1       	ldi	r24, 0x14	; 20
    3276:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ieee802_15_4_send>
    327a:	88 23       	and	r24, r24
    327c:	09 f4       	brne	.+2      	; 0x3280 <ieee802_15_4_scan_request+0x260>
    327e:	f2 ce       	rjmp	.-540    	; 0x3064 <ieee802_15_4_scan_request+0x44>
        tat_go_to_sleep();
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_BUSY_SCANNING);
    3280:	8f b7       	in	r24, 0x3f	; 63
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	f8 94       	cli
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	80 93 09 01 	sts	0x0109, r24
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	8f bf       	out	0x3f, r24	; 63
        mac_param.scan.msc->ResultListSize = 0;
    3290:	e0 91 1d 11 	lds	r30, 0x111D
    3294:	f0 91 1e 11 	lds	r31, 0x111E
    3298:	12 82       	std	Z+2, r1	; 0x02
        mac_param.scan.msc->ScanType = MLME_SCAN_TYPE_ORPHAN;
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	81 83       	std	Z+1, r24	; 0x01
        mosr_status = true;
    329e:	81 e0       	ldi	r24, 0x01	; 1
        tat_go_to_sleep();
        msr_status = false;
    }
    
    return msr_status;
}
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	ff 90       	pop	r15
    32b0:	ef 90       	pop	r14
    32b2:	df 90       	pop	r13
    32b4:	08 95       	ret

000032b6 <ieee802_15_4_scan_process_ack>:
     * be started so that the scan can terminate after the given scan duration.
     */
    uint8_t transmission_status = *((uint8_t *)tx_status);

    /* Set up the receiver and start timer. */
    if (TRAC_SUCCESS != transmission_status) {
    32b6:	fc 01       	movw	r30, r24
    32b8:	80 81       	ld	r24, Z
    32ba:	88 23       	and	r24, r24
    32bc:	21 f0       	breq	.+8      	; 0x32c6 <ieee802_15_4_scan_process_ack+0x10>
    
    /* An error occured when the system was doing a transition to RX_AACK_ON mode
     * or when starting the timer. The error handling is done as if the scan terminated
     * normally.
     */
    scan_time_elapsed_callback(NULL);
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <scan_time_elapsed_callback>
     */
    uint8_t transmission_status = *((uint8_t *)tx_status);

    /* Set up the receiver and start timer. */
    if (TRAC_SUCCESS != transmission_status) {
    } else if (true != tat_set_state(RX_AACK_ON)){
    32c6:	86 e1       	ldi	r24, 0x16	; 22
    32c8:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <tat_set_state>
    32cc:	88 23       	and	r24, r24
    32ce:	b9 f3       	breq	.-18     	; 0x32be <ieee802_15_4_scan_process_ack+0x8>
    } else if (true != vrt_timer_start_high_pri_delay(mac_param.scan.scan_time,\
    32d0:	60 91 15 11 	lds	r22, 0x1115
    32d4:	70 91 16 11 	lds	r23, 0x1116
    32d8:	80 91 17 11 	lds	r24, 0x1117
    32dc:	90 91 18 11 	lds	r25, 0x1118
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	48 ed       	ldi	r20, 0xD8	; 216
    32e6:	57 e1       	ldi	r21, 0x17	; 23
    32e8:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <vrt_timer_start_high_pri_delay>
    32ec:	88 23       	and	r24, r24
    32ee:	39 f3       	breq	.-50     	; 0x32be <ieee802_15_4_scan_process_ack+0x8>
    /* An error occured when the system was doing a transition to RX_AACK_ON mode
     * or when starting the timer. The error handling is done as if the scan terminated
     * normally.
     */
    scan_time_elapsed_callback(NULL);
}
    32f0:	08 95       	ret

000032f2 <ieee802_15_4_start_request>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

uint8_t ieee802_15_4_start_request(uint16_t pan_id, uint8_t channel, bool pan_coordinator) {
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <ieee802_15_4_start_request+0x8>
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	14 2f       	mov	r17, r20
    /* Check that the internal state is correct. */
    if ((IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE()) && 
    3300:	20 91 09 01 	lds	r18, 0x0109
    3304:	2b 7f       	andi	r18, 0xFB	; 251
    3306:	29 f5       	brne	.+74     	; 0x3352 <ieee802_15_4_start_request+0x60>
        /* Jump to the local error handler. */
        goto ieee_start_error;
    }
    
    /* Perform sanity checks on all function parameters. */
    if (BROADCAST == pan_id) {
    3308:	8f 3f       	cpi	r24, 0xFF	; 255
    330a:	2f ef       	ldi	r18, 0xFF	; 255
    330c:	92 07       	cpc	r25, r18
    330e:	09 f1       	breq	.+66     	; 0x3352 <ieee802_15_4_start_request+0x60>
        /* Jump to the local error handler. */
        goto ieee_start_error;
    }
    
    
    if ((channel < MIN_CHANNEL) || (channel > MAX_CHANNEL)) {
    3310:	25 ef       	ldi	r18, 0xF5	; 245
    3312:	26 0f       	add	r18, r22
    3314:	20 31       	cpi	r18, 0x10	; 16
    3316:	e8 f4       	brcc	.+58     	; 0x3352 <ieee802_15_4_start_request+0x60>
        
        /* Jump to the local error handler. */
        goto ieee_start_error;
    }
    
    if(MAC_SUCCESS != ieee802_15_4_set_pan_id(pan_id)) {
    3318:	6a 83       	std	Y+2, r22	; 0x02
    331a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <ieee802_15_4_set_pan_id>
    331e:	6a 81       	ldd	r22, Y+2	; 0x02
    3320:	81 11       	cpse	r24, r1
    3322:	17 c0       	rjmp	.+46     	; 0x3352 <ieee802_15_4_start_request+0x60>
                
        /* Jump to the local error handler. */
        goto ieee_start_error;
    } else if (true != tat_set_channel(channel)) {
    3324:	86 2f       	mov	r24, r22
    3326:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <tat_set_channel>
    332a:	88 23       	and	r24, r24
    332c:	91 f0       	breq	.+36     	; 0x3352 <ieee802_15_4_start_request+0x60>
                
        /* Jump to the local error handler. */
        goto ieee_start_error;
    } else {
        IEEE802_15_4_SET_I_AM_COORDINATOR(pan_coordinator);
    332e:	10 93 be 11 	sts	0x11BE, r17
        tat_set_pan_coordinator(pan_coordinator);
    3332:	81 2f       	mov	r24, r17
    3334:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <tat_set_pan_coordinator>
        
        /* For nonbeacon-enabled networks the macRxOnWhenIdle is set true
         * since the coordinator is always awake.
         */
        IEEE802_15_4_SET_RX_ON_WHEN_IDLE(true);
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	80 93 bd 11 	sts	0x11BD, r24
        
        /* Update the internal state to reflect that the node has successfully
         * been started as a cooridinator.
         */
        IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    333e:	8f b7       	in	r24, 0x3f	; 63
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	f8 94       	cli
    3344:	85 e0       	ldi	r24, 0x05	; 5
    3346:	80 93 09 01 	sts	0x0109, r24
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	8f bf       	out	0x3f, r24	; 63
        return MAC_SUCCESS;
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	03 c0       	rjmp	.+6      	; 0x3358 <ieee802_15_4_start_request+0x66>
    
    /* Handle any error that occured during the primitive execution. */
    ieee_start_error:
    

    tat_go_to_sleep();
    3352:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    
    return MAC_INVALID_PARAMETER;
    3356:	88 ee       	ldi	r24, 0xE8	; 232
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	08 95       	ret

00003364 <__vector_16>:
/*================================= MACROS           =========================*/
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/
ISR(TIMER1_CAPT_vect) {   
    3364:	1f 92       	push	r1
    3366:	0f 92       	push	r0
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	0f 92       	push	r0
    336c:	11 24       	eor	r1, r1
    336e:	0b b6       	in	r0, 0x3b	; 59
    3370:	0f 92       	push	r0
    3372:	2f 93       	push	r18
    3374:	3f 93       	push	r19
    3376:	4f 93       	push	r20
    3378:	5f 93       	push	r21
    337a:	6f 93       	push	r22
    337c:	7f 93       	push	r23
    337e:	8f 93       	push	r24
    3380:	9f 93       	push	r25
    3382:	af 93       	push	r26
    3384:	bf 93       	push	r27
    3386:	ef 93       	push	r30
    3388:	ff 93       	push	r31
    RF230_QUICK_ISR_HANDLER();
    338a:	86 b3       	in	r24, 0x16	; 22
    338c:	85 60       	ori	r24, 0x05	; 5
    338e:	86 bb       	out	0x16, r24	; 22
    3390:	28 98       	cbi	0x05, 0	; 5
    3392:	8f e8       	ldi	r24, 0x8F	; 143
    3394:	8e bd       	out	0x2e, r24	; 46
    3396:	0d b4       	in	r0, 0x2d	; 45
    3398:	07 fe       	sbrs	r0, 7
    339a:	fd cf       	rjmp	.-6      	; 0x3396 <__vector_16+0x32>
    339c:	8e b5       	in	r24, 0x2e	; 46
    339e:	8e bd       	out	0x2e, r24	; 46
    33a0:	0d b4       	in	r0, 0x2d	; 45
    33a2:	07 fe       	sbrs	r0, 7
    33a4:	fd cf       	rjmp	.-6      	; 0x33a0 <__vector_16+0x3c>
    33a6:	8e b5       	in	r24, 0x2e	; 46
    33a8:	28 9a       	sbi	0x05, 0	; 5
    33aa:	e0 91 cc 02 	lds	r30, 0x02CC
    33ae:	f0 91 cd 02 	lds	r31, 0x02CD
    33b2:	30 97       	sbiw	r30, 0x00	; 0
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <__vector_16+0x54>
    33b6:	09 95       	icall
}
    33b8:	ff 91       	pop	r31
    33ba:	ef 91       	pop	r30
    33bc:	bf 91       	pop	r27
    33be:	af 91       	pop	r26
    33c0:	9f 91       	pop	r25
    33c2:	8f 91       	pop	r24
    33c4:	7f 91       	pop	r23
    33c6:	6f 91       	pop	r22
    33c8:	5f 91       	pop	r21
    33ca:	4f 91       	pop	r20
    33cc:	3f 91       	pop	r19
    33ce:	2f 91       	pop	r18
    33d0:	0f 90       	pop	r0
    33d2:	0b be       	out	0x3b, r0	; 59
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

000033de <__vector_20>:


ISR(VRT_TIME_OVF_VECTOR) {
    33de:	1f 92       	push	r1
    33e0:	0f 92       	push	r0
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	0f 92       	push	r0
    33e6:	11 24       	eor	r1, r1
    33e8:	8f 93       	push	r24
    33ea:	9f 93       	push	r25
    VRT_TIMER_TICK_OVF_HANDLER();
    33ec:	80 91 34 12 	lds	r24, 0x1234
    33f0:	90 91 35 12 	lds	r25, 0x1235
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	90 93 35 12 	sts	0x1235, r25
    33fa:	80 93 34 12 	sts	0x1234, r24
}
    33fe:	9f 91       	pop	r25
    3400:	8f 91       	pop	r24
    3402:	0f 90       	pop	r0
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	0f 90       	pop	r0
    3408:	1f 90       	pop	r1
    340a:	18 95       	reti

0000340c <__vector_17>:

ISR (VRT_TIME_COMPA_vect) {
    340c:	1f 92       	push	r1
    340e:	0f 92       	push	r0
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	0f 92       	push	r0
    3414:	11 24       	eor	r1, r1
    3416:	0b b6       	in	r0, 0x3b	; 59
    3418:	0f 92       	push	r0
    341a:	2f 93       	push	r18
    341c:	3f 93       	push	r19
    341e:	4f 93       	push	r20
    3420:	5f 93       	push	r21
    3422:	6f 93       	push	r22
    3424:	7f 93       	push	r23
    3426:	8f 93       	push	r24
    3428:	9f 93       	push	r25
    342a:	af 93       	push	r26
    342c:	bf 93       	push	r27
    342e:	ef 93       	push	r30
    3430:	ff 93       	push	r31
    VRT_TIMER_HIGH_PRI_DELAY_HANDLER(); 
    3432:	80 91 65 0d 	lds	r24, 0x0D65
    3436:	90 91 66 0d 	lds	r25, 0x0D66
    343a:	89 2b       	or	r24, r25
    343c:	31 f4       	brne	.+12     	; 0x344a <__vector_17+0x3e>
    343e:	80 91 6f 00 	lds	r24, 0x006F
    3442:	8d 7f       	andi	r24, 0xFD	; 253
    3444:	80 93 6f 00 	sts	0x006F, r24
    3448:	3d c0       	rjmp	.+122    	; 0x34c4 <__vector_17+0xb8>
    344a:	80 91 61 0d 	lds	r24, 0x0D61
    344e:	90 91 62 0d 	lds	r25, 0x0D62
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	79 f0       	breq	.+30     	; 0x3474 <__vector_17+0x68>
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	90 93 62 0d 	sts	0x0D62, r25
    345c:	80 93 61 0d 	sts	0x0D61, r24
    3460:	80 91 84 00 	lds	r24, 0x0084
    3464:	90 91 85 00 	lds	r25, 0x0085
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	90 93 89 00 	sts	0x0089, r25
    346e:	80 93 88 00 	sts	0x0088, r24
    3472:	28 c0       	rjmp	.+80     	; 0x34c4 <__vector_17+0xb8>
    3474:	20 91 5f 0d 	lds	r18, 0x0D5F
    3478:	30 91 60 0d 	lds	r19, 0x0D60
    347c:	21 15       	cp	r18, r1
    347e:	31 05       	cpc	r19, r1
    3480:	79 f0       	breq	.+30     	; 0x34a0 <__vector_17+0x94>
    3482:	80 91 84 00 	lds	r24, 0x0084
    3486:	90 91 85 00 	lds	r25, 0x0085
    348a:	82 0f       	add	r24, r18
    348c:	93 1f       	adc	r25, r19
    348e:	90 93 89 00 	sts	0x0089, r25
    3492:	80 93 88 00 	sts	0x0088, r24
    3496:	10 92 60 0d 	sts	0x0D60, r1
    349a:	10 92 5f 0d 	sts	0x0D5F, r1
    349e:	12 c0       	rjmp	.+36     	; 0x34c4 <__vector_17+0xb8>
    34a0:	80 91 6f 00 	lds	r24, 0x006F
    34a4:	8d 7f       	andi	r24, 0xFD	; 253
    34a6:	80 93 6f 00 	sts	0x006F, r24
    34aa:	e0 91 65 0d 	lds	r30, 0x0D65
    34ae:	f0 91 66 0d 	lds	r31, 0x0D66
    34b2:	80 91 63 0d 	lds	r24, 0x0D63
    34b6:	90 91 64 0d 	lds	r25, 0x0D64
    34ba:	09 95       	icall
    34bc:	10 92 66 0d 	sts	0x0D66, r1
    34c0:	10 92 65 0d 	sts	0x0D65, r1
}
    34c4:	ff 91       	pop	r31
    34c6:	ef 91       	pop	r30
    34c8:	bf 91       	pop	r27
    34ca:	af 91       	pop	r26
    34cc:	9f 91       	pop	r25
    34ce:	8f 91       	pop	r24
    34d0:	7f 91       	pop	r23
    34d2:	6f 91       	pop	r22
    34d4:	5f 91       	pop	r21
    34d6:	4f 91       	pop	r20
    34d8:	3f 91       	pop	r19
    34da:	2f 91       	pop	r18
    34dc:	0f 90       	pop	r0
    34de:	0b be       	out	0x3b, r0	; 59
    34e0:	0f 90       	pop	r0
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	0f 90       	pop	r0
    34e6:	1f 90       	pop	r1
    34e8:	18 95       	reti

000034ea <__vector_18>:


ISR(TIMER1_COMPB_vect) {
    34ea:	1f 92       	push	r1
    34ec:	0f 92       	push	r0
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	0f 92       	push	r0
    34f2:	11 24       	eor	r1, r1
    34f4:	8f 93       	push	r24
    34f6:	9f 93       	push	r25
    VRT_TIMER_SLOW_TICK_HANDLER();
    34f8:	80 91 5d 0d 	lds	r24, 0x0D5D
    34fc:	90 91 5e 0d 	lds	r25, 0x0D5E
    3500:	01 96       	adiw	r24, 0x01	; 1
    3502:	90 93 5e 0d 	sts	0x0D5E, r25
    3506:	80 93 5d 0d 	sts	0x0D5D, r24
    350a:	80 91 84 00 	lds	r24, 0x0084
    350e:	90 91 85 00 	lds	r25, 0x0085
    3512:	86 59       	subi	r24, 0x96	; 150
    3514:	97 4e       	sbci	r25, 0xE7	; 231
    3516:	90 93 8b 00 	sts	0x008B, r25
    351a:	80 93 8a 00 	sts	0x008A, r24
}
    351e:	9f 91       	pop	r25
    3520:	8f 91       	pop	r24
    3522:	0f 90       	pop	r0
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	0f 90       	pop	r0
    3528:	1f 90       	pop	r1
    352a:	18 95       	reti

0000352c <rf230_init>:
/*================================= PROTOTYPES       =========================*/


bool rf230_init(void) {
    /* Initialize local varaibles. */
    rf230_callback_handler = NULL;
    352c:	10 92 cd 02 	sts	0x02CD, r1
    3530:	10 92 cc 02 	sts	0x02CC, r1
    
    /* Enable IO pins used to control the radio transceiver. */
    DDR_SLP_TR |= (1 << SLP_TR);
    3534:	24 9a       	sbi	0x04, 4	; 4
    DDR_RST    |= (1 << RST);
    3536:	25 9a       	sbi	0x04, 5	; 4
    DDR_RST    |= (1 << TST);
    3538:	26 9a       	sbi	0x04, 6	; 4
    
    /* Enable the SPI module. */
    RF230_ENABLE_SPI_MODULE();
    353a:	e4 e6       	ldi	r30, 0x64	; 100
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	8b 7f       	andi	r24, 0xFB	; 251
    3542:	80 83       	st	Z, r24
    
    /* Configure the SPI module. */
    RF230_DDR_SPI       |= (1 << RF230_DD_SS) | (1 << RF230_DD_SCK) | (1 << RF230_DD_MOSI);
    3544:	84 b1       	in	r24, 0x04	; 4
    3546:	87 60       	ori	r24, 0x07	; 7
    3548:	84 b9       	out	0x04, r24	; 4
    RF230_PORT_SPI      |= (1 << RF230_DD_SS) | (1 << RF230_DD_SCK); //Set SS and CLK high
    354a:	85 b1       	in	r24, 0x05	; 5
    354c:	83 60       	ori	r24, 0x03	; 3
    354e:	85 b9       	out	0x05, r24	; 5
    RF230_SPI_CTRL_REG   = (1 << RF230_SPI_SPE) | (1 << RF230_SPI_MSTR); //Enable SPI module and master operation.
    3550:	80 e5       	ldi	r24, 0x50	; 80
    3552:	8c bd       	out	0x2c, r24	; 44
    RF230_SPI_STATUS_REG = (1 << RF230_SPI_2X); //Enable doubled SPI speed in master mode.
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	8d bd       	out	0x2d, r24	; 45
    
    return true;
}
    3558:	08 95       	ret

0000355a <rf230_deinit>:


void rf230_deinit(void) {
    /* Disable the SPI module. */
    RF230_DISABLE_SPI_MODULE();
    355a:	e4 e6       	ldi	r30, 0x64	; 100
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	84 60       	ori	r24, 0x04	; 4
    3562:	80 83       	st	Z, r24
    3564:	08 95       	ret

00003566 <rf230_register_read>:
}


uint8_t rf230_register_read(uint8_t address) {
    3566:	cf 93       	push	r28
    3568:	df 93       	push	r29
    356a:	1f 92       	push	r1
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
   /*Add the register read command to the register address. */
    address |= RF230_TRX_CMD_RR;
    3570:	80 68       	ori	r24, 0x80	; 128
    
    ENTER_CRITICAL_REGION();
    3572:	9f b7       	in	r25, 0x3f	; 63
    3574:	99 83       	std	Y+1, r25	; 0x01
    3576:	f8 94       	cli
    
    RF230_SS_LOW();
    3578:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and read register content.*/
    RF230_SPI_DATA_REG = address;
    357a:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    357c:	0d b4       	in	r0, 0x2d	; 45
    357e:	07 fe       	sbrs	r0, 7
    3580:	fd cf       	rjmp	.-6      	; 0x357c <rf230_register_read+0x16>
    address = RF230_SPI_DATA_REG;
    3582:	8e b5       	in	r24, 0x2e	; 46
    
    uint8_t register_value = 0;
    
    RF230_SPI_DATA_REG = register_value;
    3584:	1e bc       	out	0x2e, r1	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    3586:	0d b4       	in	r0, 0x2d	; 45
    3588:	07 fe       	sbrs	r0, 7
    358a:	fd cf       	rjmp	.-6      	; 0x3586 <rf230_register_read+0x20>
    register_value = RF230_SPI_DATA_REG;
    358c:	8e b5       	in	r24, 0x2e	; 46

    RF230_SS_HIGH();  
    358e:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    3590:	99 81       	ldd	r25, Y+1	; 0x01
    3592:	9f bf       	out	0x3f, r25	; 63
    
    return register_value;
}
    3594:	0f 90       	pop	r0
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	08 95       	ret

0000359c <rf230_register_write>:


void rf230_register_write(uint8_t address, uint8_t value) {
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	1f 92       	push	r1
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    /* Add the Register Write command to the address. */
    address |= RF230_TRX_CMD_RW;
    35a6:	80 6c       	ori	r24, 0xC0	; 192
    
    ENTER_CRITICAL_REGION();    
    35a8:	9f b7       	in	r25, 0x3f	; 63
    35aa:	99 83       	std	Y+1, r25	; 0x01
    35ac:	f8 94       	cli
    
    RF230_SS_LOW();
    35ae:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and write register content.*/
    RF230_SPI_DATA_REG = address;
    35b0:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    35b2:	0d b4       	in	r0, 0x2d	; 45
    35b4:	07 fe       	sbrs	r0, 7
    35b6:	fd cf       	rjmp	.-6      	; 0x35b2 <rf230_register_write+0x16>
    address = RF230_SPI_DATA_REG;
    35b8:	8e b5       	in	r24, 0x2e	; 46
    
    RF230_SPI_DATA_REG = value;
    35ba:	6e bd       	out	0x2e, r22	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    35bc:	0d b4       	in	r0, 0x2d	; 45
    35be:	07 fe       	sbrs	r0, 7
    35c0:	fd cf       	rjmp	.-6      	; 0x35bc <rf230_register_write+0x20>
    value = RF230_SPI_DATA_REG;
    35c2:	8e b5       	in	r24, 0x2e	; 46
    
    RF230_SS_HIGH();
    35c4:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	8f bf       	out	0x3f, r24	; 63
}
    35ca:	0f 90       	pop	r0
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <rf230_subregister_read>:


uint8_t rf230_subregister_read(uint8_t address, uint8_t mask, uint8_t position) {
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <rf230_subregister_read+0x6>
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    /* Read current register value and mask out subregister. */
    uint8_t register_value = rf230_register_read(address);
    35dc:	4a 83       	std	Y+2, r20	; 0x02
    35de:	69 83       	std	Y+1, r22	; 0x01
    35e0:	0e 94 b3 1a 	call	0x3566	; 0x3566 <rf230_register_read>
    register_value &= mask;
    35e4:	69 81       	ldd	r22, Y+1	; 0x01
    35e6:	86 23       	and	r24, r22
    register_value >>= position;
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	4a 81       	ldd	r20, Y+2	; 0x02
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <rf230_subregister_read+0x20>
    35ee:	95 95       	asr	r25
    35f0:	87 95       	ror	r24
    35f2:	4a 95       	dec	r20
    35f4:	e2 f7       	brpl	.-8      	; 0x35ee <rf230_subregister_read+0x1c>
    
    return register_value;
}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	08 95       	ret

00003600 <rf230_subregister_write>:


void rf230_subregister_write(uint8_t address, uint8_t mask, uint8_t position, uint8_t value) {
    3600:	1f 93       	push	r17
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	00 d0       	rcall	.+0      	; 0x3608 <rf230_subregister_write+0x8>
    3608:	1f 92       	push	r1
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	18 2f       	mov	r17, r24
    /* Read current register value and mask area outside the subregister. */
    uint8_t register_value = rf230_register_read(address);
    3610:	2b 83       	std	Y+3, r18	; 0x03
    3612:	4a 83       	std	Y+2, r20	; 0x02
    3614:	69 83       	std	Y+1, r22	; 0x01
    3616:	0e 94 b3 1a 	call	0x3566	; 0x3566 <rf230_register_read>
    register_value &= ~mask;
    361a:	69 81       	ldd	r22, Y+1	; 0x01
    361c:	96 2f       	mov	r25, r22
    361e:	90 95       	com	r25
    3620:	98 23       	and	r25, r24
    
    /* Start preparing the new subregister value. shift in place and mask. */
    value <<= position;
    3622:	2b 81       	ldd	r18, Y+3	; 0x03
    3624:	4a 81       	ldd	r20, Y+2	; 0x02
    3626:	01 c0       	rjmp	.+2      	; 0x362a <rf230_subregister_write+0x2a>
    3628:	22 0f       	add	r18, r18
    362a:	4a 95       	dec	r20
    362c:	ea f7       	brpl	.-6      	; 0x3628 <rf230_subregister_write+0x28>
    value &= mask;
    362e:	26 23       	and	r18, r22
    
    value |= register_value;
    3630:	92 2b       	or	r25, r18

    /* Write the modified register value. */
    rf230_register_write(address, value);
    3632:	69 2f       	mov	r22, r25
    3634:	81 2f       	mov	r24, r17
}
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	df 91       	pop	r29
    363e:	cf 91       	pop	r28
    3640:	1f 91       	pop	r17
    value &= mask;
    
    value |= register_value;

    /* Write the modified register value. */
    rf230_register_write(address, value);
    3642:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <rf230_register_write>

00003646 <rf230_frame_write>:
}


void rf230_frame_write(uint8_t length, const uint8_t *wr_buffer) {
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	1f 92       	push	r1
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    3650:	9f b7       	in	r25, 0x3f	; 63
    3652:	99 83       	std	Y+1, r25	; 0x01
    3654:	f8 94       	cli
 
    RF230_SS_LOW();
    3656:	28 98       	cbi	0x05, 0	; 5
    
    /*SEND FRAME WRITE COMMAND AND FRAME LENGTH.*/
    RF230_SPI_DATA_REG = RF230_TRX_CMD_FW;
    3658:	90 e6       	ldi	r25, 0x60	; 96
    365a:	9e bd       	out	0x2e, r25	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    365c:	0d b4       	in	r0, 0x2d	; 45
    365e:	07 fe       	sbrs	r0, 7
    3660:	fd cf       	rjmp	.-6      	; 0x365c <rf230_frame_write+0x16>
    uint8_t dummy_read = RF230_SPI_DATA_REG;
    3662:	9e b5       	in	r25, 0x2e	; 46
        
    RF230_SPI_DATA_REG = length;
    3664:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    3666:	0d b4       	in	r0, 0x2d	; 45
    3668:	07 fe       	sbrs	r0, 7
    366a:	fd cf       	rjmp	.-6      	; 0x3666 <rf230_frame_write+0x20>
    dummy_read = RF230_SPI_DATA_REG;
    366c:	9e b5       	in	r25, 0x2e	; 46
    366e:	fb 01       	movw	r30, r22
    3670:	86 0f       	add	r24, r22
    
    /*Download to the Frame Buffer. */
    do {
        
        RF230_SPI_DATA_REG = *wr_buffer++;
    3672:	91 91       	ld	r25, Z+
    3674:	9e bd       	out	0x2e, r25	; 46
        --length;
        
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
    3676:	0d b4       	in	r0, 0x2d	; 45
    3678:	07 fe       	sbrs	r0, 7
    367a:	fd cf       	rjmp	.-6      	; 0x3676 <rf230_frame_write+0x30>
        
        dummy_read = RF230_SPI_DATA_REG;
    367c:	9e b5       	in	r25, 0x2e	; 46
    } while (length != 0);
    367e:	8e 13       	cpse	r24, r30
    3680:	f8 cf       	rjmp	.-16     	; 0x3672 <rf230_frame_write+0x2c>
    
    RF230_SS_HIGH();
    3682:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	8f bf       	out	0x3f, r24	; 63
}
    3688:	0f 90       	pop	r0
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	08 95       	ret

00003690 <rf230_frame_write_P>:


void rf230_frame_write_P(uint8_t length, PROGMEM_BYTE_ARRAY_T wr_buffer) {
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
    3694:	1f 92       	push	r1
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    369a:	9f b7       	in	r25, 0x3f	; 63
    369c:	99 83       	std	Y+1, r25	; 0x01
    369e:	f8 94       	cli
 
    RF230_SS_LOW();
    36a0:	28 98       	cbi	0x05, 0	; 5
    
    /*SEND FRAME WRITE COMMAND AND FRAME LENGTH.*/
    RF230_SPI_DATA_REG = RF230_TRX_CMD_FW;
    36a2:	90 e6       	ldi	r25, 0x60	; 96
    36a4:	9e bd       	out	0x2e, r25	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    36a6:	0d b4       	in	r0, 0x2d	; 45
    36a8:	07 fe       	sbrs	r0, 7
    36aa:	fd cf       	rjmp	.-6      	; 0x36a6 <rf230_frame_write_P+0x16>
    uint8_t dummy_read = RF230_SPI_DATA_REG;
    36ac:	9e b5       	in	r25, 0x2e	; 46
        
    RF230_SPI_DATA_REG = length;
    36ae:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    36b0:	0d b4       	in	r0, 0x2d	; 45
    36b2:	07 fe       	sbrs	r0, 7
    36b4:	fd cf       	rjmp	.-6      	; 0x36b0 <rf230_frame_write_P+0x20>
    dummy_read = RF230_SPI_DATA_REG;
    36b6:	9e b5       	in	r25, 0x2e	; 46
    36b8:	fb 01       	movw	r30, r22
    36ba:	86 0f       	add	r24, r22
    
    /*Download to the Frame Buffer. */
    do {
        
        RF230_SPI_DATA_REG = PROGMEM_READ_BYTE(wr_buffer);
    36bc:	94 91       	lpm	r25, Z
    36be:	9e bd       	out	0x2e, r25	; 46
        wr_buffer++;
    36c0:	31 96       	adiw	r30, 0x01	; 1
        --length;
        
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
    36c2:	0d b4       	in	r0, 0x2d	; 45
    36c4:	07 fe       	sbrs	r0, 7
    36c6:	fd cf       	rjmp	.-6      	; 0x36c2 <rf230_frame_write_P+0x32>
        
        dummy_read = RF230_SPI_DATA_REG;
    36c8:	9e b5       	in	r25, 0x2e	; 46
    } while (length != 0);
    36ca:	8e 13       	cpse	r24, r30
    36cc:	f7 cf       	rjmp	.-18     	; 0x36bc <rf230_frame_write_P+0x2c>
    
    RF230_SS_HIGH();
    36ce:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	8f bf       	out	0x3f, r24	; 63
}
    36d4:	0f 90       	pop	r0
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	08 95       	ret

000036dc <rf230_frame_read>:


void rf230_frame_read(uint8_t length, uint8_t *rd_buffer) {
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	1f 92       	push	r1
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    36e6:	9f b7       	in	r25, 0x3f	; 63
    36e8:	99 83       	std	Y+1, r25	; 0x01
    36ea:	f8 94       	cli
    
    RF230_SS_LOW();
    36ec:	28 98       	cbi	0x05, 0	; 5
    
    /* Send frame read command. */
    RF230_SPI_DATA_REG = RF230_TRX_CMD_FR;
    36ee:	90 e2       	ldi	r25, 0x20	; 32
    36f0:	9e bd       	out	0x2e, r25	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    36f2:	0d b4       	in	r0, 0x2d	; 45
    36f4:	07 fe       	sbrs	r0, 7
    36f6:	fd cf       	rjmp	.-6      	; 0x36f2 <rf230_frame_read+0x16>
    *rd_buffer = RF230_SPI_DATA_REG;
    36f8:	9e b5       	in	r25, 0x2e	; 46
    36fa:	fb 01       	movw	r30, r22
    36fc:	90 83       	st	Z, r25
    36fe:	86 0f       	add	r24, r22
        
    /* Download to the Frame Buffer. */
    do {
        
        RF230_SPI_DATA_REG = 0x00;
    3700:	1e bc       	out	0x2e, r1	; 46
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
    3702:	0d b4       	in	r0, 0x2d	; 45
    3704:	07 fe       	sbrs	r0, 7
    3706:	fd cf       	rjmp	.-6      	; 0x3702 <rf230_frame_read+0x26>
        *rd_buffer = RF230_SPI_DATA_REG;
    3708:	9e b5       	in	r25, 0x2e	; 46
    370a:	91 93       	st	Z+, r25
        rd_buffer++;
        --length;
    } while (length != 0);
    370c:	8e 13       	cpse	r24, r30
    370e:	f8 cf       	rjmp	.-16     	; 0x3700 <rf230_frame_read+0x24>
    
    RF230_SS_HIGH();
    3710:	28 9a       	sbi	0x05, 0	; 5
 
    LEAVE_CRITICAL_REGION();
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	8f bf       	out	0x3f, r24	; 63
}
    3716:	0f 90       	pop	r0
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	08 95       	ret

0000371e <rf230_set_callback_handler>:


void rf230_set_callback_handler(rf230_cb_handler_t handler) {
    371e:	cf 93       	push	r28
    3720:	df 93       	push	r29
    3722:	1f 92       	push	r1
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    3728:	2f b7       	in	r18, 0x3f	; 63
    372a:	29 83       	std	Y+1, r18	; 0x01
    372c:	f8 94       	cli
    rf230_callback_handler = handler;
    372e:	90 93 cd 02 	sts	0x02CD, r25
    3732:	80 93 cc 02 	sts	0x02CC, r24
    LEAVE_CRITICAL_REGION();
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	8f bf       	out	0x3f, r24	; 63
}
    373a:	0f 90       	pop	r0
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	08 95       	ret

00003742 <rf230_clear_callback_handler>:
    
    return handler;
}


void rf230_clear_callback_handler(void) {
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	1f 92       	push	r1
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    374c:	8f b7       	in	r24, 0x3f	; 63
    374e:	89 83       	std	Y+1, r24	; 0x01
    3750:	f8 94       	cli
    rf230_callback_handler = NULL;
    3752:	10 92 cd 02 	sts	0x02CD, r1
    3756:	10 92 cc 02 	sts	0x02CC, r1
    LEAVE_CRITICAL_REGION();
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	8f bf       	out	0x3f, r24	; 63
}
    375e:	0f 90       	pop	r0
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	08 95       	ret

00003766 <error_handler>:
    return false;
}


static void error_handler(void) {
    LED_RED_ON();
    3766:	5d 98       	cbi	0x0b, 5	; 11
    cli();
    3768:	f8 94       	cli
    376a:	ff cf       	rjmp	.-2      	; 0x376a <error_handler+0x4>

0000376c <avr_init>:

bool avr_init(void) {
    
    
    /* Enable power reduction on all peripheral modules. */
    PRR0 = (1 << PRTWI)  |   // Disable TWI.
    376c:	8d ee       	ldi	r24, 0xED	; 237
    376e:	80 93 64 00 	sts	0x0064, r24
	       (1 << PRTIM0) |   // Disable TIMER0.
           (1 << PRTIM1) |   // Disable TIMER1.
           (1 << PRSPI)  |   // Disable SPI.
	       (1 << PRADC);     // Disable ADC.
    
    PRR1 = (1 << PRUSB)  |   // Disable USB.
    3772:	89 e8       	ldi	r24, 0x89	; 137
    3774:	80 93 65 00 	sts	0x0065, r24
	       (1 << PRTIM3) |   // Disable TIMER3.
	       (1 << PRUSART1);  // Disable USART1.
	
	ACSR |= (1 << ACD);      // Disable Analog Comparator.
    3778:	80 b7       	in	r24, 0x30	; 48
    377a:	80 68       	ori	r24, 0x80	; 128
    377c:	80 bf       	out	0x30, r24	; 48
	
	DIDR0 = (1 << ADC7D) |   // Disable digital input buffer for analog input pins.
    377e:	80 ef       	ldi	r24, 0xF0	; 240
    3780:	80 93 7e 00 	sts	0x007E, r24
	        (1 << ADC6D) |   // Disable digital input buffer for analog input pins.
	        (1 << ADC5D) |   // Disable digital input buffer for analog input pins.
	        (1 << ADC4D);    // Disable digital input buffer for analog input pins.
    
	/* Initialize the VRT Runtime Framework. */
	if (true != vrt_init()) {
    3784:	0e 94 31 23 	call	0x4662	; 0x4662 <vrt_init>
    3788:	81 11       	cpse	r24, r1
    378a:	02 c0       	rjmp	.+4      	; 0x3790 <avr_init+0x24>
        /* AVR successfully initialized. */
        LED_INIT();
        return true;
    }
    
    return false;
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	08 95       	ret
	        (1 << ADC5D) |   // Disable digital input buffer for analog input pins.
	        (1 << ADC4D);    // Disable digital input buffer for analog input pins.
    
	/* Initialize the VRT Runtime Framework. */
	if (true != vrt_init()) {
    } else if (true != vrt_mem_init()) {
    3790:	0e 94 ad 23 	call	0x475a	; 0x475a <vrt_mem_init>
    3794:	88 23       	and	r24, r24
    3796:	d1 f3       	breq	.-12     	; 0x378c <avr_init+0x20>
    } else if (true != vrt_mem_add_partition(partition_buffer1, BLOCK_SIZE_1, BLOCK_COUNT_1, &partition1)) {
    3798:	27 e1       	ldi	r18, 0x17	; 23
    379a:	3c e0       	ldi	r19, 0x0C	; 12
    379c:	45 e0       	ldi	r20, 0x05	; 5
    379e:	60 e2       	ldi	r22, 0x20	; 32
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	87 e7       	ldi	r24, 0x77	; 119
    37a4:	9b e0       	ldi	r25, 0x0B	; 11
    37a6:	0e 94 b5 23 	call	0x476a	; 0x476a <vrt_mem_add_partition>
    37aa:	88 23       	and	r24, r24
    37ac:	79 f3       	breq	.-34     	; 0x378c <avr_init+0x20>
    } else if (true != vrt_mem_add_partition(partition_buffer2, BLOCK_SIZE_2, BLOCK_COUNT_2, &partition2)) {
    37ae:	2b e6       	ldi	r18, 0x6B	; 107
    37b0:	3b e0       	ldi	r19, 0x0B	; 11
    37b2:	4f e0       	ldi	r20, 0x0F	; 15
    37b4:	63 e9       	ldi	r22, 0x93	; 147
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	8e ec       	ldi	r24, 0xCE	; 206
    37ba:	92 e0       	ldi	r25, 0x02	; 2
    37bc:	0e 94 b5 23 	call	0x476a	; 0x476a <vrt_mem_add_partition>
    37c0:	88 23       	and	r24, r24
    37c2:	21 f3       	breq	.-56     	; 0x378c <avr_init+0x20>
    } else if (true != vrt_timer_init()) {
    37c4:	0e 94 bd 24 	call	0x497a	; 0x497a <vrt_timer_init>
    37c8:	88 23       	and	r24, r24
    37ca:	01 f3       	breq	.-64     	; 0x378c <avr_init+0x20>
    } else {
        /* AVR successfully initialized. */
        LED_INIT();
    37cc:	57 9a       	sbi	0x0a, 7	; 10
    37ce:	6f 9a       	sbi	0x0d, 7	; 13
    37d0:	6e 9a       	sbi	0x0d, 6	; 13
    37d2:	55 9a       	sbi	0x0a, 5	; 10
    37d4:	5f 98       	cbi	0x0b, 7	; 11
    37d6:	77 9a       	sbi	0x0e, 7	; 14
    37d8:	76 9a       	sbi	0x0e, 6	; 14
    37da:	5d 9a       	sbi	0x0b, 5	; 11
        return true;
    }
    
    return false;
}
    37dc:	08 95       	ret

000037de <main>:
void main(void) {
#else
int main(void) {
#endif
    /* Ensure that the Watchdog is not running. */
    wdt_disable();
    37de:	88 e1       	ldi	r24, 0x18	; 24
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	80 93 60 00 	sts	0x0060, r24
    37e8:	10 92 60 00 	sts	0x0060, r1
    37ec:	0f be       	out	0x3f, r0	; 63
    
	/* Initialize system. */
	if (true != avr_init()) {
    37ee:	0e 94 b6 1b 	call	0x376c	; 0x376c <avr_init>
    37f2:	88 23       	and	r24, r24
    37f4:	31 f0       	breq	.+12     	; 0x3802 <main+0x24>
		error_handler();
	} else if (true != eep_init()) {
    37f6:	0e 94 bf 0a 	call	0x157e	; 0x157e <eep_init>
    37fa:	81 11       	cpse	r24, r1
    37fc:	04 c0       	rjmp	.+8      	; 0x3806 <main+0x28>
        eep_deinit();
    37fe:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eep_deinit>
        error_handler();
    3802:	0e 94 b3 1b 	call	0x3766	; 0x3766 <error_handler>
    } else if (true != cmd_if_init()) {
    3806:	0e 94 78 09 	call	0x12f0	; 0x12f0 <cmd_if_init>
    380a:	81 11       	cpse	r24, r1
    380c:	03 c0       	rjmp	.+6      	; 0x3814 <main+0x36>
        cmd_if_deinit();
    380e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <cmd_if_deinit>
    3812:	f7 cf       	rjmp	.-18     	; 0x3802 <main+0x24>
        error_handler();
    }
	
    /* Disable modules that are not needed any more. */
    eep_deinit();
    3814:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eep_deinit>
    
    LED_BLUE_ON();
    3818:	5f 9a       	sbi	0x0b, 7	; 11
        
    /* Enable interrupts. */
    sei();
    381a:	78 94       	sei
    
	/* Endless application loop. */
	for(;;) {
        /* Dispatch events from the event queue. */
		vrt_dispatch_event();
    381c:	0e 94 74 23 	call	0x46e8	; 0x46e8 <vrt_dispatch_event>
        
        /* Poll modules that require this. */
        vrt_timer_task();
    3820:	0e 94 82 25 	call	0x4b04	; 0x4b04 <vrt_timer_task>
        usb_task();
    3824:	0e 94 88 21 	call	0x4310	; 0x4310 <usb_task>
        air_capture_task();
    3828:	0e 94 44 02 	call	0x488	; 0x488 <air_capture_task>
        cmd_if_task();
    382c:	0e 94 10 0a 	call	0x1420	; 0x1420 <cmd_if_task>
    3830:	f5 cf       	rjmp	.-22     	; 0x381c <main+0x3e>

00003832 <tat_trx_end_cb>:
}


static void tat_trx_end_cb(uint8_t trx_isr_event) {
    /* Verify that this is an TRX_END interrupt. */
    if (RF230_TRX_END_MASK != (trx_isr_event & RF230_TRX_END_MASK)) {
    3832:	83 ff       	sbrs	r24, 3
    3834:	b8 c0       	rjmp	.+368    	; 0x39a6 <tat_trx_end_cb+0x174>
     * so, store the transmission status and take the radio transceiver to TRX_OFF. On
     * the other hand, if the interrupt event is associated with a frame reception the
     * radio transceiver must be taken to TRX_OFF immidiately to protect the frame buffer.
     */
    
    if (false == waiting_for_ack) {
    3836:	80 91 27 0c 	lds	r24, 0x0C27
    383a:	81 11       	cpse	r24, r1
    383c:	50 c0       	rjmp	.+160    	; 0x38de <tat_trx_end_cb+0xac>
        /* RX_AACK_ON state. */
        
        /* Check if there is an event handler/callback assigned for this state. */
        if (NULL == rx_cb) {
    383e:	80 91 23 0c 	lds	r24, 0x0C23
    3842:	90 91 24 0c 	lds	r25, 0x0C24
    3846:	89 2b       	or	r24, r25
    3848:	09 f4       	brne	.+2      	; 0x384c <tat_trx_end_cb+0x1a>
    384a:	ad c0       	rjmp	.+346    	; 0x39a6 <tat_trx_end_cb+0x174>
            return;
        }
        
        /* Read frame length and check if it is valid. */
        RF230_QUICK_READ_FRAME_LENGTH(frame_length);
    384c:	28 98       	cbi	0x05, 0	; 5
    384e:	80 e2       	ldi	r24, 0x20	; 32
    3850:	8e bd       	out	0x2e, r24	; 46
    3852:	0d b4       	in	r0, 0x2d	; 45
    3854:	07 fe       	sbrs	r0, 7
    3856:	fd cf       	rjmp	.-6      	; 0x3852 <tat_trx_end_cb+0x20>
    3858:	8e b5       	in	r24, 0x2e	; 46
    385a:	80 93 28 0c 	sts	0x0C28, r24
    385e:	8e bd       	out	0x2e, r24	; 46
    3860:	0d b4       	in	r0, 0x2d	; 45
    3862:	07 fe       	sbrs	r0, 7
    3864:	fd cf       	rjmp	.-6      	; 0x3860 <tat_trx_end_cb+0x2e>
    3866:	8e b5       	in	r24, 0x2e	; 46
    3868:	8f 77       	andi	r24, 0x7F	; 127
    386a:	80 93 28 0c 	sts	0x0C28, r24
    386e:	28 9a       	sbi	0x05, 0	; 5
        if (frame_length < TAT_MIN_FRAME_LENGTH) {
    3870:	80 91 28 0c 	lds	r24, 0x0C28
    3874:	88 30       	cpi	r24, 0x08	; 8
    3876:	08 f4       	brcc	.+2      	; 0x387a <tat_trx_end_cb+0x48>
    3878:	96 c0       	rjmp	.+300    	; 0x39a6 <tat_trx_end_cb+0x174>
        /* Frame length is valid, so the radio transceiver is taken to a TX state
         * to protect the frame buffer. It will be up to the next higher layer to
         * put the radio transceiver either to sleep or back in RX_AACK_ON mode,
         * or to sleep.
         */
        RF230_QUICK_SUBREGISTER_WRITE(0x02, 0x1F, 0, CMD_PLL_ON);
    387a:	28 98       	cbi	0x05, 0	; 5
    387c:	82 e8       	ldi	r24, 0x82	; 130
    387e:	8e bd       	out	0x2e, r24	; 46
    3880:	0d b4       	in	r0, 0x2d	; 45
    3882:	07 fe       	sbrs	r0, 7
    3884:	fd cf       	rjmp	.-6      	; 0x3880 <tat_trx_end_cb+0x4e>
    3886:	8e b5       	in	r24, 0x2e	; 46
    3888:	8e bd       	out	0x2e, r24	; 46
    388a:	0d b4       	in	r0, 0x2d	; 45
    388c:	07 fe       	sbrs	r0, 7
    388e:	fd cf       	rjmp	.-6      	; 0x388a <tat_trx_end_cb+0x58>
    3890:	8e b5       	in	r24, 0x2e	; 46
    3892:	28 9a       	sbi	0x05, 0	; 5
    3894:	28 98       	cbi	0x05, 0	; 5
    3896:	92 ec       	ldi	r25, 0xC2	; 194
    3898:	9e bd       	out	0x2e, r25	; 46
    389a:	80 7e       	andi	r24, 0xE0	; 224
    389c:	89 60       	ori	r24, 0x09	; 9
    389e:	0d b4       	in	r0, 0x2d	; 45
    38a0:	07 fe       	sbrs	r0, 7
    38a2:	fd cf       	rjmp	.-6      	; 0x389e <tat_trx_end_cb+0x6c>
    38a4:	9e b5       	in	r25, 0x2e	; 46
    38a6:	8e bd       	out	0x2e, r24	; 46
    38a8:	0d b4       	in	r0, 0x2d	; 45
    38aa:	07 fe       	sbrs	r0, 7
    38ac:	fd cf       	rjmp	.-6      	; 0x38a8 <tat_trx_end_cb+0x76>
    38ae:	8e b5       	in	r24, 0x2e	; 46
    38b0:	28 9a       	sbi	0x05, 0	; 5
        
        /* Post to the VRT_KERNEL that the associated event must be executed. */
        if (0 == VRT_GET_ITEMS_FREE()) {
    38b2:	30 91 33 12 	lds	r19, 0x1233
    38b6:	33 23       	and	r19, r19
    38b8:	09 f4       	brne	.+2      	; 0x38bc <tat_trx_end_cb+0x8a>
    38ba:	51 c0       	rjmp	.+162    	; 0x395e <tat_trx_end_cb+0x12c>
            VRT_EVENT_MISSED();
            return;
        }
        
        vrt_quick_post_event(rx_cb, (void*)(&frame_length));
    38bc:	20 91 e1 11 	lds	r18, 0x11E1
    38c0:	44 e0       	ldi	r20, 0x04	; 4
    38c2:	24 9f       	mul	r18, r20
    38c4:	f0 01       	movw	r30, r0
    38c6:	11 24       	eor	r1, r1
    38c8:	ee 51       	subi	r30, 0x1E	; 30
    38ca:	fe 4e       	sbci	r31, 0xEE	; 238
    38cc:	80 91 23 0c 	lds	r24, 0x0C23
    38d0:	90 91 24 0c 	lds	r25, 0x0C24
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	80 83       	st	Z, r24
    38d8:	88 e2       	ldi	r24, 0x28	; 40
    38da:	9c e0       	ldi	r25, 0x0C	; 12
    38dc:	52 c0       	rjmp	.+164    	; 0x3982 <tat_trx_end_cb+0x150>
    } else {
        
        /* TX_ARET_ON state. */
        
        waiting_for_ack = false;
    38de:	10 92 27 0c 	sts	0x0C27, r1
        
        /* Read transaction status and go to TRX_OFF. It is up to the next higher
         * layer to put the radio transceiver in the next state.
         */
        RF230_QUICK_SUBREGISTER_READ(0x02, 0xE0, 5, transmission_status);
    38e2:	28 98       	cbi	0x05, 0	; 5
    38e4:	82 e8       	ldi	r24, 0x82	; 130
    38e6:	8e bd       	out	0x2e, r24	; 46
    38e8:	0d b4       	in	r0, 0x2d	; 45
    38ea:	07 fe       	sbrs	r0, 7
    38ec:	fd cf       	rjmp	.-6      	; 0x38e8 <tat_trx_end_cb+0xb6>
    38ee:	8e b5       	in	r24, 0x2e	; 46
    38f0:	80 93 0a 01 	sts	0x010A, r24
    38f4:	8e bd       	out	0x2e, r24	; 46
    38f6:	0d b4       	in	r0, 0x2d	; 45
    38f8:	07 fe       	sbrs	r0, 7
    38fa:	fd cf       	rjmp	.-6      	; 0x38f6 <tat_trx_end_cb+0xc4>
    38fc:	8e b5       	in	r24, 0x2e	; 46
    38fe:	80 93 0a 01 	sts	0x010A, r24
    3902:	28 9a       	sbi	0x05, 0	; 5
    3904:	80 91 0a 01 	lds	r24, 0x010A
    3908:	82 95       	swap	r24
    390a:	86 95       	lsr	r24
    390c:	87 70       	andi	r24, 0x07	; 7
    390e:	80 93 0a 01 	sts	0x010A, r24
        RF230_QUICK_SUBREGISTER_WRITE(0x02, 0x1F, 0, CMD_FORCE_TRX_OFF);
    3912:	28 98       	cbi	0x05, 0	; 5
    3914:	82 e8       	ldi	r24, 0x82	; 130
    3916:	8e bd       	out	0x2e, r24	; 46
    3918:	0d b4       	in	r0, 0x2d	; 45
    391a:	07 fe       	sbrs	r0, 7
    391c:	fd cf       	rjmp	.-6      	; 0x3918 <tat_trx_end_cb+0xe6>
    391e:	8e b5       	in	r24, 0x2e	; 46
    3920:	8e bd       	out	0x2e, r24	; 46
    3922:	0d b4       	in	r0, 0x2d	; 45
    3924:	07 fe       	sbrs	r0, 7
    3926:	fd cf       	rjmp	.-6      	; 0x3922 <tat_trx_end_cb+0xf0>
    3928:	8e b5       	in	r24, 0x2e	; 46
    392a:	28 9a       	sbi	0x05, 0	; 5
    392c:	28 98       	cbi	0x05, 0	; 5
    392e:	92 ec       	ldi	r25, 0xC2	; 194
    3930:	9e bd       	out	0x2e, r25	; 46
    3932:	80 7e       	andi	r24, 0xE0	; 224
    3934:	83 60       	ori	r24, 0x03	; 3
    3936:	0d b4       	in	r0, 0x2d	; 45
    3938:	07 fe       	sbrs	r0, 7
    393a:	fd cf       	rjmp	.-6      	; 0x3936 <tat_trx_end_cb+0x104>
    393c:	9e b5       	in	r25, 0x2e	; 46
    393e:	8e bd       	out	0x2e, r24	; 46
    3940:	0d b4       	in	r0, 0x2d	; 45
    3942:	07 fe       	sbrs	r0, 7
    3944:	fd cf       	rjmp	.-6      	; 0x3940 <tat_trx_end_cb+0x10e>
    3946:	8e b5       	in	r24, 0x2e	; 46
    3948:	28 9a       	sbi	0x05, 0	; 5
        
        /* Check if there is an event handler/callback assigned for this state. */
        if (NULL == tx_cb) {
    394a:	80 91 25 0c 	lds	r24, 0x0C25
    394e:	90 91 26 0c 	lds	r25, 0x0C26
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	41 f1       	breq	.+80     	; 0x39a6 <tat_trx_end_cb+0x174>
            return;
        }
        
        /* Check if it is possible to post event. */
        if (0 == VRT_GET_ITEMS_FREE()) {
    3956:	30 91 33 12 	lds	r19, 0x1233
    395a:	31 11       	cpse	r19, r1
    395c:	06 c0       	rjmp	.+12     	; 0x396a <tat_trx_end_cb+0x138>
            VRT_EVENT_MISSED();
    395e:	80 91 32 12 	lds	r24, 0x1232
    3962:	8f 5f       	subi	r24, 0xFF	; 255
    3964:	80 93 32 12 	sts	0x1232, r24
    3968:	08 95       	ret
            return;
        }
        
        vrt_quick_post_event(tx_cb, (void*)(&transmission_status));
    396a:	20 91 e1 11 	lds	r18, 0x11E1
    396e:	44 e0       	ldi	r20, 0x04	; 4
    3970:	24 9f       	mul	r18, r20
    3972:	f0 01       	movw	r30, r0
    3974:	11 24       	eor	r1, r1
    3976:	ee 51       	subi	r30, 0x1E	; 30
    3978:	fe 4e       	sbci	r31, 0xEE	; 238
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	8a e0       	ldi	r24, 0x0A	; 10
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	93 83       	std	Z+3, r25	; 0x03
    3984:	82 83       	std	Z+2, r24	; 0x02
    3986:	23 31       	cpi	r18, 0x13	; 19
    3988:	19 f4       	brne	.+6      	; 0x3990 <tat_trx_end_cb+0x15e>
    398a:	10 92 e1 11 	sts	0x11E1, r1
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <tat_trx_end_cb+0x164>
    3990:	2f 5f       	subi	r18, 0xFF	; 255
    3992:	20 93 e1 11 	sts	0x11E1, r18
    3996:	31 50       	subi	r19, 0x01	; 1
    3998:	30 93 33 12 	sts	0x1233, r19
    399c:	80 91 e0 11 	lds	r24, 0x11E0
    39a0:	8f 5f       	subi	r24, 0xFF	; 255
    39a2:	80 93 e0 11 	sts	0x11E0, r24
    39a6:	08 95       	ret

000039a8 <tat_init>:
static tat_cb_handler_t rx_cb = NULL;         //!< Pointer to function that will be posted to the VRT_KERNL when a new frame is received.
/*================================= PROTOTYPES       =========================*/
static void tat_trx_end_cb(uint8_t trx_isr_event);


bool tat_init(void) {
    39a8:	cf 93       	push	r28
    /* Initialize local varaibles. */
    transmission_status = 0xFF;
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	80 93 0a 01 	sts	0x010A, r24
    frame_length = 0;
    39b0:	10 92 28 0c 	sts	0x0C28, r1
    waiting_for_ack = false;
    39b4:	10 92 27 0c 	sts	0x0C27, r1
    tx_cb = NULL;
    39b8:	10 92 26 0c 	sts	0x0C26, r1
    39bc:	10 92 25 0c 	sts	0x0C25, r1
    rx_cb = NULL;
    39c0:	10 92 24 0c 	sts	0x0C24, r1
    39c4:	10 92 23 0c 	sts	0x0C23, r1
        
    /* Initialize the low level driver for the radio transceiver. */
    if (true != rf230_init()) {
    39c8:	0e 94 96 1a 	call	0x352c	; 0x352c <rf230_init>
    39cc:	c8 2f       	mov	r28, r24
    39ce:	81 11       	cpse	r24, r1
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <tat_init+0x2e>
        return false;
    39d2:	c0 e0       	ldi	r28, 0x00	; 0
    39d4:	55 c0       	rjmp	.+170    	; 0x3a80 <tat_init+0xd8>
    39d6:	8b ef       	ldi	r24, 0xFB	; 251
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <tat_init+0x32>
    39de:	00 c0       	rjmp	.+0      	; 0x39e0 <tat_init+0x38>
    39e0:	00 00       	nop
    }
    
    /* Take the radio transceiver to P_ON state. */
    delay_us(TIME_TO_ENTER_P_ON);
    
    rf230_set_tst_low();
    39e2:	2e 98       	cbi	0x05, 6	; 5
    rf230_set_rst_low();
    39e4:	2d 98       	cbi	0x05, 5	; 5
    rf230_set_slptr_low();
    39e6:	2c 98       	cbi	0x05, 4	; 5
    39e8:	90 e1       	ldi	r25, 0x10	; 16
    39ea:	9a 95       	dec	r25
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <tat_init+0x42>
    delay_us(TIME_RESET);    
    rf230_set_rst_high();
    39ee:	2d 9a       	sbi	0x05, 5	; 5
    39f0:	8f e5       	ldi	r24, 0x5F	; 95
    39f2:	99 e0       	ldi	r25, 0x09	; 9
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <tat_init+0x4c>
    39f8:	00 c0       	rjmp	.+0      	; 0x39fa <tat_init+0x52>
    39fa:	00 00       	nop
    39fc:	8f e5       	ldi	r24, 0x5F	; 95
    39fe:	99 e0       	ldi	r25, 0x09	; 9
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <tat_init+0x58>
    3a04:	00 c0       	rjmp	.+0      	; 0x3a06 <tat_init+0x5e>
    3a06:	00 00       	nop
    
    /* Could be that we were sleeping before we got here. */
    delay_us(TIME_SLEEP_TO_TRX_OFF);
    
    /* Force transition to TRX_OFF and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    3a08:	23 e0       	ldi	r18, 0x03	; 3
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	6f e1       	ldi	r22, 0x1F	; 31
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    3a14:	8b ef       	ldi	r24, 0xFB	; 251
    3a16:	93 e0       	ldi	r25, 0x03	; 3
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <tat_init+0x70>
    3a1c:	00 c0       	rjmp	.+0      	; 0x3a1e <tat_init+0x76>
    3a1e:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool rf230_init_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	6f e1       	ldi	r22, 0x1F	; 31
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3a2a:	88 30       	cpi	r24, 0x08	; 8
    3a2c:	91 f6       	brne	.-92     	; 0x39d2 <tat_init+0x2a>
    } else if (RF230_REVB != rf230_register_read(RG_VERSION_NUM)) {
    3a2e:	8d e1       	ldi	r24, 0x1D	; 29
    3a30:	0e 94 b3 1a 	call	0x3566	; 0x3566 <rf230_register_read>
    3a34:	82 30       	cpi	r24, 0x02	; 2
    3a36:	69 f6       	brne	.-102    	; 0x39d2 <tat_init+0x2a>
    } else if (RF230_SUPPORTED_MANUFACTURER_ID != rf230_register_read(RG_MAN_ID_0)) {
    3a38:	8e e1       	ldi	r24, 0x1E	; 30
    3a3a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <rf230_register_read>
    3a3e:	8f 31       	cpi	r24, 0x1F	; 31
    3a40:	41 f6       	brne	.-112    	; 0x39d2 <tat_init+0x2a>
    } else {
        /* Set callback handler for the interrupts signaled by the radio transceiver. */
        rf230_set_callback_handler(tat_trx_end_cb);
    3a42:	89 e1       	ldi	r24, 0x19	; 25
    3a44:	9c e1       	ldi	r25, 0x1C	; 28
    3a46:	0e 94 8f 1b 	call	0x371e	; 0x371e <rf230_set_callback_handler>
        
        /* Enable automatic CRC generation and set the ISR mask. */
        rf230_subregister_write(SR_CLKM_SHA_SEL, 0);
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	43 e0       	ldi	r20, 0x03	; 3
    3a4e:	68 e0       	ldi	r22, 0x08	; 8
    3a50:	83 e0       	ldi	r24, 0x03	; 3
    3a52:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_subregister_write(SR_CLKM_CTRL, 0);
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	67 e0       	ldi	r22, 0x07	; 7
    3a5c:	83 e0       	ldi	r24, 0x03	; 3
    3a5e:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_subregister_write(SR_TX_AUTO_CRC_ON, 1);
    3a62:	21 e0       	ldi	r18, 0x01	; 1
    3a64:	47 e0       	ldi	r20, 0x07	; 7
    3a66:	60 e8       	ldi	r22, 0x80	; 128
    3a68:	85 e0       	ldi	r24, 0x05	; 5
    3a6a:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        rf230_register_write(RG_IRQ_MASK, RF230_SUPPORTED_INTERRUPT_MASK);
    3a6e:	6c e0       	ldi	r22, 0x0C	; 12
    3a70:	8e e0       	ldi	r24, 0x0E	; 14
    3a72:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
        
        RF230_ENABLE_TRX_ISR();
    3a76:	80 91 6f 00 	lds	r24, 0x006F
    3a7a:	80 62       	ori	r24, 0x20	; 32
    3a7c:	80 93 6f 00 	sts	0x006F, r24
        
        rf230_init_status = true;
    }
    
    return rf230_init_status;
}
    3a80:	8c 2f       	mov	r24, r28
    3a82:	cf 91       	pop	r28
    3a84:	08 95       	ret

00003a86 <tat_go_to_sleep>:

void tat_go_to_sleep(void) {
    /* Reset the waiting for ack flag. Should only be set in the period between 
     * a frame being sent and until the associated ACK arrives (BUSY_TX_ARET).
     */
    waiting_for_ack = false;
    3a86:	10 92 27 0c 	sts	0x0C27, r1
    
    if (1 == rf230_get_slptr()) { return; } // Check that we are not already sleeping.
    3a8a:	1c 99       	sbic	0x03, 4	; 3
    3a8c:	16 c0       	rjmp	.+44     	; 0x3aba <tat_go_to_sleep+0x34>
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
    3a8e:	40 e0       	ldi	r20, 0x00	; 0
    3a90:	6f e1       	ldi	r22, 0x1F	; 31
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3a98:	88 30       	cpi	r24, 0x08	; 8
    3a9a:	41 f4       	brne	.+16     	; 0x3aac <tat_go_to_sleep+0x26>
            rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
        } while (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS));
    }
    
    /* Put the radio transceiver to sleep and wait until sleep state has been entered. */
    rf230_set_slptr_high(); // Go to SLEEP from TRX_OFF.
    3a9c:	2c 9a       	sbi	0x05, 4	; 5
    3a9e:	8f e5       	ldi	r24, 0x5F	; 95
    3aa0:	99 e0       	ldi	r25, 0x09	; 9
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	f1 f7       	brne	.-4      	; 0x3aa2 <tat_go_to_sleep+0x1c>
    3aa6:	00 c0       	rjmp	.+0      	; 0x3aa8 <tat_go_to_sleep+0x22>
    3aa8:	00 00       	nop
    3aaa:	08 95       	ret
    waiting_for_ack = false;
    
    if (1 == rf230_get_slptr()) { return; } // Check that we are not already sleeping.
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
        do {
            rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
    3aac:	28 e0       	ldi	r18, 0x08	; 8
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	6f e1       	ldi	r22, 0x1F	; 31
    3ab2:	82 e0       	ldi	r24, 0x02	; 2
    3ab4:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    3ab8:	ea cf       	rjmp	.-44     	; 0x3a8e <tat_go_to_sleep+0x8>
    3aba:	08 95       	ret

00003abc <tat_deinit>:
    return rf230_init_status;
}


void tat_deinit(void) {
    rf230_clear_callback_handler();
    3abc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <rf230_clear_callback_handler>
    
    /* Take the radio transceiver to sleep and then deinit the driver for the
     * radio transceiver.
     */
    tat_go_to_sleep();
    3ac0:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <tat_go_to_sleep>
    rf230_deinit();
    3ac4:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <rf230_deinit>

00003ac8 <tat_wake_up>:

bool tat_wake_up(void) {
    /* Reset the waiting for ack flag. Should only be set in the period between 
     * a frame being sent and until the associated ACK arrives (BUSY_TX_ARET).
     */
    waiting_for_ack = false;
    3ac8:	10 92 27 0c 	sts	0x0C27, r1
    
    /* Check if device is sleeping or not. */
    if (0 == rf230_get_slptr()) {
    3acc:	1c 9b       	sbis	0x03, 4	; 3
    3ace:	11 c0       	rjmp	.+34     	; 0x3af2 <tat_wake_up+0x2a>
        return true;
    }
    
    /* Devcie was sleeping: Wake it up. */
    rf230_set_slptr_low(); // Go to TRX_OFF from SLEEP.
    3ad0:	2c 98       	cbi	0x05, 4	; 5
    3ad2:	8f e9       	ldi	r24, 0x9F	; 159
    3ad4:	9f e0       	ldi	r25, 0x0F	; 15
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <tat_wake_up+0xe>
    3ada:	00 c0       	rjmp	.+0      	; 0x3adc <tat_wake_up+0x14>
    3adc:	00 00       	nop
    delay_us(2000); // Wait for state transition to complete.
    
    /* Verify that the device has entered the TRX_OFF state. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
    3ade:	40 e0       	ldi	r20, 0x00	; 0
    3ae0:	6f e1       	ldi	r22, 0x1F	; 31
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3ae8:	91 e0       	ldi	r25, 0x01	; 1
    3aea:	88 30       	cpi	r24, 0x08	; 8
    3aec:	19 f0       	breq	.+6      	; 0x3af4 <tat_wake_up+0x2c>
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <tat_wake_up+0x2c>
     */
    waiting_for_ack = false;
    
    /* Check if device is sleeping or not. */
    if (0 == rf230_get_slptr()) {
        return true;
    3af2:	91 e0       	ldi	r25, 0x01	; 1
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
        return false;
    } else {
        return true;
    }
}
    3af4:	89 2f       	mov	r24, r25
    3af6:	08 95       	ret

00003af8 <tat_reset>:
}


void tat_reset(void) {
    /* Make sure that the device is awake. */
    (bool)tat_wake_up();
    3af8:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <tat_wake_up>
    
    /* Make sure that TRX_OFF is entered. */
    do {
        rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    3afc:	23 e0       	ldi	r18, 0x03	; 3
    3afe:	40 e0       	ldi	r20, 0x00	; 0
    3b00:	6f e1       	ldi	r22, 0x1F	; 31
    3b02:	82 e0       	ldi	r24, 0x02	; 2
    3b04:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    } while (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS));
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	6f e1       	ldi	r22, 0x1F	; 31
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3b12:	88 30       	cpi	r24, 0x08	; 8
    3b14:	99 f7       	brne	.-26     	; 0x3afc <tat_reset+0x4>
    
    frame_length = 0;
    3b16:	10 92 28 0c 	sts	0x0C28, r1
    waiting_for_ack = false;
    3b1a:	10 92 27 0c 	sts	0x0C27, r1
    3b1e:	08 95       	ret

00003b20 <tat_set_pan_id>:
    /* Not implemented yet. */
    return 0;
}


void tat_set_pan_id(uint16_t pan_id) {
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	1f 92       	push	r1
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    uint8_t pan_id_byte = ((pan_id >> 8*0) & 0xFF); // Extract short_address_7_0.
    rf230_register_write(RG_PAN_ID_0, pan_id_byte);
    3b2a:	68 2f       	mov	r22, r24
    3b2c:	82 e2       	ldi	r24, 0x22	; 34
    3b2e:	99 83       	std	Y+1, r25	; 0x01
    3b30:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    
    pan_id_byte = ((pan_id >> 8*1) & 0xFF); // Extract short_address_15_8.
    rf230_register_write(RG_PAN_ID_1, pan_id_byte);
    3b34:	99 81       	ldd	r25, Y+1	; 0x01
    3b36:	69 2f       	mov	r22, r25
    3b38:	83 e2       	ldi	r24, 0x23	; 35
}
    3b3a:	0f 90       	pop	r0
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
void tat_set_pan_id(uint16_t pan_id) {
    uint8_t pan_id_byte = ((pan_id >> 8*0) & 0xFF); // Extract short_address_7_0.
    rf230_register_write(RG_PAN_ID_0, pan_id_byte);
    
    pan_id_byte = ((pan_id >> 8*1) & 0xFF); // Extract short_address_15_8.
    rf230_register_write(RG_PAN_ID_1, pan_id_byte);
    3b40:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <rf230_register_write>

00003b44 <tat_set_short_address>:
    /* Not implemented yet. */
    return 0;
}


void tat_set_short_address(uint16_t short_address) {
    3b44:	cf 93       	push	r28
    3b46:	df 93       	push	r29
    3b48:	1f 92       	push	r1
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    uint8_t address_byte = ((short_address >> 8*0) & 0xFF); // Extract short_address_7_0.
    rf230_register_write(RG_SHORT_ADDR_0, address_byte);
    3b4e:	68 2f       	mov	r22, r24
    3b50:	80 e2       	ldi	r24, 0x20	; 32
    3b52:	99 83       	std	Y+1, r25	; 0x01
    3b54:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    
    address_byte = ((short_address >> 8*1) & 0xFF); // Extract short_address_15_8.
    rf230_register_write(RG_SHORT_ADDR_1, address_byte);
    3b58:	99 81       	ldd	r25, Y+1	; 0x01
    3b5a:	69 2f       	mov	r22, r25
    3b5c:	81 e2       	ldi	r24, 0x21	; 33
}
    3b5e:	0f 90       	pop	r0
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
void tat_set_short_address(uint16_t short_address) {
    uint8_t address_byte = ((short_address >> 8*0) & 0xFF); // Extract short_address_7_0.
    rf230_register_write(RG_SHORT_ADDR_0, address_byte);
    
    address_byte = ((short_address >> 8*1) & 0xFF); // Extract short_address_15_8.
    rf230_register_write(RG_SHORT_ADDR_1, address_byte);
    3b64:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <rf230_register_write>

00003b68 <tat_set_ieee_address>:
    /* Not implemented yet. */
    return 0;
}


void tat_set_ieee_address(const uint8_t *ieee_address) {
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	ec 01       	movw	r28, r24
    rf230_register_write(RG_IEEE_ADDR_0, *ieee_address++);
    3b6e:	68 81       	ld	r22, Y
    3b70:	84 e2       	ldi	r24, 0x24	; 36
    3b72:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_1, *ieee_address++);
    3b76:	69 81       	ldd	r22, Y+1	; 0x01
    3b78:	85 e2       	ldi	r24, 0x25	; 37
    3b7a:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_2, *ieee_address++);
    3b7e:	6a 81       	ldd	r22, Y+2	; 0x02
    3b80:	86 e2       	ldi	r24, 0x26	; 38
    3b82:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_3, *ieee_address++);
    3b86:	6b 81       	ldd	r22, Y+3	; 0x03
    3b88:	87 e2       	ldi	r24, 0x27	; 39
    3b8a:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_4, *ieee_address++);
    3b8e:	6c 81       	ldd	r22, Y+4	; 0x04
    3b90:	88 e2       	ldi	r24, 0x28	; 40
    3b92:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_5, *ieee_address++);
    3b96:	6d 81       	ldd	r22, Y+5	; 0x05
    3b98:	89 e2       	ldi	r24, 0x29	; 41
    3b9a:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_6, *ieee_address++);
    3b9e:	6e 81       	ldd	r22, Y+6	; 0x06
    3ba0:	8a e2       	ldi	r24, 0x2A	; 42
    3ba2:	0e 94 ce 1a 	call	0x359c	; 0x359c <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_7, *ieee_address++);
    3ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba8:	8b e2       	ldi	r24, 0x2B	; 43
}
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    rf230_register_write(RG_IEEE_ADDR_2, *ieee_address++);
    rf230_register_write(RG_IEEE_ADDR_3, *ieee_address++);
    rf230_register_write(RG_IEEE_ADDR_4, *ieee_address++);
    rf230_register_write(RG_IEEE_ADDR_5, *ieee_address++);
    rf230_register_write(RG_IEEE_ADDR_6, *ieee_address++);
    rf230_register_write(RG_IEEE_ADDR_7, *ieee_address++);
    3bae:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <rf230_register_write>

00003bb2 <tat_set_pan_coordinator>:
}


void tat_set_pan_coordinator(bool iam_pan_coordinator) {
    if (true != iam_pan_coordinator) {
    3bb2:	81 11       	cpse	r24, r1
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <tat_set_pan_coordinator+0x8>
        rf230_subregister_write(SR_I_AM_COORD, 0);
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	01 c0       	rjmp	.+2      	; 0x3bbc <tat_set_pan_coordinator+0xa>
    } else {
        rf230_subregister_write(SR_I_AM_COORD, 1);
    3bba:	21 e0       	ldi	r18, 0x01	; 1
    3bbc:	43 e0       	ldi	r20, 0x03	; 3
    3bbe:	68 e0       	ldi	r22, 0x08	; 8
    3bc0:	8e e2       	ldi	r24, 0x2E	; 46
    3bc2:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <rf230_subregister_write>

00003bc6 <tat_send_frame>:
    }
}


bool tat_send_frame(uint8_t length, const uint8_t *frame) {
    3bc6:	cf 93       	push	r28
    3bc8:	df 93       	push	r29
    3bca:	1f 92       	push	r1
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the function parameters are sane. */
    if (0 == length) {
    3bd0:	88 23       	and	r24, r24
    3bd2:	b9 f0       	breq	.+46     	; 0x3c02 <tat_send_frame+0x3c>
        return false;
    }
    
    if (NULL == frame) {
    3bd4:	61 15       	cp	r22, r1
    3bd6:	71 05       	cpc	r23, r1
    3bd8:	a1 f0       	breq	.+40     	; 0x3c02 <tat_send_frame+0x3c>
        return false;
    }
    
    ENTER_CRITICAL_REGION();
    3bda:	9f b7       	in	r25, 0x3f	; 63
    3bdc:	99 83       	std	Y+1, r25	; 0x01
    3bde:	f8 94       	cli
    
    /* Check that we are not busy transmitting a frame already. */
    if (true == waiting_for_ack) {
    3be0:	90 91 27 0c 	lds	r25, 0x0C27
    3be4:	99 23       	and	r25, r25
    3be6:	19 f0       	breq	.+6      	; 0x3bee <tat_send_frame+0x28>
        LEAVE_CRITICAL_REGION();    
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	8f bf       	out	0x3f, r24	; 63
    3bec:	0a c0       	rjmp	.+20     	; 0x3c02 <tat_send_frame+0x3c>
    
    /*
     * Toggle the SLP_TR pin to quickly initiate Initiate
     * frame transmission.
     */
    rf230_set_slptr_high();
    3bee:	2c 9a       	sbi	0x05, 4	; 5
    rf230_set_slptr_low();
    3bf0:	2c 98       	cbi	0x05, 4	; 5

    LEAVE_CRITICAL_REGION();
    3bf2:	99 81       	ldd	r25, Y+1	; 0x01
    3bf4:	9f bf       	out	0x3f, r25	; 63
    
    rf230_frame_write(length, frame);
    3bf6:	0e 94 23 1b 	call	0x3646	; 0x3646 <rf230_frame_write>
    waiting_for_ack = true;
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	80 93 27 0c 	sts	0x0C27, r24
    
    return true;
    3c00:	01 c0       	rjmp	.+2      	; 0x3c04 <tat_send_frame+0x3e>


bool tat_send_frame(uint8_t length, const uint8_t *frame) {
    /* Verify that the function parameters are sane. */
    if (0 == length) {
        return false;
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    
    rf230_frame_write(length, frame);
    waiting_for_ack = true;
    
    return true;
}
    3c04:	0f 90       	pop	r0
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	08 95       	ret

00003c0c <tat_read_frame>:


bool tat_read_frame(uint8_t length, uint8_t *rd_buffer) {
    /* Perform sanity check on function parameters. */
    if (0 == length) {
    3c0c:	88 23       	and	r24, r24
    3c0e:	39 f0       	breq	.+14     	; 0x3c1e <tat_read_frame+0x12>
        return false;
    }
    
    if (NULL == rd_buffer) {
    3c10:	61 15       	cp	r22, r1
    3c12:	71 05       	cpc	r23, r1
    3c14:	21 f0       	breq	.+8      	; 0x3c1e <tat_read_frame+0x12>
        return false;
    }
    
    /* Upload farme from the frame buffer. */
    rf230_frame_read(length, rd_buffer);
    3c16:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <rf230_frame_read>
    
    return true;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	08 95       	ret


bool tat_read_frame(uint8_t length, uint8_t *rd_buffer) {
    /* Perform sanity check on function parameters. */
    if (0 == length) {
        return false;
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    
    /* Upload farme from the frame buffer. */
    rf230_frame_read(length, rd_buffer);
    
    return true;
}
    3c20:	08 95       	ret

00003c22 <tat_get_state>:


uint8_t tat_get_state(void) {
    return rf230_subregister_read(SR_TRX_STATUS);
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	6f e1       	ldi	r22, 0x1F	; 31
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <rf230_subregister_read>

00003c2c <tat_set_state>:
}


bool tat_set_state(uint8_t new_state) {
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	c8 2f       	mov	r28, r24
    /* Reset the waiting for ack flag. Should only be set in the period between 
     * a frame being sent and until the associated ACK arrives (BUSY_TX_ARET).
     */
    waiting_for_ack = false;
    3c32:	10 92 27 0c 	sts	0x0C27, r1
    
    /*Check function paramter and current state of the radio transceiver.*/
    if (!((new_state == TRX_OFF ) || (new_state == RX_ON) || (new_state == PLL_ON) || 
    3c36:	88 ef       	ldi	r24, 0xF8	; 248
    3c38:	8c 0f       	add	r24, r28
    3c3a:	82 30       	cpi	r24, 0x02	; 2
    3c3c:	38 f0       	brcs	.+14     	; 0x3c4c <tat_set_state+0x20>
    3c3e:	8c 2f       	mov	r24, r28
    3c40:	8f 7e       	andi	r24, 0xEF	; 239
    3c42:	86 30       	cpi	r24, 0x06	; 6
    3c44:	19 f0       	breq	.+6      	; 0x3c4c <tat_set_state+0x20>
    3c46:	c9 31       	cpi	r28, 0x19	; 25
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <tat_set_state+0x20>
    3c4a:	54 c0       	rjmp	.+168    	; 0x3cf4 <tat_set_state+0xc8>
        (new_state == RX_AACK_ON ) || (new_state == TX_ARET_ON ))) {
            return false;
    }
    
    /* Check if the radio transceiver is sleeping. */
    if (rf230_get_slptr() == 1) {
    3c4c:	1c 99       	sbic	0x03, 4	; 3
    3c4e:	52 c0       	rjmp	.+164    	; 0x3cf4 <tat_set_state+0xc8>
        return false;
    }
    
    uint8_t original_state = rf230_subregister_read(SR_TRX_STATUS);
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	6f e1       	ldi	r22, 0x1F	; 31
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3c5a:	d8 2f       	mov	r29, r24
    
    if ((original_state == BUSY_RX ) || (original_state == BUSY_TX) || 
    3c5c:	8f 7e       	andi	r24, 0xEF	; 239
    3c5e:	81 50       	subi	r24, 0x01	; 1
    3c60:	82 30       	cpi	r24, 0x02	; 2
    3c62:	08 f4       	brcc	.+2      	; 0x3c66 <tat_set_state+0x3a>
    3c64:	47 c0       	rjmp	.+142    	; 0x3cf4 <tat_set_state+0xc8>
        (original_state == BUSY_RX_AACK) || (original_state == BUSY_TX_ARET)) { return false; }
    
    if (new_state == original_state) { return true; }
    3c66:	cd 17       	cp	r28, r29
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <tat_set_state+0x40>
    3c6a:	46 c0       	rjmp	.+140    	; 0x3cf8 <tat_set_state+0xcc>
    //At this point it is clear that the requested new_state is:
    //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
                
    //The radio transceiver can be in one of the following states:
    //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON, TX_ARET_ON.
    if(new_state == TRX_OFF){
    3c6c:	c8 30       	cpi	r28, 0x08	; 8
    3c6e:	59 f4       	brne	.+22     	; 0x3c86 <tat_set_state+0x5a>
        rf230_set_slptr_low();
    3c70:	2c 98       	cbi	0x05, 4	; 5
    3c72:	80 e1       	ldi	r24, 0x10	; 16
    3c74:	8a 95       	dec	r24
    3c76:	f1 f7       	brne	.-4      	; 0x3c74 <tat_set_state+0x48>
        delay_us(TIME_NOCLK_TO_WAKE);
        rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    3c78:	23 e0       	ldi	r18, 0x03	; 3
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	6f e1       	ldi	r22, 0x1F	; 31
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    3c84:	2b c0       	rjmp	.+86     	; 0x3cdc <tat_set_state+0xb0>
        delay_us(TIME_CMD_FORCE_TRX_OFF);
    } else {
        
        //It is not allowed to go from RX_AACK_ON or TX_AACK_ON and directly to
        //TX_AACK_ON or RX_AACK_ON respectively. Need to go via RX_ON or PLL_ON.
        if ((new_state == TX_ARET_ON) && (original_state == RX_AACK_ON)) {
    3c86:	c9 31       	cpi	r28, 0x19	; 25
    3c88:	61 f4       	brne	.+24     	; 0x3ca2 <tat_set_state+0x76>
    3c8a:	d6 31       	cpi	r29, 0x16	; 22
    3c8c:	c1 f4       	brne	.+48     	; 0x3cbe <tat_set_state+0x92>
            
            //First do intermediate state transition to PLL_ON, then to TX_ARET_ON.
            //The final state transition to TX_ARET_ON is handled after the if-else if.
            rf230_subregister_write(SR_TRX_CMD, PLL_ON);
    3c8e:	29 e0       	ldi	r18, 0x09	; 9
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	6f e1       	ldi	r22, 0x1F	; 31
    3c94:	82 e0       	ldi	r24, 0x02	; 2
    3c96:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    3c9a:	82 e0       	ldi	r24, 0x02	; 2
    3c9c:	8a 95       	dec	r24
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <tat_set_state+0x70>
    3ca0:	0d c0       	rjmp	.+26     	; 0x3cbc <tat_set_state+0x90>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
        } else if ((new_state == RX_AACK_ON) && (original_state == TX_ARET_ON)) {
    3ca2:	c6 31       	cpi	r28, 0x16	; 22
    3ca4:	61 f4       	brne	.+24     	; 0x3cbe <tat_set_state+0x92>
    3ca6:	d9 31       	cpi	r29, 0x19	; 25
    3ca8:	51 f4       	brne	.+20     	; 0x3cbe <tat_set_state+0x92>
            
            //First do intermediate state transition to RX_ON, then to RX_AACK_ON.
            //The final state transition to RX_AACK_ON is handled after the if-else if.
            rf230_subregister_write(SR_TRX_CMD, RX_ON);
    3caa:	26 e0       	ldi	r18, 0x06	; 6
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	6f e1       	ldi	r22, 0x1F	; 31
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    3cb6:	92 e0       	ldi	r25, 0x02	; 2
    3cb8:	9a 95       	dec	r25
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <tat_set_state+0x8c>
    3cbc:	00 c0       	rjmp	.+0      	; 0x3cbe <tat_set_state+0x92>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
        }
            
        //Any other state transition can be done directly.    
        rf230_subregister_write(SR_TRX_CMD, new_state);
    3cbe:	2c 2f       	mov	r18, r28
    3cc0:	40 e0       	ldi	r20, 0x00	; 0
    3cc2:	6f e1       	ldi	r22, 0x1F	; 31
    3cc4:	82 e0       	ldi	r24, 0x02	; 2
    3cc6:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
        
        //When the PLL is active most states can be reached in 1us. However, from
        //TRX_OFF the PLL needs time to activate.
        if (original_state == TRX_OFF) {
    3cca:	d8 30       	cpi	r29, 0x08	; 8
    3ccc:	39 f4       	brne	.+14     	; 0x3cdc <tat_set_state+0xb0>
    3cce:	87 e6       	ldi	r24, 0x67	; 103
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	f1 f7       	brne	.-4      	; 0x3cd2 <tat_set_state+0xa6>
    3cd6:	00 c0       	rjmp	.+0      	; 0x3cd8 <tat_set_state+0xac>
    3cd8:	00 00       	nop
    3cda:	04 c0       	rjmp	.+8      	; 0x3ce4 <tat_set_state+0xb8>
    3cdc:	92 e0       	ldi	r25, 0x02	; 2
    3cde:	9a 95       	dec	r25
    3ce0:	f1 f7       	brne	.-4      	; 0x3cde <tat_set_state+0xb2>
    3ce2:	00 c0       	rjmp	.+0      	; 0x3ce4 <tat_set_state+0xb8>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
        }
    }
        
    /*Verify state transition.*/
    if(rf230_subregister_read(SR_TRX_STATUS) == new_state) { 
    3ce4:	40 e0       	ldi	r20, 0x00	; 0
    3ce6:	6f e1       	ldi	r22, 0x1F	; 31
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	8c 17       	cp	r24, r28
    3cf2:	19 f0       	breq	.+6      	; 0x3cfa <tat_set_state+0xce>
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	01 c0       	rjmp	.+2      	; 0x3cfa <tat_set_state+0xce>
    uint8_t original_state = rf230_subregister_read(SR_TRX_STATUS);
    
    if ((original_state == BUSY_RX ) || (original_state == BUSY_TX) || 
        (original_state == BUSY_RX_AACK) || (original_state == BUSY_TX_ARET)) { return false; }
    
    if (new_state == original_state) { return true; }
    3cf8:	91 e0       	ldi	r25, 0x01	; 1
    if(rf230_subregister_read(SR_TRX_STATUS) == new_state) { 
        return true; 
    } else {
        return false;
    }
}
    3cfa:	89 2f       	mov	r24, r25
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	08 95       	ret

00003d02 <tat_set_channel>:
uint8_t tat_get_channel(void) {
    return 0;
}


bool tat_set_channel(uint8_t channel) {
    3d02:	cf 93       	push	r28
    3d04:	c8 2f       	mov	r28, r24
    /* Check that the selected channel is within bounds. */
    if ((channel < TAT_MIN_CHANNEL) || (channel > TAT_MAX_CHANNEL)) {
    3d06:	85 ef       	ldi	r24, 0xF5	; 245
    3d08:	8c 0f       	add	r24, r28
    3d0a:	80 31       	cpi	r24, 0x10	; 16
    3d0c:	68 f4       	brcc	.+26     	; 0x3d28 <tat_set_channel+0x26>
        return false;
    }
    
    /*Set new operating channel.*/        
    rf230_subregister_write(SR_CHANNEL, channel);
    3d0e:	2c 2f       	mov	r18, r28
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	6f e1       	ldi	r22, 0x1F	; 31
    3d14:	88 e0       	ldi	r24, 0x08	; 8
    3d16:	0e 94 00 1b 	call	0x3600	; 0x3600 <rf230_subregister_write>
    
    bool set_channel_status = false;
    /* Verify that the channel was set. */
    if (channel == rf230_subregister_read(SR_CHANNEL)) {
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	6f e1       	ldi	r22, 0x1F	; 31
    3d1e:	88 e0       	ldi	r24, 0x08	; 8
    3d20:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <rf230_subregister_read>
    3d24:	91 e0       	ldi	r25, 0x01	; 1
    3d26:	c8 13       	cpse	r28, r24


bool tat_set_channel(uint8_t channel) {
    /* Check that the selected channel is within bounds. */
    if ((channel < TAT_MIN_CHANNEL) || (channel > TAT_MAX_CHANNEL)) {
        return false;
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    if (channel == rf230_subregister_read(SR_CHANNEL)) {
        set_channel_status = true;
    }
    
    return set_channel_status;
}
    3d2a:	89 2f       	mov	r24, r25
    3d2c:	cf 91       	pop	r28
    3d2e:	08 95       	ret

00003d30 <tat_set_tx_callback_handler>:


void tat_set_tx_callback_handler(tat_cb_handler_t handler) {
    3d30:	cf 93       	push	r28
    3d32:	df 93       	push	r29
    3d34:	1f 92       	push	r1
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    3d3a:	2f b7       	in	r18, 0x3f	; 63
    3d3c:	29 83       	std	Y+1, r18	; 0x01
    3d3e:	f8 94       	cli
    tx_cb = handler;
    3d40:	90 93 26 0c 	sts	0x0C26, r25
    3d44:	80 93 25 0c 	sts	0x0C25, r24
    LEAVE_CRITICAL_REGION();
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	8f bf       	out	0x3f, r24	; 63
}
    3d4c:	0f 90       	pop	r0
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	08 95       	ret

00003d54 <tat_set_rx_callback_handler>:
    tx_cb = NULL;
    LEAVE_CRITICAL_REGION();
}


void tat_set_rx_callback_handler(tat_cb_handler_t handler) {
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	1f 92       	push	r1
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    3d5e:	2f b7       	in	r18, 0x3f	; 63
    3d60:	29 83       	std	Y+1, r18	; 0x01
    3d62:	f8 94       	cli
    rx_cb = handler;
    3d64:	90 93 24 0c 	sts	0x0C24, r25
    3d68:	80 93 23 0c 	sts	0x0C23, r24
    LEAVE_CRITICAL_REGION();
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	8f bf       	out	0x3f, r24	; 63
}
    3d70:	0f 90       	pop	r0
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	08 95       	ret

00003d78 <usb_config_ep>:
//! NOTE:
//! The endpoint 0 shall always be configured in CONTROL type.
//!
uint8_t usb_config_ep(uint8_t config0, uint8_t config1)
{
    Usb_enable_endpoint();
    3d78:	eb ee       	ldi	r30, 0xEB	; 235
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	90 81       	ld	r25, Z
    3d7e:	91 60       	ori	r25, 0x01	; 1
    3d80:	90 83       	st	Z, r25
    UECFG0X = config0;
    3d82:	80 93 ec 00 	sts	0x00EC, r24
    UECFG1X = (UECFG1X & (1<<ALLOC)) | config1;
    3d86:	ed ee       	ldi	r30, 0xED	; 237
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	82 70       	andi	r24, 0x02	; 2
    3d8e:	68 2b       	or	r22, r24
    3d90:	60 83       	st	Z, r22
    Usb_allocate_memory();
    3d92:	80 81       	ld	r24, Z
    3d94:	82 60       	ori	r24, 0x02	; 2
    3d96:	80 83       	st	Z, r24
    return (Is_endpoint_configured());
    3d98:	80 91 ee 00 	lds	r24, 0x00EE
}
    3d9c:	88 1f       	adc	r24, r24
    3d9e:	88 27       	eor	r24, r24
    3da0:	88 1f       	adc	r24, r24
    3da2:	08 95       	ret

00003da4 <usb_init_device>:
//!
//! @returns Zero is returned if the device could not be initialized. A non-zero,
//!          positive number is returned if the initialization was successful.
uint8_t usb_init_device (void)
{
   Usb_select_device();
    3da4:	80 91 d8 00 	lds	r24, 0x00D8
    3da8:	8f 7b       	andi	r24, 0xBF	; 191
    3daa:	80 93 d8 00 	sts	0x00D8, r24
   if(Is_usb_id_device())
    3dae:	80 91 d9 00 	lds	r24, 0x00D9
    3db2:	81 ff       	sbrs	r24, 1
    3db4:	0c c0       	rjmp	.+24     	; 0x3dce <usb_init_device+0x2a>
   {
      Usb_select_endpoint(EP_CONTROL);
    3db6:	10 92 e9 00 	sts	0x00E9, r1
      if(!Is_usb_endpoint_enabled())
    3dba:	80 91 eb 00 	lds	r24, 0x00EB
    3dbe:	80 fd       	sbrc	r24, 0
    3dc0:	06 c0       	rjmp	.+12     	; 0x3dce <usb_init_device+0x2a>
      {
         return usb_configure_endpoint(EP_CONTROL,    \
    3dc2:	10 92 e9 00 	sts	0x00E9, r1
    3dc6:	60 e3       	ldi	r22, 0x30	; 48
    3dc8:	82 e0       	ldi	r24, 0x02	; 2
    3dca:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <usb_config_ep>
                                NYET_DISABLED);
      }
   }
   return false;

}
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	08 95       	ret

00003dd2 <usb_user_read_request>:
  {
    default:
         return false;
  }
	
}
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	08 95       	ret

00003dd6 <usb_user_endpoint_init>:

//! usb_user_endpoint_init.
//!
//! This function configures the endpoints.
void usb_user_endpoint_init(void)
{
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
 usb_configure_endpoint(EP_IN,          
    3dda:	c9 ee       	ldi	r28, 0xE9	; 233
    3ddc:	d0 e0       	ldi	r29, 0x00	; 0
    3dde:	84 e0       	ldi	r24, 0x04	; 4
    3de0:	88 83       	st	Y, r24
    3de2:	60 e3       	ldi	r22, 0x30	; 48
    3de4:	81 e8       	ldi	r24, 0x81	; 129
    3de6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <usb_config_ep>
                        
                         ONE_BANK,
                        
                         NYET_ENABLED);
 
 usb_configure_endpoint(EP_OUT,        
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	88 83       	st	Y, r24
    3dee:	60 e3       	ldi	r22, 0x30	; 48
    3df0:	80 e8       	ldi	r24, 0x80	; 128
    3df2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <usb_config_ep>
                        
                         ONE_BANK,
                        
                         NYET_ENABLED);

usb_configure_endpoint(EP_EVENT,        
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	88 83       	st	Y, r24
    3dfa:	64 e3       	ldi	r22, 0x34	; 52
    3dfc:	81 e8       	ldi	r24, 0x81	; 129
                         TYPE_BULK,     
                         DIRECTION_IN,
                            SIZE_64,
                         TWO_BANKS,
                         NYET_ENABLED);
}
    3dfe:	df 91       	pop	r29
    3e00:	cf 91       	pop	r28
                        
                         ONE_BANK,
                        
                         NYET_ENABLED);

usb_configure_endpoint(EP_EVENT,        
    3e02:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <usb_config_ep>

00003e06 <usb_user_get_descriptor>:
//! @retval true The descriptor was found and put in the TX buffer. False is
//!              returned if the descriptor could not be found.

bool usb_user_get_descriptor(uint8_t type, uint8_t string)
{
    switch(type)
    3e06:	83 30       	cpi	r24, 0x03	; 3
    3e08:	21 f5       	brne	.+72     	; 0x3e52 <usb_user_get_descriptor+0x4c>
    {
        case STRING_DESCRIPTOR:
	        switch (string)
    3e0a:	61 30       	cpi	r22, 0x01	; 1
    3e0c:	89 f0       	breq	.+34     	; 0x3e30 <usb_user_get_descriptor+0x2a>
    3e0e:	50 f0       	brcs	.+20     	; 0x3e24 <usb_user_get_descriptor+0x1e>
    3e10:	62 30       	cpi	r22, 0x02	; 2
    3e12:	a1 f0       	breq	.+40     	; 0x3e3c <usb_user_get_descriptor+0x36>
    3e14:	63 30       	cpi	r22, 0x03	; 3
    3e16:	e9 f4       	brne	.+58     	; 0x3e52 <usb_user_get_descriptor+0x4c>
		            data_to_transfer = sizeof (usb_user_product_string_descriptor);
		            pbuffer = &(usb_user_product_string_descriptor.bLength);
		            return true;

	            case SN_INDEX:
		            data_to_transfer = sizeof (usb_user_serial_number);
    3e18:	8c e1       	ldi	r24, 0x1C	; 28
    3e1a:	80 93 dc 11 	sts	0x11DC, r24
		            pbuffer = &(usb_user_serial_number.bLength);
    3e1e:	8f e0       	ldi	r24, 0x0F	; 15
    3e20:	91 e0       	ldi	r25, 0x01	; 1
    3e22:	11 c0       	rjmp	.+34     	; 0x3e46 <usb_user_get_descriptor+0x40>
    {
        case STRING_DESCRIPTOR:
	        switch (string)
	        {
    	        case LANG_ID:
		            data_to_transfer = sizeof (usb_user_language_id);
    3e24:	84 e0       	ldi	r24, 0x04	; 4
    3e26:	80 93 dc 11 	sts	0x11DC, r24
		            pbuffer = &(usb_user_language_id.bLength);
    3e2a:	8b e0       	ldi	r24, 0x0B	; 11
    3e2c:	91 e0       	ldi	r25, 0x01	; 1
    3e2e:	0b c0       	rjmp	.+22     	; 0x3e46 <usb_user_get_descriptor+0x40>
		            return true;

	            case MAN_INDEX:
		            data_to_transfer = sizeof (usb_user_manufacturer_string_descriptor);
    3e30:	8c e0       	ldi	r24, 0x0C	; 12
    3e32:	80 93 dc 11 	sts	0x11DC, r24
		            pbuffer = &(usb_user_manufacturer_string_descriptor.bLength);
    3e36:	81 e4       	ldi	r24, 0x41	; 65
    3e38:	91 e0       	ldi	r25, 0x01	; 1
    3e3a:	05 c0       	rjmp	.+10     	; 0x3e46 <usb_user_get_descriptor+0x40>
		            return true;

	            case PROD_INDEX:
		            data_to_transfer = sizeof (usb_user_product_string_descriptor);
    3e3c:	86 e1       	ldi	r24, 0x16	; 22
    3e3e:	80 93 dc 11 	sts	0x11DC, r24
		            pbuffer = &(usb_user_product_string_descriptor.bLength);
    3e42:	8b e2       	ldi	r24, 0x2B	; 43
    3e44:	91 e0       	ldi	r25, 0x01	; 1
		            return true;

	            case SN_INDEX:
		            data_to_transfer = sizeof (usb_user_serial_number);
		            pbuffer = &(usb_user_serial_number.bLength);
    3e46:	90 93 de 11 	sts	0x11DE, r25
    3e4a:	80 93 dd 11 	sts	0x11DD, r24
		            return true;
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	08 95       	ret

	            default:
		            return false;
    3e52:	80 e0       	ldi	r24, 0x00	; 0
	        }
	
	    default:
		    return false;
	}
}
    3e54:	08 95       	ret

00003e56 <usb_process_request>:
//! function, the device is ready to manage the next request.
void usb_process_request(void)
{
	uint8_t	 bmRequest;

   bmRequestType = Usb_read_byte();
    3e56:	80 91 f1 00 	lds	r24, 0x00F1
    3e5a:	80 93 29 0c 	sts	0x0C29, r24
   bmRequest     = Usb_read_byte();
    3e5e:	90 91 f1 00 	lds	r25, 0x00F1

   switch (bmRequest)
    3e62:	49 2f       	mov	r20, r25
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	4b 30       	cpi	r20, 0x0B	; 11
    3e68:	51 05       	cpc	r21, r1
    3e6a:	08 f0       	brcs	.+2      	; 0x3e6e <usb_process_request+0x18>
    3e6c:	94 c1       	rjmp	.+808    	; 0x4196 <usb_process_request+0x340>
    3e6e:	fa 01       	movw	r30, r20
    3e70:	ee 57       	subi	r30, 0x7E	; 126
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__tablejump2__>
   {
    case GET_DESCRIPTOR:
         if (0x80 == bmRequestType) { usb_get_descriptor(); }
    3e78:	80 38       	cpi	r24, 0x80	; 128
    3e7a:	09 f0       	breq	.+2      	; 0x3e7e <usb_process_request+0x28>
    3e7c:	87 c0       	rjmp	.+270    	; 0x3f8c <usb_process_request+0x136>
    uint8_t  descriptor_type;
    uint8_t  string_type;
    uint8_t  dummy;
    uint8_t  nb_byte;

   zlp             = false;                  /* no zero length packet */
    3e7e:	10 92 2d 0c 	sts	0x0C2D, r1
   string_type     = Usb_read_byte();        /* read LSB of wValue    */
    3e82:	60 91 f1 00 	lds	r22, 0x00F1
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */
    3e86:	80 91 f1 00 	lds	r24, 0x00F1

   switch (descriptor_type)
    3e8a:	81 30       	cpi	r24, 0x01	; 1
    3e8c:	41 f0       	breq	.+16     	; 0x3e9e <usb_process_request+0x48>
    3e8e:	82 30       	cpi	r24, 0x02	; 2
    3e90:	81 f4       	brne	.+32     	; 0x3eb2 <usb_process_request+0x5c>
    case DEVICE_DESCRIPTOR:
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
      pbuffer          = Usb_get_dev_desc_pointer();
      break;
    case CONFIGURATION_DESCRIPTOR:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
    3e92:	87 e2       	ldi	r24, 0x27	; 39
    3e94:	80 93 dc 11 	sts	0x11DC, r24
      pbuffer          = Usb_get_conf_desc_pointer();
    3e98:	8d e4       	ldi	r24, 0x4D	; 77
    3e9a:	91 e0       	ldi	r25, 0x01	; 1
    3e9c:	05 c0       	rjmp	.+10     	; 0x3ea8 <usb_process_request+0x52>
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */

   switch (descriptor_type)
   {
    case DEVICE_DESCRIPTOR:
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
    3e9e:	82 e1       	ldi	r24, 0x12	; 18
    3ea0:	80 93 dc 11 	sts	0x11DC, r24
      pbuffer          = Usb_get_dev_desc_pointer();
    3ea4:	84 e7       	ldi	r24, 0x74	; 116
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
      break;
    case CONFIGURATION_DESCRIPTOR:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
      pbuffer          = Usb_get_conf_desc_pointer();
    3ea8:	90 93 de 11 	sts	0x11DE, r25
    3eac:	80 93 dd 11 	sts	0x11DD, r24
    3eb0:	05 c0       	rjmp	.+10     	; 0x3ebc <usb_process_request+0x66>
      break;
    default:
      if( usb_user_get_descriptor(descriptor_type, string_type)==false )
    3eb2:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <usb_user_get_descriptor>
    3eb6:	88 23       	and	r24, r24
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <usb_process_request+0x66>
    3eba:	72 c1       	rjmp	.+740    	; 0x41a0 <usb_process_request+0x34a>
         return;
      }
      break;
   }

   dummy = Usb_read_byte();                     //!< don't care of wIndex field
    3ebc:	80 91 f1 00 	lds	r24, 0x00F1
   dummy = Usb_read_byte();
    3ec0:	80 91 f1 00 	lds	r24, 0x00F1
   
   dummy = Usb_read_byte(); // LSB .
    3ec4:	80 91 f1 00 	lds	r24, 0x00F1
   wLength = Usb_read_byte() << 8;
    3ec8:	20 91 f1 00 	lds	r18, 0x00F1
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
   wLength |= dummy;
    3ece:	92 2b       	or	r25, r18
   
   //LSB(wLength) = Usb_read_byte();      //!< read wLength
   //MSB(wLength) = Usb_read_byte();
   
   Usb_ack_receive_setup() ;                  //!< clear the receive setup flag
    3ed0:	20 91 e8 00 	lds	r18, 0x00E8
    3ed4:	27 7f       	andi	r18, 0xF7	; 247
    3ed6:	20 93 e8 00 	sts	0x00E8, r18

   if (wLength > data_to_transfer)
    3eda:	40 91 dc 11 	lds	r20, 0x11DC
    3ede:	24 2f       	mov	r18, r20
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	28 17       	cp	r18, r24
    3ee4:	39 07       	cpc	r19, r25
    3ee6:	48 f4       	brcc	.+18     	; 0x3efa <usb_process_request+0xa4>
   {
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = true; }
    3ee8:	4f 73       	andi	r20, 0x3F	; 63
    3eea:	21 f4       	brne	.+8      	; 0x3ef4 <usb_process_request+0x9e>
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	80 93 2d 0c 	sts	0x0C2D, r24
    3ef2:	18 c0       	rjmp	.+48     	; 0x3f24 <usb_process_request+0xce>
      else { zlp = false; }                   //!< no need of zero length packet
    3ef4:	10 92 2d 0c 	sts	0x0C2D, r1
    3ef8:	15 c0       	rjmp	.+42     	; 0x3f24 <usb_process_request+0xce>
   }
   else
   {
      data_to_transfer = (uint8_t)wLength;         //!< send only requested number of data
    3efa:	80 93 dc 11 	sts	0x11DC, r24
    3efe:	12 c0       	rjmp	.+36     	; 0x3f24 <usb_process_request+0xce>
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
    3f00:	80 91 e8 00 	lds	r24, 0x00E8
    3f04:	82 fd       	sbrc	r24, 2
    3f06:	2b c0       	rjmp	.+86     	; 0x3f5e <usb_process_request+0x108>
   {
      while(!Is_usb_read_control_enabled());
    3f08:	80 91 e8 00 	lds	r24, 0x00E8
    3f0c:	80 ff       	sbrs	r24, 0
    3f0e:	fc cf       	rjmp	.-8      	; 0x3f08 <usb_process_request+0xb2>
    3f10:	21 e4       	ldi	r18, 0x41	; 65

		nb_byte=0;
      while(data_to_transfer != 0)			//!< Send data until necessary
    3f12:	80 91 dc 11 	lds	r24, 0x11DC
    3f16:	81 11       	cpse	r24, r1
    3f18:	0a c0       	rjmp	.+20     	; 0x3f2e <usb_process_request+0xd8>
            
         Usb_write_byte(*pbuffer);
         pbuffer ++;
         data_to_transfer --;
      }
      Usb_send_control_in();
    3f1a:	80 91 e8 00 	lds	r24, 0x00E8
    3f1e:	8e 7f       	andi	r24, 0xFE	; 254
    3f20:	80 93 e8 00 	sts	0x00E8, r24
   else
   {
      data_to_transfer = (uint8_t)wLength;         //!< send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
    3f24:	80 91 dc 11 	lds	r24, 0x11DC
    3f28:	81 11       	cpse	r24, r1
    3f2a:	ea cf       	rjmp	.-44     	; 0x3f00 <usb_process_request+0xaa>
    3f2c:	18 c0       	rjmp	.+48     	; 0x3f5e <usb_process_request+0x108>
    3f2e:	21 50       	subi	r18, 0x01	; 1
      while(!Is_usb_read_control_enabled());

		nb_byte=0;
      while(data_to_transfer != 0)			//!< Send data until necessary
      {
			if(nb_byte++==EP_CONTROL_LENGTH) //!< Check endpoint 0 size
    3f30:	a1 f3       	breq	.-24     	; 0x3f1a <usb_process_request+0xc4>
			{
				break;
			}
            
            
         Usb_write_byte(*pbuffer);
    3f32:	e0 91 dd 11 	lds	r30, 0x11DD
    3f36:	f0 91 de 11 	lds	r31, 0x11DE
    3f3a:	80 81       	ld	r24, Z
    3f3c:	80 93 f1 00 	sts	0x00F1, r24
         pbuffer ++;
    3f40:	80 91 dd 11 	lds	r24, 0x11DD
    3f44:	90 91 de 11 	lds	r25, 0x11DE
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	90 93 de 11 	sts	0x11DE, r25
    3f4e:	80 93 dd 11 	sts	0x11DD, r24
         data_to_transfer --;
    3f52:	80 91 dc 11 	lds	r24, 0x11DC
    3f56:	81 50       	subi	r24, 0x01	; 1
    3f58:	80 93 dc 11 	sts	0x11DC, r24
    3f5c:	da cf       	rjmp	.-76     	; 0x3f12 <usb_process_request+0xbc>
      }
      Usb_send_control_in();
   }

   Usb_send_control_in();
    3f5e:	80 91 e8 00 	lds	r24, 0x00E8
    3f62:	8e 7f       	andi	r24, 0xFE	; 254
    3f64:	80 93 e8 00 	sts	0x00E8, r24

   if(Is_usb_receive_out()) { Usb_ack_receive_out(); return; } //!< abort from Host
    3f68:	80 91 e8 00 	lds	r24, 0x00E8
    3f6c:	82 fd       	sbrc	r24, 2
    3f6e:	f4 c0       	rjmp	.+488    	; 0x4158 <usb_process_request+0x302>
   if(zlp == true)        { Usb_send_control_in(); }
    3f70:	80 91 2d 0c 	lds	r24, 0x0C2D
    3f74:	88 23       	and	r24, r24
    3f76:	29 f0       	breq	.+10     	; 0x3f82 <usb_process_request+0x12c>
    3f78:	80 91 e8 00 	lds	r24, 0x00E8
    3f7c:	8e 7f       	andi	r24, 0xFE	; 254
    3f7e:	80 93 e8 00 	sts	0x00E8, r24

   while(!Is_usb_receive_out());
    3f82:	80 91 e8 00 	lds	r24, 0x00E8
    3f86:	82 ff       	sbrs	r24, 2
    3f88:	fc cf       	rjmp	.-8      	; 0x3f82 <usb_process_request+0x12c>
    3f8a:	e6 c0       	rjmp	.+460    	; 0x4158 <usb_process_request+0x302>

   switch (bmRequest)
   {
    case GET_DESCRIPTOR:
         if (0x80 == bmRequestType) { usb_get_descriptor(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    3f8c:	66 e0       	ldi	r22, 0x06	; 6
    3f8e:	01 c1       	rjmp	.+514    	; 0x4192 <usb_process_request+0x33c>
			break;

    case GET_CONFIGURATION:
         if (0x80 == bmRequestType) { usb_get_configuration(); }
    3f90:	80 38       	cpi	r24, 0x80	; 128
    3f92:	c1 f4       	brne	.+48     	; 0x3fc4 <usb_process_request+0x16e>
//!
//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
void usb_get_configuration(void)
{
   Usb_ack_receive_setup();
    3f94:	80 91 e8 00 	lds	r24, 0x00E8
    3f98:	87 7f       	andi	r24, 0xF7	; 247
    3f9a:	80 93 e8 00 	sts	0x00E8, r24

   Usb_write_byte(usb_configuration_nb);
    3f9e:	80 91 db 11 	lds	r24, 0x11DB
    3fa2:	80 93 f1 00 	sts	0x00F1, r24
   Usb_ack_in_ready();
    3fa6:	80 91 e8 00 	lds	r24, 0x00E8
    3faa:	8e 7f       	andi	r24, 0xFE	; 254
    3fac:	80 93 e8 00 	sts	0x00E8, r24
    3fb0:	80 91 e8 00 	lds	r24, 0x00E8
    3fb4:	8f 77       	andi	r24, 0x7F	; 127
    3fb6:	80 93 e8 00 	sts	0x00E8, r24

   while( !Is_usb_receive_out() );
    3fba:	80 91 e8 00 	lds	r24, 0x00E8
    3fbe:	82 ff       	sbrs	r24, 2
    3fc0:	fc cf       	rjmp	.-8      	; 0x3fba <usb_process_request+0x164>
    3fc2:	ca c0       	rjmp	.+404    	; 0x4158 <usb_process_request+0x302>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
			break;

    case GET_CONFIGURATION:
         if (0x80 == bmRequestType) { usb_get_configuration(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    3fc4:	68 e0       	ldi	r22, 0x08	; 8
    3fc6:	e5 c0       	rjmp	.+458    	; 0x4192 <usb_process_request+0x33c>
         break;

    case SET_ADDRESS:
         if (0x00 == bmRequestType) { usb_set_address(); }
    3fc8:	81 11       	cpse	r24, r1
    3fca:	1d c0       	rjmp	.+58     	; 0x4006 <usb_process_request+0x1b0>
//!
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
void usb_set_address(void)
{
    uint8_t address = Usb_read_byte();
    3fcc:	80 91 f1 00 	lds	r24, 0x00F1
   Usb_configure_address(address);
    3fd0:	90 91 e3 00 	lds	r25, 0x00E3
    3fd4:	8f 77       	andi	r24, 0x7F	; 127
    3fd6:	90 78       	andi	r25, 0x80	; 128
    3fd8:	89 2b       	or	r24, r25
    3fda:	80 93 e3 00 	sts	0x00E3, r24

   Usb_ack_receive_setup();
    3fde:	80 91 e8 00 	lds	r24, 0x00E8
    3fe2:	87 7f       	andi	r24, 0xF7	; 247
    3fe4:	80 93 e8 00 	sts	0x00E8, r24

   Usb_send_control_in();                    //!< send a ZLP for STATUS phase
    3fe8:	80 91 e8 00 	lds	r24, 0x00E8
    3fec:	8e 7f       	andi	r24, 0xFE	; 254
    3fee:	80 93 e8 00 	sts	0x00E8, r24
   while(!Is_usb_in_ready());                //!< waits for status phase done
    3ff2:	80 91 e8 00 	lds	r24, 0x00E8
    3ff6:	80 ff       	sbrs	r24, 0
    3ff8:	fc cf       	rjmp	.-8      	; 0x3ff2 <usb_process_request+0x19c>
                                             //!< before using the new address
   Usb_enable_address();
    3ffa:	80 91 e3 00 	lds	r24, 0x00E3
    3ffe:	80 68       	ori	r24, 0x80	; 128
    4000:	80 93 e3 00 	sts	0x00E3, r24
    4004:	08 95       	ret
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case SET_ADDRESS:
         if (0x00 == bmRequestType) { usb_set_address(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    4006:	65 e0       	ldi	r22, 0x05	; 5
    4008:	c4 c0       	rjmp	.+392    	; 0x4192 <usb_process_request+0x33c>
         break;

    case SET_CONFIGURATION:
         if (0x00 == bmRequestType) { usb_set_configuration(); }
    400a:	81 11       	cpse	r24, r1
    400c:	13 c0       	rjmp	.+38     	; 0x4034 <usb_process_request+0x1de>
//! number.
void usb_set_configuration( void )
{
    uint8_t configuration_number;

   configuration_number = Usb_read_byte();
    400e:	90 91 f1 00 	lds	r25, 0x00F1

   if (configuration_number <= NB_CONFIGURATION)
    4012:	92 30       	cpi	r25, 0x02	; 2
    4014:	08 f0       	brcs	.+2      	; 0x4018 <usb_process_request+0x1c2>
    4016:	c4 c0       	rjmp	.+392    	; 0x41a0 <usb_process_request+0x34a>
   {
      Usb_ack_receive_setup();
    4018:	80 91 e8 00 	lds	r24, 0x00E8
    401c:	87 7f       	andi	r24, 0xF7	; 247
    401e:	80 93 e8 00 	sts	0x00E8, r24
      usb_configuration_nb = configuration_number;
    4022:	90 93 db 11 	sts	0x11DB, r25
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      return;
   }

   Usb_send_control_in();                    //!< send a ZLP for STATUS phase
    4026:	80 91 e8 00 	lds	r24, 0x00E8
    402a:	8e 7f       	andi	r24, 0xFE	; 254
    402c:	80 93 e8 00 	sts	0x00E8, r24

   usb_user_endpoint_init();  //!< endpoint configuration
    4030:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <usb_user_endpoint_init>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case SET_CONFIGURATION:
         if (0x00 == bmRequestType) { usb_set_configuration(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    4034:	69 e0       	ldi	r22, 0x09	; 9
    4036:	ad c0       	rjmp	.+346    	; 0x4192 <usb_process_request+0x33c>
         break;

    case CLEAR_FEATURE:
         if (0x02 >= bmRequestType) { usb_clear_feature(); }
    4038:	83 30       	cpi	r24, 0x03	; 3
    403a:	88 f5       	brcc	.+98     	; 0x409e <usb_process_request+0x248>
void usb_clear_feature(void)
{
    uint8_t wValue;
    uint8_t wIndex;

   if (bmRequestType == ZERO_TYPE)
    403c:	88 23       	and	r24, r24
    403e:	09 f4       	brne	.+2      	; 0x4042 <usb_process_request+0x1ec>
    4040:	af c0       	rjmp	.+350    	; 0x41a0 <usb_process_request+0x34a>
      //!< OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      return;
   }
   else if (bmRequestType == INTERFACE_TYPE)
    4042:	81 30       	cpi	r24, 0x01	; 1
    4044:	09 f4       	brne	.+2      	; 0x4048 <usb_process_request+0x1f2>
    4046:	ac c0       	rjmp	.+344    	; 0x41a0 <usb_process_request+0x34a>
      Usb_ack_receive_setup();
      return;
   }
   else if (bmRequestType == ENDPOINT_TYPE)
   {
      wValue = Usb_read_byte();
    4048:	80 91 f1 00 	lds	r24, 0x00F1
   //   dummy  = Usb_read_byte();                //!< dummy read

      if (wValue == FEATURE_ENDPOINT_HALT)
    404c:	81 11       	cpse	r24, r1
    404e:	a8 c0       	rjmp	.+336    	; 0x41a0 <usb_process_request+0x34a>
      {
         wIndex = (Usb_read_byte() & MSK_EP_DIR);
    4050:	e0 91 f1 00 	lds	r30, 0x00F1
    4054:	ef 77       	andi	r30, 0x7F	; 127

         Usb_select_endpoint(wIndex);
    4056:	e0 93 e9 00 	sts	0x00E9, r30
         if(Is_usb_endpoint_enabled())
    405a:	80 91 eb 00 	lds	r24, 0x00EB
    405e:	80 ff       	sbrs	r24, 0
    4060:	9f c0       	rjmp	.+318    	; 0x41a0 <usb_process_request+0x34a>
         {
            if(wIndex != EP_CONTROL)
    4062:	ee 23       	and	r30, r30
    4064:	a9 f0       	breq	.+42     	; 0x4090 <usb_process_request+0x23a>
            {
               Usb_disable_stall_handshake();
    4066:	80 91 eb 00 	lds	r24, 0x00EB
    406a:	80 61       	ori	r24, 0x10	; 16
    406c:	80 93 eb 00 	sts	0x00EB, r24
               Usb_reset_endpoint(wIndex);
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	0e 2e       	mov	r0, r30
    4076:	01 c0       	rjmp	.+2      	; 0x407a <usb_process_request+0x224>
    4078:	88 0f       	add	r24, r24
    407a:	0a 94       	dec	r0
    407c:	ea f7       	brpl	.-6      	; 0x4078 <usb_process_request+0x222>
    407e:	80 93 ea 00 	sts	0x00EA, r24
    4082:	10 92 ea 00 	sts	0x00EA, r1
               Usb_reset_data_toggle();
    4086:	80 91 eb 00 	lds	r24, 0x00EB
    408a:	88 60       	ori	r24, 0x08	; 8
    408c:	80 93 eb 00 	sts	0x00EB, r24
            }
            Usb_select_endpoint(EP_CONTROL);
    4090:	10 92 e9 00 	sts	0x00E9, r1
            endpoint_status[wIndex] = 0x00;
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	e6 5d       	subi	r30, 0xD6	; 214
    4098:	f3 4f       	sbci	r31, 0xF3	; 243
    409a:	10 82       	st	Z, r1
    409c:	25 c0       	rjmp	.+74     	; 0x40e8 <usb_process_request+0x292>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case CLEAR_FEATURE:
         if (0x02 >= bmRequestType) { usb_clear_feature(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    409e:	61 e0       	ldi	r22, 0x01	; 1
    40a0:	78 c0       	rjmp	.+240    	; 0x4192 <usb_process_request+0x33c>
         break;

    case SET_FEATURE:
         if (0x02 >= bmRequestType) { usb_set_feature(); }
    40a2:	83 30       	cpi	r24, 0x03	; 3
    40a4:	50 f5       	brcc	.+84     	; 0x40fa <usb_process_request+0x2a4>
void usb_set_feature(void)
{
    uint8_t wValue;
    uint8_t wIndex;

   if (bmRequestType == INTERFACE_TYPE)
    40a6:	81 30       	cpi	r24, 0x01	; 1
    40a8:	09 f4       	brne	.+2      	; 0x40ac <usb_process_request+0x256>
    40aa:	7a c0       	rjmp	.+244    	; 0x41a0 <usb_process_request+0x34a>
      //!< OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      return;
   }
   else if (bmRequestType == ENDPOINT_TYPE)
    40ac:	82 30       	cpi	r24, 0x02	; 2
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <usb_process_request+0x25c>
    40b0:	81 c0       	rjmp	.+258    	; 0x41b4 <usb_process_request+0x35e>
   {
      wValue = Usb_read_byte();
    40b2:	80 91 f1 00 	lds	r24, 0x00F1
      //dummy    = Usb_read_byte();                //!< dummy read
        
      if (wValue == FEATURE_ENDPOINT_HALT)
    40b6:	81 11       	cpse	r24, r1
    40b8:	73 c0       	rjmp	.+230    	; 0x41a0 <usb_process_request+0x34a>
      {
         wIndex = (Usb_read_byte() & MSK_EP_DIR);
    40ba:	e0 91 f1 00 	lds	r30, 0x00F1
    40be:	ef 77       	andi	r30, 0x7F	; 127

         if (wIndex == EP_CONTROL)
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <usb_process_request+0x26e>
    40c2:	6e c0       	rjmp	.+220    	; 0x41a0 <usb_process_request+0x34a>
            Usb_enable_stall_handshake();
            Usb_ack_receive_setup();
            return;
         }

         Usb_select_endpoint(wIndex);
    40c4:	e0 93 e9 00 	sts	0x00E9, r30
         if(Is_usb_endpoint_enabled())
    40c8:	80 91 eb 00 	lds	r24, 0x00EB
    40cc:	80 ff       	sbrs	r24, 0
    40ce:	68 c0       	rjmp	.+208    	; 0x41a0 <usb_process_request+0x34a>
         {
            Usb_enable_stall_handshake();
    40d0:	80 91 eb 00 	lds	r24, 0x00EB
    40d4:	80 62       	ori	r24, 0x20	; 32
    40d6:	80 93 eb 00 	sts	0x00EB, r24
            Usb_select_endpoint(EP_CONTROL);
    40da:	10 92 e9 00 	sts	0x00E9, r1
            endpoint_status[wIndex] = 0x01;
    40de:	f0 e0       	ldi	r31, 0x00	; 0
    40e0:	e6 5d       	subi	r30, 0xD6	; 214
    40e2:	f3 4f       	sbci	r31, 0xF3	; 243
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	80 83       	st	Z, r24
            Usb_ack_receive_setup();
    40e8:	80 91 e8 00 	lds	r24, 0x00E8
    40ec:	87 7f       	andi	r24, 0xF7	; 247
    40ee:	80 93 e8 00 	sts	0x00E8, r24
            Usb_send_control_in();
    40f2:	80 91 e8 00 	lds	r24, 0x00E8
    40f6:	8e 7f       	andi	r24, 0xFE	; 254
    40f8:	5b c0       	rjmp	.+182    	; 0x41b0 <usb_process_request+0x35a>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case SET_FEATURE:
         if (0x02 >= bmRequestType) { usb_set_feature(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    40fa:	63 e0       	ldi	r22, 0x03	; 3
    40fc:	4a c0       	rjmp	.+148    	; 0x4192 <usb_process_request+0x33c>
         break;

    case GET_STATUS:
         if ((0x7F < bmRequestType) & (0x82 >= bmRequestType))
    40fe:	90 e8       	ldi	r25, 0x80	; 128
    4100:	98 0f       	add	r25, r24
    4102:	93 30       	cpi	r25, 0x03	; 3
    4104:	90 f5       	brcc	.+100    	; 0x416a <usb_process_request+0x314>
void usb_get_status(void)
{
    uint8_t wIndex;
    uint8_t dummy;

   dummy    = Usb_read_byte();                 //!< dummy read
    4106:	90 91 f1 00 	lds	r25, 0x00F1
   dummy    = Usb_read_byte();                 //!< dummy read
    410a:	90 91 f1 00 	lds	r25, 0x00F1
   dummy++;
   wIndex = Usb_read_byte();
    410e:	e0 91 f1 00 	lds	r30, 0x00F1

   switch(bmRequestType)
    4112:	81 38       	cpi	r24, 0x81	; 129
    4114:	11 f0       	breq	.+4      	; 0x411a <usb_process_request+0x2c4>
    4116:	82 38       	cpi	r24, 0x82	; 130
    4118:	41 f0       	breq	.+16     	; 0x412a <usb_process_request+0x2d4>
   {
    case REQUEST_DEVICE_STATUS:    Usb_ack_receive_setup();
                                   Usb_write_byte(DEVICE_STATUS);
                                   break;

    case REQUEST_INTERFACE_STATUS: Usb_ack_receive_setup();
    411a:	80 91 e8 00 	lds	r24, 0x00E8
    411e:	87 7f       	andi	r24, 0xF7	; 247
    4120:	80 93 e8 00 	sts	0x00E8, r24
                                   Usb_write_byte(INTERFACE_STATUS);
    4124:	10 92 f1 00 	sts	0x00F1, r1
    4128:	0c c0       	rjmp	.+24     	; 0x4142 <usb_process_request+0x2ec>
                                   break;

    case REQUEST_ENDPOINT_STATUS:  Usb_ack_receive_setup();
    412a:	80 91 e8 00 	lds	r24, 0x00E8
    412e:	87 7f       	andi	r24, 0xF7	; 247
    4130:	80 93 e8 00 	sts	0x00E8, r24
                                   wIndex = wIndex & MSK_EP_DIR;
    4134:	ef 77       	andi	r30, 0x7F	; 127
                                   Usb_write_byte(endpoint_status[wIndex]);
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	e6 5d       	subi	r30, 0xD6	; 214
    413a:	f3 4f       	sbci	r31, 0xF3	; 243
    413c:	80 81       	ld	r24, Z
    413e:	80 93 f1 00 	sts	0x00F1, r24
                                   Usb_enable_stall_handshake();
                                   Usb_ack_receive_setup();
                                   return;
   }

   Usb_write_byte(0x00);
    4142:	10 92 f1 00 	sts	0x00F1, r1
   Usb_send_control_in();
    4146:	80 91 e8 00 	lds	r24, 0x00E8
    414a:	8e 7f       	andi	r24, 0xFE	; 254
    414c:	80 93 e8 00 	sts	0x00E8, r24

   while( !Is_usb_receive_out() );
    4150:	80 91 e8 00 	lds	r24, 0x00E8
    4154:	82 ff       	sbrs	r24, 2
    4156:	fc cf       	rjmp	.-8      	; 0x4150 <usb_process_request+0x2fa>
   Usb_ack_receive_out();
    4158:	80 91 e8 00 	lds	r24, 0x00E8
    415c:	8b 7f       	andi	r24, 0xFB	; 251
    415e:	80 93 e8 00 	sts	0x00E8, r24
    4162:	80 91 e8 00 	lds	r24, 0x00E8
    4166:	8f 77       	andi	r24, 0x7F	; 127
    4168:	23 c0       	rjmp	.+70     	; 0x41b0 <usb_process_request+0x35a>
         break;

    case GET_STATUS:
         if ((0x7F < bmRequestType) & (0x82 >= bmRequestType))
                                    { usb_get_status(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	12 c0       	rjmp	.+36     	; 0x4192 <usb_process_request+0x33c>
         break;

    case GET_INTERFACE:
	       if (bmRequestType == 0x81) { usb_get_interface(); }
    416e:	81 38       	cpi	r24, 0x81	; 129
    4170:	79 f4       	brne	.+30     	; 0x4190 <usb_process_request+0x33a>
* REQUIREMENTS:
*****************************************************************************/
void usb_get_interface (void)
{
  uint8_t dummy;
  dummy = Usb_read_byte();
    4172:	80 91 f1 00 	lds	r24, 0x00F1
  dummy = Usb_read_byte();
    4176:	80 91 f1 00 	lds	r24, 0x00F1
  
  dummy = Usb_read_byte(); // Read LSB
    417a:	80 91 f1 00 	lds	r24, 0x00F1
  wInterface = Usb_read_byte() << 8;
    417e:	20 91 f1 00 	lds	r18, 0x00F1
    4182:	90 e0       	ldi	r25, 0x00	; 0
  wInterface |= dummy;
    4184:	92 2b       	or	r25, r18
    4186:	90 93 da 11 	sts	0x11DA, r25
    418a:	80 93 d9 11 	sts	0x11D9, r24
    418e:	08 c0       	rjmp	.+16     	; 0x41a0 <usb_process_request+0x34a>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case GET_INTERFACE:
	       if (bmRequestType == 0x81) { usb_get_interface(); }
          else { usb_user_read_request(bmRequestType, bmRequest); }
    4190:	6a e0       	ldi	r22, 0x0A	; 10
    4192:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <usb_user_read_request>

    case SET_DESCRIPTOR:
    case SET_INTERFACE:
    case SYNCH_FRAME:
    default: //!< un-supported request => call to user read request
         if(usb_user_read_request(bmRequestType, bmRequest) == false)
    4196:	69 2f       	mov	r22, r25
    4198:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <usb_user_read_request>
    419c:	81 11       	cpse	r24, r1
    419e:	0a c0       	rjmp	.+20     	; 0x41b4 <usb_process_request+0x35e>
         {
            Usb_enable_stall_handshake();
    41a0:	80 91 eb 00 	lds	r24, 0x00EB
    41a4:	80 62       	ori	r24, 0x20	; 32
    41a6:	80 93 eb 00 	sts	0x00EB, r24
            Usb_ack_receive_setup();
    41aa:	80 91 e8 00 	lds	r24, 0x00E8
    41ae:	87 7f       	andi	r24, 0xF7	; 247
    41b0:	80 93 e8 00 	sts	0x00E8, r24
    41b4:	08 95       	ret

000041b6 <usb_task_init>:
//! This function enables the USB controller and init the USB interrupts.
//! The aim is to allow the USB connection detection in order to send
//! the appropriate USB event to the operating mode manager.
//!
//! @param serial_nmbr Serial number for this device.
void usb_task_init(uint64_t serial_nmbr) {
    41b6:	8f 92       	push	r8
    41b8:	9f 92       	push	r9
    41ba:	af 92       	push	r10
    41bc:	bf 92       	push	r11
    41be:	cf 92       	push	r12
    41c0:	df 92       	push	r13
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	f2 2e       	mov	r15, r18
    41d0:	e3 2e       	mov	r14, r19
    41d2:	d4 2e       	mov	r13, r20
    41d4:	c5 2e       	mov	r12, r21
    41d6:	b6 2e       	mov	r11, r22
    41d8:	a7 2e       	mov	r10, r23
    41da:	98 2e       	mov	r9, r24
    41dc:	89 2e       	mov	r8, r25
    /* Initialze local variables. */
    usb_connected = false;
    41de:	10 92 56 0d 	sts	0x0D56, r1
    reset_detected = false;
    41e2:	10 92 55 0d 	sts	0x0D55, r1
    usb_configuration_nb = 0;
    41e6:	10 92 54 0d 	sts	0x0D54, r1
    
    trans_data_i = 0;
    41ea:	10 92 33 0c 	sts	0x0C33, r1
    41ee:	10 92 32 0c 	sts	0x0C32, r1
    ep_open = false;
    41f2:	10 92 31 0c 	sts	0x0C31, r1
    ep_error = false;
    41f6:	10 92 df 11 	sts	0x11DF, r1
    open_ep = 0;
    41fa:	10 92 30 0c 	sts	0x0C30, r1

    done_callback = NULL;
    41fe:	10 92 2f 0c 	sts	0x0C2F, r1
    4202:	10 92 2e 0c 	sts	0x0C2E, r1
    
    
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    4206:	e0 91 65 00 	lds	r30, 0x0065
    420a:	ef 77       	andi	r30, 0x7F	; 127
    420c:	e0 93 65 00 	sts	0x0065, r30
    4210:	a1 e1       	ldi	r26, 0x11	; 17
    4212:	b1 e0       	ldi	r27, 0x01	; 1
    4214:	e0 e0       	ldi	r30, 0x00	; 0
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    
    for (uint8_t i = 0; i < 6; i++) {
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
    4218:	2f 2d       	mov	r18, r15
    421a:	3e 2d       	mov	r19, r14
    421c:	4d 2d       	mov	r20, r13
    421e:	5c 2d       	mov	r21, r12
    4220:	6b 2d       	mov	r22, r11
    4222:	7a 2d       	mov	r23, r10
    4224:	89 2d       	mov	r24, r9
    4226:	98 2d       	mov	r25, r8
    4228:	0e 2f       	mov	r16, r30
    422a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__lshrdi3>
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
    422e:	02 2f       	mov	r16, r18
    4230:	02 95       	swap	r16
    4232:	0f 70       	andi	r16, 0x0F	; 15
   }
}

static uint8_t bin2hex(uint8_t  nibble) {
    nibble &= 0x0F;
	if (nibble < 10)
    4234:	0a 30       	cpi	r16, 0x0A	; 10
    4236:	10 f4       	brcc	.+4      	; 0x423c <usb_task_init+0x86>
	    nibble += '0';
    4238:	00 5d       	subi	r16, 0xD0	; 208
    423a:	01 c0       	rjmp	.+2      	; 0x423e <usb_task_init+0x88>
	else
	    nibble += 'A' - 10;
    423c:	09 5c       	subi	r16, 0xC9	; 201
    
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    
    for (uint8_t i = 0; i < 6; i++) {
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
    423e:	10 e0       	ldi	r17, 0x00	; 0
    4240:	11 96       	adiw	r26, 0x01	; 1
    4242:	1c 93       	st	X, r17
    4244:	0e 93       	st	-X, r16
      reset_detected=true;
   }
}

static uint8_t bin2hex(uint8_t  nibble) {
    nibble &= 0x0F;
    4246:	c2 2f       	mov	r28, r18
    4248:	cf 70       	andi	r28, 0x0F	; 15
	if (nibble < 10)
    424a:	ca 30       	cpi	r28, 0x0A	; 10
    424c:	10 f4       	brcc	.+4      	; 0x4252 <usb_task_init+0x9c>
	    nibble += '0';
    424e:	c0 5d       	subi	r28, 0xD0	; 208
    4250:	01 c0       	rjmp	.+2      	; 0x4254 <usb_task_init+0x9e>
	else
	    nibble += 'A' - 10;
    4252:	c9 5c       	subi	r28, 0xC9	; 201
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    
    for (uint8_t i = 0; i < 6; i++) {
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
		usb_user_serial_number.wstring[i * 2 + 1] = bin2hex(temp & 0x0F);	// Low nibble
    4254:	d0 e0       	ldi	r29, 0x00	; 0
    4256:	13 96       	adiw	r26, 0x03	; 3
    4258:	dc 93       	st	X, r29
    425a:	ce 93       	st	-X, r28
    425c:	12 97       	sbiw	r26, 0x02	; 2
    425e:	38 96       	adiw	r30, 0x08	; 8
    4260:	14 96       	adiw	r26, 0x04	; 4
    done_callback = NULL;
    
    
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    
    for (uint8_t i = 0; i < 6; i++) {
    4262:	e0 33       	cpi	r30, 0x30	; 48
    4264:	f1 05       	cpc	r31, r1
    4266:	c1 f6       	brne	.-80     	; 0x4218 <usb_task_init+0x62>
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
		usb_user_serial_number.wstring[i * 2 + 1] = bin2hex(temp & 0x0F);	// Low nibble
    }
    
	Usb_force_device_mode();
    4268:	80 91 d7 00 	lds	r24, 0x00D7
    426c:	8f 7b       	andi	r24, 0xBF	; 191
    426e:	80 93 d7 00 	sts	0x00D7, r24
    4272:	80 91 d7 00 	lds	r24, 0x00D7
    4276:	80 68       	ori	r24, 0x80	; 128
    4278:	80 93 d7 00 	sts	0x00D7, r24
	Usb_enable();
    427c:	80 91 d8 00 	lds	r24, 0x00D8
    4280:	80 69       	ori	r24, 0x90	; 144
    4282:	80 93 d8 00 	sts	0x00D8, r24
	Usb_select_device();
    4286:	80 91 d8 00 	lds	r24, 0x00D8
    428a:	8f 7b       	andi	r24, 0xBF	; 191
    428c:	80 93 d8 00 	sts	0x00D8, r24
	Usb_enable_vbus_interrupt();
    4290:	80 91 d8 00 	lds	r24, 0x00D8
    4294:	81 60       	ori	r24, 0x01	; 1
    4296:	80 93 d8 00 	sts	0x00D8, r24
}
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	df 90       	pop	r13
    42a8:	cf 90       	pop	r12
    42aa:	bf 90       	pop	r11
    42ac:	af 90       	pop	r10
    42ae:	9f 90       	pop	r9
    42b0:	8f 90       	pop	r8
    42b2:	08 95       	ret

000042b4 <usb_task_deinit>:

void usb_task_deinit(void) {
    Usb_disable();
    42b4:	e8 ed       	ldi	r30, 0xD8	; 216
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	80 81       	ld	r24, Z
    42ba:	8f 76       	andi	r24, 0x6F	; 111
    42bc:	80 83       	st	Z, r24
    PRR1 |= (1 << PRUSB); // Disable USB macro.
    42be:	e5 e6       	ldi	r30, 0x65	; 101
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	80 81       	ld	r24, Z
    42c4:	80 68       	ori	r24, 0x80	; 128
    42c6:	80 83       	st	Z, r24
    42c8:	08 95       	ret

000042ca <usb_start_device>:
//! This function enables the USB controller and init the USB interrupts.
//! The aim is to allow the USB connection detection in order to send
//! the appropriate USB event to the operating mode manager.
void usb_start_device (void)
{
   Usb_enable_regulator();
    42ca:	80 91 d7 00 	lds	r24, 0x00D7
    42ce:	81 60       	ori	r24, 0x01	; 1
    42d0:	80 93 d7 00 	sts	0x00D7, r24
   Pll_start_auto();
    42d4:	8e e0       	ldi	r24, 0x0E	; 14
    42d6:	89 bd       	out	0x29, r24	; 41
   Wait_pll_ready();
    42d8:	09 b4       	in	r0, 0x29	; 41
    42da:	00 fe       	sbrs	r0, 0
    42dc:	fd cf       	rjmp	.-6      	; 0x42d8 <usb_start_device+0xe>
   Usb_unfreeze_clock();
    42de:	80 91 d8 00 	lds	r24, 0x00D8
    42e2:	8f 7d       	andi	r24, 0xDF	; 223
    42e4:	80 93 d8 00 	sts	0x00D8, r24
   Usb_enable_suspend_interrupt();
    42e8:	80 91 e2 00 	lds	r24, 0x00E2
    42ec:	81 60       	ori	r24, 0x01	; 1
    42ee:	80 93 e2 00 	sts	0x00E2, r24
   Usb_enable_reset_interrupt();
    42f2:	80 91 e2 00 	lds	r24, 0x00E2
    42f6:	88 60       	ori	r24, 0x08	; 8
    42f8:	80 93 e2 00 	sts	0x00E2, r24
   usb_init_device();         // configure the USB controller EP0
    42fc:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <usb_init_device>
   Usb_attach();
    4300:	80 91 e0 00 	lds	r24, 0x00E0
    4304:	8e 7f       	andi	r24, 0xFE	; 254
    4306:	80 93 e0 00 	sts	0x00E0, r24
   usb_connected = false;
    430a:	10 92 56 0d 	sts	0x0D56, r1
    430e:	08 95       	ret

00004310 <usb_task>:
//! the usb_process_request() function is call in the usb_enum.c file
//! If a new USB mass storage Command Block Wrapper (CBW) occurs,
//! this one will be decoded and the SCSI command will be taken in charge
//! by the scsi decoder.
void usb_task(void) {
   if (Is_usb_vbus_high()&& usb_connected==false) {
    4310:	80 91 d9 00 	lds	r24, 0x00D9
    4314:	80 ff       	sbrs	r24, 0
    4316:	11 c0       	rjmp	.+34     	; 0x433a <usb_task+0x2a>
    4318:	80 91 56 0d 	lds	r24, 0x0D56
    431c:	81 11       	cpse	r24, r1
    431e:	0d c0       	rjmp	.+26     	; 0x433a <usb_task+0x2a>
        usb_connected = true;
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	80 93 56 0d 	sts	0x0D56, r24
     
    	Usb_enable_reset_interrupt();
    4326:	80 91 e2 00 	lds	r24, 0x00E2
    432a:	88 60       	ori	r24, 0x08	; 8
    432c:	80 93 e2 00 	sts	0x00E2, r24
		Usb_attach();
    4330:	80 91 e0 00 	lds	r24, 0x00E0
    4334:	8e 7f       	andi	r24, 0xFE	; 254
    4336:	80 93 e0 00 	sts	0x00E0, r24
   }

   if (reset_detected==true) {
    433a:	80 91 55 0d 	lds	r24, 0x0D55
    433e:	88 23       	and	r24, r24
    4340:	49 f0       	breq	.+18     	; 0x4354 <usb_task+0x44>
      Usb_reset_endpoint(0);
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	80 93 ea 00 	sts	0x00EA, r24
    4348:	10 92 ea 00 	sts	0x00EA, r1
      usb_configuration_nb=0;
    434c:	10 92 54 0d 	sts	0x0D54, r1
      reset_detected=false;
    4350:	10 92 55 0d 	sts	0x0D55, r1
   }

    // USB MANAGEMENT
    Usb_select_endpoint(EP_CONTROL);
    4354:	10 92 e9 00 	sts	0x00E9, r1
    if (Is_usb_receive_setup()) { usb_process_request(); }
    4358:	80 91 e8 00 	lds	r24, 0x00E8
    435c:	83 fd       	sbrc	r24, 3
    435e:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <usb_process_request>
    
    /* Check for new transactions. */
    if (true == ep_open) {
    4362:	80 91 31 0c 	lds	r24, 0x0C31
    4366:	88 23       	and	r24, r24
    4368:	09 f4       	brne	.+2      	; 0x436c <usb_task+0x5c>
    436a:	47 c0       	rjmp	.+142    	; 0x43fa <usb_task+0xea>
        Usb_select_endpoint(open_ep); // Select open EP.
    436c:	80 91 30 0c 	lds	r24, 0x0C30
    4370:	80 93 e9 00 	sts	0x00E9, r24
        
        /* Check if there is data available. */
        while ((UEINTX & (1 << RXOUTI)) == (1 << RXOUTI)) { 
    4374:	80 91 e8 00 	lds	r24, 0x00E8
    4378:	82 ff       	sbrs	r24, 2
    437a:	3f c0       	rjmp	.+126    	; 0x43fa <usb_task+0xea>
            /* Data available. */
            UEINTX &= ~(1 << RXOUTI); // ACK RX_OUT interrupt flag.
    437c:	80 91 e8 00 	lds	r24, 0x00E8
    4380:	8b 7f       	andi	r24, 0xFB	; 251
    4382:	80 93 e8 00 	sts	0x00E8, r24
        
            /* Ready to upload data. First read number of bytes received. */
            uint8_t bytes_in_bank = Usb_byte_counter_8();
    4386:	20 91 f2 00 	lds	r18, 0x00F2
        
            if ((bytes_in_bank + trans_data_i) > USB_TRANSACTION_BUFFER_SIZE) {
    438a:	80 91 32 0c 	lds	r24, 0x0C32
    438e:	90 91 33 0c 	lds	r25, 0x0C33
    4392:	82 0f       	add	r24, r18
    4394:	91 1d       	adc	r25, r1
    4396:	81 32       	cpi	r24, 0x21	; 33
    4398:	91 40       	sbci	r25, 0x01	; 1
    439a:	10 f4       	brcc	.+4      	; 0x43a0 <usb_task+0x90>
    439c:	32 2f       	mov	r19, r18
    439e:	06 c0       	rjmp	.+12     	; 0x43ac <usb_task+0x9c>
                ep_open = false;
    43a0:	10 92 31 0c 	sts	0x0C31, r1
                ep_error = true;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	80 93 df 11 	sts	0x11DF, r24
                
                return;
    43aa:	08 95       	ret
            }
            
            /* Upload data. */
            for (uint8_t i = bytes_in_bank; i != 0; i--) {
    43ac:	33 23       	and	r19, r19
    43ae:	89 f0       	breq	.+34     	; 0x43d2 <usb_task+0xc2>
                *(transaction_data + trans_data_i) = Usb_read_byte();
    43b0:	80 91 32 0c 	lds	r24, 0x0C32
    43b4:	90 91 33 0c 	lds	r25, 0x0C33
    43b8:	40 91 f1 00 	lds	r20, 0x00F1
    43bc:	fc 01       	movw	r30, r24
    43be:	ec 5c       	subi	r30, 0xCC	; 204
    43c0:	f3 4f       	sbci	r31, 0xF3	; 243
    43c2:	40 83       	st	Z, r20
                trans_data_i++;
    43c4:	01 96       	adiw	r24, 0x01	; 1
    43c6:	90 93 33 0c 	sts	0x0C33, r25
    43ca:	80 93 32 0c 	sts	0x0C32, r24
                
                return;
            }
            
            /* Upload data. */
            for (uint8_t i = bytes_in_bank; i != 0; i--) {
    43ce:	31 50       	subi	r19, 0x01	; 1
    43d0:	ed cf       	rjmp	.-38     	; 0x43ac <usb_task+0x9c>
                *(transaction_data + trans_data_i) = Usb_read_byte();
                trans_data_i++;
            }
            
            UEINTX &= ~(1 << FIFOCON); // ACK that fifo is read.
    43d2:	80 91 e8 00 	lds	r24, 0x00E8
    43d6:	8f 77       	andi	r24, 0x7F	; 127
    43d8:	80 93 e8 00 	sts	0x00E8, r24
            
            /* Check if this was the last packet in the transaction. */
            if (bytes_in_bank < 64) {
    43dc:	20 34       	cpi	r18, 0x40	; 64
    43de:	50 f6       	brcc	.-108    	; 0x4374 <usb_task+0x64>
                ep_open = false;
    43e0:	10 92 31 0c 	sts	0x0C31, r1
                
                /* End of transmission is indicated, so set the flag value to true
                 * or execute the correct callback.
                 */
                done_callback(trans_data_i, transaction_data);
    43e4:	e0 91 2e 0c 	lds	r30, 0x0C2E
    43e8:	f0 91 2f 0c 	lds	r31, 0x0C2F
    43ec:	64 e3       	ldi	r22, 0x34	; 52
    43ee:	7c e0       	ldi	r23, 0x0C	; 12
    43f0:	80 91 32 0c 	lds	r24, 0x0C32
    43f4:	90 91 33 0c 	lds	r25, 0x0C33
    43f8:	09 94       	ijmp
    43fa:	08 95       	ret

000043fc <usb_ep_open>:
            }
        }
    }
}

uint8_t usb_ep_open(usb_trans_descriptor_t *trans_desc) {
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	1f 92       	push	r1
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	fc 01       	movw	r30, r24
    if (NULL == trans_desc) { return USB_INVALID_PARAMETER; }
    4408:	00 97       	sbiw	r24, 0x00	; 0
    440a:	11 f1       	breq	.+68     	; 0x4450 <usb_ep_open+0x54>
    if (true == ep_open) { return USB_EP_HANDLE_ALREADY_OPEN; } // Already open. usb_ep_close must be issued first.
    440c:	80 91 31 0c 	lds	r24, 0x0C31
    4410:	81 11       	cpse	r24, r1
    4412:	1c c0       	rjmp	.+56     	; 0x444c <usb_ep_open+0x50>
    if (EP_CONTROL == (trans_desc->ep)) { return USB_INVALID_PARAMETER; }
    4414:	80 81       	ld	r24, Z
    4416:	88 23       	and	r24, r24
    4418:	d9 f0       	breq	.+54     	; 0x4450 <usb_ep_open+0x54>
    
    ENTER_CRITICAL_REGION();
    441a:	8f b7       	in	r24, 0x3f	; 63
    441c:	89 83       	std	Y+1, r24	; 0x01
    441e:	f8 94       	cli
    open_ep = (trans_desc->ep);
    4420:	80 81       	ld	r24, Z
    4422:	80 93 30 0c 	sts	0x0C30, r24
    
    done_callback = trans_desc->done_callback;
    4426:	81 81       	ldd	r24, Z+1	; 0x01
    4428:	92 81       	ldd	r25, Z+2	; 0x02
    442a:	90 93 2f 0c 	sts	0x0C2F, r25
    442e:	80 93 2e 0c 	sts	0x0C2E, r24
    
    trans_data_i = 0;
    4432:	10 92 33 0c 	sts	0x0C33, r1
    4436:	10 92 32 0c 	sts	0x0C32, r1
    ep_open = true;
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	80 93 31 0c 	sts	0x0C31, r24
    ep_error = false;
    4440:	10 92 df 11 	sts	0x11DF, r1
    LEAVE_CRITICAL_REGION();
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	8f bf       	out	0x3f, r24	; 63
    
    return USB_SUCCESS;
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	03 c0       	rjmp	.+6      	; 0x4452 <usb_ep_open+0x56>
    }
}

uint8_t usb_ep_open(usb_trans_descriptor_t *trans_desc) {
    if (NULL == trans_desc) { return USB_INVALID_PARAMETER; }
    if (true == ep_open) { return USB_EP_HANDLE_ALREADY_OPEN; } // Already open. usb_ep_close must be issued first.
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	01 c0       	rjmp	.+2      	; 0x4452 <usb_ep_open+0x56>
        }
    }
}

uint8_t usb_ep_open(usb_trans_descriptor_t *trans_desc) {
    if (NULL == trans_desc) { return USB_INVALID_PARAMETER; }
    4450:	82 e0       	ldi	r24, 0x02	; 2
    ep_open = true;
    ep_error = false;
    LEAVE_CRITICAL_REGION();
    
    return USB_SUCCESS;
}
    4452:	0f 90       	pop	r0
    4454:	df 91       	pop	r29
    4456:	cf 91       	pop	r28
    4458:	08 95       	ret

0000445a <usb_ep_close>:

void usb_ep_close(void) {
    445a:	cf 93       	push	r28
    445c:	df 93       	push	r29
    445e:	1f 92       	push	r1
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4464:	8f b7       	in	r24, 0x3f	; 63
    4466:	89 83       	std	Y+1, r24	; 0x01
    4468:	f8 94       	cli
    ep_open = false;
    446a:	10 92 31 0c 	sts	0x0C31, r1
    LEAVE_CRITICAL_REGION();
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	8f bf       	out	0x3f, r24	; 63
}
    4472:	0f 90       	pop	r0
    4474:	df 91       	pop	r29
    4476:	cf 91       	pop	r28
    4478:	08 95       	ret

0000447a <usb_ep_ack_transaction>:

void usb_ep_ack_transaction(void) {
    447a:	cf 93       	push	r28
    447c:	df 93       	push	r29
    447e:	1f 92       	push	r1
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4484:	8f b7       	in	r24, 0x3f	; 63
    4486:	89 83       	std	Y+1, r24	; 0x01
    4488:	f8 94       	cli
    ep_open = true;
    448a:	81 e0       	ldi	r24, 0x01	; 1
    448c:	80 93 31 0c 	sts	0x0C31, r24
    ep_error = false;
    4490:	10 92 df 11 	sts	0x11DF, r1
    trans_data_i = 0;
    4494:	10 92 33 0c 	sts	0x0C33, r1
    4498:	10 92 32 0c 	sts	0x0C32, r1
    LEAVE_CRITICAL_REGION();
    449c:	89 81       	ldd	r24, Y+1	; 0x01
    449e:	8f bf       	out	0x3f, r24	; 63
}
    44a0:	0f 90       	pop	r0
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	08 95       	ret

000044a8 <usb_ep_write>:

uint8_t usb_ep_write(uint8_t ep, uint8_t length, uint8_t *packet) {
    UENUM = ep;
    44a8:	80 93 e9 00 	sts	0x00E9, r24
    if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) { return USB_HW_TIME_OUT; }
    44ac:	80 91 e8 00 	lds	r24, 0x00E8
    44b0:	80 ff       	sbrs	r24, 0
    44b2:	40 c0       	rjmp	.+128    	; 0x4534 <usb_ep_write+0x8c>
    
    uint8_t* data_ptr = packet;
    uint8_t bytes_to_write;
    uint8_t packets_to_write = (uint8_t)(((uint16_t)(length + 64 - 1)) >> 6);
    44b4:	86 2f       	mov	r24, r22
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	cf 96       	adiw	r24, 0x3f	; 63
    44ba:	26 e0       	ldi	r18, 0x06	; 6
    44bc:	96 95       	lsr	r25
    44be:	87 95       	ror	r24
    44c0:	2a 95       	dec	r18
    44c2:	e1 f7       	brne	.-8      	; 0x44bc <usb_ep_write+0x14>
    44c4:	38 2f       	mov	r19, r24
    
    if ((length % 64) == 0) {
    44c6:	26 2f       	mov	r18, r22
    44c8:	2f 73       	andi	r18, 0x3F	; 63
    44ca:	19 f4       	brne	.+6      	; 0x44d2 <usb_ep_write+0x2a>
        bytes_to_write = 64;
        packets_to_write++;
    44cc:	31 e0       	ldi	r19, 0x01	; 1
    44ce:	38 0f       	add	r19, r24
    44d0:	03 c0       	rjmp	.+6      	; 0x44d8 <usb_ep_write+0x30>
    44d2:	26 2f       	mov	r18, r22
    44d4:	61 34       	cpi	r22, 0x41	; 65
    44d6:	08 f0       	brcs	.+2      	; 0x44da <usb_ep_write+0x32>
    44d8:	20 e4       	ldi	r18, 0x40	; 64
    do {
    
        // Upload EP_SIZE data, less or zero packet.
        // Idea...upload as long as the EP is not full -> RWAL not set.
        
        UEINTX &= ~(1 << TXINI);
    44da:	80 91 e8 00 	lds	r24, 0x00E8
    44de:	8e 7f       	andi	r24, 0xFE	; 254
    44e0:	80 93 e8 00 	sts	0x00E8, r24
        
        while (bytes_to_write != 0) {
    44e4:	82 2f       	mov	r24, r18
    44e6:	fa 01       	movw	r30, r20
    44e8:	88 23       	and	r24, r24
    44ea:	29 f0       	breq	.+10     	; 0x44f6 <usb_ep_write+0x4e>
                
            UEDATX = *data_ptr;
    44ec:	91 91       	ld	r25, Z+
    44ee:	90 93 f1 00 	sts	0x00F1, r25
            
            // Decrement number of bytes in transaction.
            data_ptr++;
            bytes_to_write--;
    44f2:	81 50       	subi	r24, 0x01	; 1
    44f4:	f9 cf       	rjmp	.-14     	; 0x44e8 <usb_ep_write+0x40>
    44f6:	42 0f       	add	r20, r18
    44f8:	51 1d       	adc	r21, r1
        }
        
        length -= 64;
    44fa:	60 54       	subi	r22, 0x40	; 64
        
        // Clear FICOCON. -> switch Bank and send data.
        UEINTX &= ~(1 << FIFOCON);
    44fc:	80 91 e8 00 	lds	r24, 0x00E8
    4500:	8f 77       	andi	r24, 0x7F	; 127
    4502:	80 93 e8 00 	sts	0x00E8, r24
        
        // End of transfer reached. Check if zero length packet must be sent.
                  
        if (length >= 64) {
    4506:	60 34       	cpi	r22, 0x40	; 64
    4508:	10 f0       	brcs	.+4      	; 0x450e <usb_ep_write+0x66>
            bytes_to_write = 64;
    450a:	20 e4       	ldi	r18, 0x40	; 64
    450c:	01 c0       	rjmp	.+2      	; 0x4510 <usb_ep_write+0x68>
    450e:	26 2f       	mov	r18, r22
        } else {
            bytes_to_write = length;
        }
        
        packets_to_write--;
    4510:	31 50       	subi	r19, 0x01	; 1
        uint16_t timeout = 0xFFFF;
    4512:	8f ef       	ldi	r24, 0xFF	; 255
    4514:	9f ef       	ldi	r25, 0xFF	; 255
        
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
    4516:	70 91 e8 00 	lds	r23, 0x00E8
    451a:	70 fd       	sbrc	r23, 0
    451c:	07 c0       	rjmp	.+14     	; 0x452c <usb_ep_write+0x84>
            if (timeout == 0) {
    451e:	00 97       	sbiw	r24, 0x00	; 0
    4520:	19 f4       	brne	.+6      	; 0x4528 <usb_ep_write+0x80>
                LED_ORANGE_ON();
    4522:	76 98       	cbi	0x0e, 6	; 14
                return 1;
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	08 95       	ret
            } else {
                timeout--;
    4528:	01 97       	sbiw	r24, 0x01	; 1
    452a:	f5 cf       	rjmp	.-22     	; 0x4516 <usb_ep_write+0x6e>
            }
        }            // bank is not ready..    
    } while (packets_to_write != 0);
    452c:	31 11       	cpse	r19, r1
    452e:	d5 cf       	rjmp	.-86     	; 0x44da <usb_ep_write+0x32>
    return USB_SUCCESS;
    4530:	80 e0       	ldi	r24, 0x00	; 0
}
    4532:	08 95       	ret
    LEAVE_CRITICAL_REGION();
}

uint8_t usb_ep_write(uint8_t ep, uint8_t length, uint8_t *packet) {
    UENUM = ep;
    if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) { return USB_HW_TIME_OUT; }
    4534:	84 e0       	ldi	r24, 0x04	; 4
    4536:	08 95       	ret

00004538 <__vector_10>:
//!

#if defined(__ICCAVR__)
ISR(USB_General_vect) {
#elif defined(__GNUC__)
ISR(USB_GEN_vect) {
    4538:	1f 92       	push	r1
    453a:	0f 92       	push	r0
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	0f 92       	push	r0
    4540:	11 24       	eor	r1, r1
    4542:	0b b6       	in	r0, 0x3b	; 59
    4544:	0f 92       	push	r0
    4546:	2f 93       	push	r18
    4548:	3f 93       	push	r19
    454a:	4f 93       	push	r20
    454c:	5f 93       	push	r21
    454e:	6f 93       	push	r22
    4550:	7f 93       	push	r23
    4552:	8f 93       	push	r24
    4554:	9f 93       	push	r25
    4556:	af 93       	push	r26
    4558:	bf 93       	push	r27
    455a:	ef 93       	push	r30
    455c:	ff 93       	push	r31
#else
#error 'Unsupported compiler.'
#endif
   if (Is_usb_vbus_transition())
    455e:	80 91 da 00 	lds	r24, 0x00DA
    4562:	80 ff       	sbrs	r24, 0
    4564:	19 c0       	rjmp	.+50     	; 0x4598 <__vector_10+0x60>
   {
      Usb_ack_vbus_transition();
    4566:	8e ef       	ldi	r24, 0xFE	; 254
    4568:	80 93 da 00 	sts	0x00DA, r24
      if (Is_usb_vbus_high())
    456c:	80 91 d9 00 	lds	r24, 0x00D9
    4570:	80 ff       	sbrs	r24, 0
    4572:	10 c0       	rjmp	.+32     	; 0x4594 <__vector_10+0x5c>
      {
         usb_connected = true;
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	80 93 56 0d 	sts	0x0D56, r24
         //Usb_send_event(EVT_USB_POWERED);
			Usb_enable_reset_interrupt();
    457a:	80 91 e2 00 	lds	r24, 0x00E2
    457e:	88 60       	ori	r24, 0x08	; 8
    4580:	80 93 e2 00 	sts	0x00E2, r24
         usb_start_device();
    4584:	0e 94 65 21 	call	0x42ca	; 0x42ca <usb_start_device>
			Usb_attach();
    4588:	80 91 e0 00 	lds	r24, 0x00E0
    458c:	8e 7f       	andi	r24, 0xFE	; 254
    458e:	80 93 e0 00 	sts	0x00E0, r24
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <__vector_10+0x60>
      }
      else
      {
         usb_connected = false;
    4594:	10 92 56 0d 	sts	0x0D56, r1
         //Usb_send_event(EVT_USB_UNPOWERED);
      }
   }

   if(Is_usb_id_transition())
    4598:	80 91 da 00 	lds	r24, 0x00DA
    459c:	81 ff       	sbrs	r24, 1
    459e:	05 c0       	rjmp	.+10     	; 0x45aa <__vector_10+0x72>
   {
      Usb_ack_id_transition();
    45a0:	8d ef       	ldi	r24, 0xFD	; 253
    45a2:	80 93 da 00 	sts	0x00DA, r24
      if(Is_usb_id_device())
    45a6:	80 91 d9 00 	lds	r24, 0x00D9
      {
        // Usb_send_event(EVT_USB_HOST_FUNCTION);
      }
   }

   if (Is_usb_sof())
    45aa:	80 91 e1 00 	lds	r24, 0x00E1
    45ae:	82 ff       	sbrs	r24, 2
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <__vector_10+0x80>
   {
      Usb_ack_sof();
    45b2:	8b ef       	ldi	r24, 0xFB	; 251
    45b4:	80 93 e1 00 	sts	0x00E1, r24
//      Usb_sof_action();
   }

   if (Is_usb_suspend())
    45b8:	80 91 e1 00 	lds	r24, 0x00E1
    45bc:	80 ff       	sbrs	r24, 0
    45be:	10 c0       	rjmp	.+32     	; 0x45e0 <__vector_10+0xa8>
   {
      Usb_ack_suspend();
    45c0:	8e ef       	ldi	r24, 0xFE	; 254
    45c2:	80 93 e1 00 	sts	0x00E1, r24
      Usb_enable_wake_up_interrupt();
    45c6:	80 91 e2 00 	lds	r24, 0x00E2
    45ca:	80 61       	ori	r24, 0x10	; 16
    45cc:	80 93 e2 00 	sts	0x00E2, r24
      Usb_ack_wake_up();                 // clear wake up to detect next event
    45d0:	8f ee       	ldi	r24, 0xEF	; 239
    45d2:	80 93 e1 00 	sts	0x00E1, r24
      Usb_freeze_clock();
    45d6:	80 91 d8 00 	lds	r24, 0x00D8
    45da:	80 62       	ori	r24, 0x20	; 32
    45dc:	80 93 d8 00 	sts	0x00D8, r24
      //Usb_send_event(EVT_USB_SUSPEND);
   }

   if (Is_usb_wake_up())
    45e0:	80 91 e1 00 	lds	r24, 0x00E1
    45e4:	84 ff       	sbrs	r24, 4
    45e6:	0d c0       	rjmp	.+26     	; 0x4602 <__vector_10+0xca>
   {
      Usb_unfreeze_clock();
    45e8:	80 91 d8 00 	lds	r24, 0x00D8
    45ec:	8f 7d       	andi	r24, 0xDF	; 223
    45ee:	80 93 d8 00 	sts	0x00D8, r24
      Usb_ack_wake_up();
    45f2:	8f ee       	ldi	r24, 0xEF	; 239
    45f4:	80 93 e1 00 	sts	0x00E1, r24
      Usb_disable_wake_up_interrupt();
    45f8:	80 91 e2 00 	lds	r24, 0x00E2
    45fc:	8f 7e       	andi	r24, 0xEF	; 239
    45fe:	80 93 e2 00 	sts	0x00E2, r24
      //Usb_send_event(EVT_USB_WAKE_UP);
   }

   if (Is_usb_resume())
    4602:	80 91 e1 00 	lds	r24, 0x00E1
    4606:	85 ff       	sbrs	r24, 5
    4608:	0d c0       	rjmp	.+26     	; 0x4624 <__vector_10+0xec>
   {
      Usb_disable_wake_up_interrupt();
    460a:	80 91 e2 00 	lds	r24, 0x00E2
    460e:	8f 7e       	andi	r24, 0xEF	; 239
    4610:	80 93 e2 00 	sts	0x00E2, r24
      Usb_ack_resume();
    4614:	8f ed       	ldi	r24, 0xDF	; 223
    4616:	80 93 e1 00 	sts	0x00E1, r24
      Usb_disable_resume_interrupt();
    461a:	80 91 e2 00 	lds	r24, 0x00E2
    461e:	8f 7d       	andi	r24, 0xDF	; 223
    4620:	80 93 e2 00 	sts	0x00E2, r24
      //Usb_send_event(EVT_USB_RESUME);
   }

   if (Is_usb_reset()) {
    4624:	80 91 e1 00 	lds	r24, 0x00E1
    4628:	83 ff       	sbrs	r24, 3
    462a:	08 c0       	rjmp	.+16     	; 0x463c <__vector_10+0x104>
      Usb_ack_reset();
    462c:	87 ef       	ldi	r24, 0xF7	; 247
    462e:	80 93 e1 00 	sts	0x00E1, r24
      usb_init_device();
    4632:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <usb_init_device>
     // Usb_send_event(EVT_USB_RESET);
      reset_detected=true;
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	80 93 55 0d 	sts	0x0D55, r24
   }
}
    463c:	ff 91       	pop	r31
    463e:	ef 91       	pop	r30
    4640:	bf 91       	pop	r27
    4642:	af 91       	pop	r26
    4644:	9f 91       	pop	r25
    4646:	8f 91       	pop	r24
    4648:	7f 91       	pop	r23
    464a:	6f 91       	pop	r22
    464c:	5f 91       	pop	r21
    464e:	4f 91       	pop	r20
    4650:	3f 91       	pop	r19
    4652:	2f 91       	pop	r18
    4654:	0f 90       	pop	r0
    4656:	0b be       	out	0x3b, r0	; 59
    4658:	0f 90       	pop	r0
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	0f 90       	pop	r0
    465e:	1f 90       	pop	r1
    4660:	18 95       	reti

00004662 <vrt_init>:
uint8_t vrt_kernel_events_missed;
/*================================= LOCAL VARIABLES  =========================*/
static vrt_event_queue_size_t vrt_event_fifo_tail; //!< Extraction point of events.
/*================================= PROTOTYPES       =========================*/
bool vrt_init(void) {
    vrt_event_fifo_head = 0;
    4662:	10 92 e1 11 	sts	0x11E1, r1
    vrt_event_fifo_tail = VRT_EVENT_QUEUE_SIZE - 1;
    4666:	83 e1       	ldi	r24, 0x13	; 19
    4668:	80 93 57 0d 	sts	0x0D57, r24
    vrt_event_fifo_items_used = 0;
    466c:	10 92 e0 11 	sts	0x11E0, r1
    vrt_event_fifo_items_free = VRT_EVENT_QUEUE_SIZE;
    4670:	84 e1       	ldi	r24, 0x14	; 20
    4672:	80 93 33 12 	sts	0x1233, r24
    
    vrt_kernel_events_missed = 0;
    4676:	10 92 32 12 	sts	0x1232, r1
    
    return true;
}
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	08 95       	ret

0000467e <vrt_post_event>:
    vrt_event_fifo_items_free = VRT_EVENT_QUEUE_SIZE;
    LEAVE_CRITICAL_REGION();
}


bool vrt_post_event(vrt_event_handler_t handler, void* attribute) {
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	1f 92       	push	r1
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    //Check that there is enough room left to do add an event.
    if (vrt_event_fifo_items_free == 0) { return false;}
    4688:	20 91 33 12 	lds	r18, 0x1233
    468c:	22 23       	and	r18, r18
    468e:	39 f1       	breq	.+78     	; 0x46de <vrt_post_event+0x60>
    
    vrt_event_t* this_event_ptr = &vrt_event_fifo[vrt_event_fifo_head];
    4690:	e0 91 e1 11 	lds	r30, 0x11E1
    4694:	24 e0       	ldi	r18, 0x04	; 4
    4696:	e2 9f       	mul	r30, r18
    4698:	f0 01       	movw	r30, r0
    469a:	11 24       	eor	r1, r1
    469c:	ee 51       	subi	r30, 0x1E	; 30
    469e:	fe 4e       	sbci	r31, 0xEE	; 238
    this_event_ptr->handler = handler;
    46a0:	91 83       	std	Z+1, r25	; 0x01
    46a2:	80 83       	st	Z, r24
    this_event_ptr->attribute = attribute;
    46a4:	73 83       	std	Z+3, r23	; 0x03
    46a6:	62 83       	std	Z+2, r22	; 0x02
    
    // Do event FIFO handling. Must be protected from interrupts.
    ENTER_CRITICAL_REGION();
    46a8:	8f b7       	in	r24, 0x3f	; 63
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	f8 94       	cli
    
    if (vrt_event_fifo_head == (VRT_EVENT_QUEUE_SIZE - 1)) {
    46ae:	80 91 e1 11 	lds	r24, 0x11E1
    46b2:	83 31       	cpi	r24, 0x13	; 19
    46b4:	19 f4       	brne	.+6      	; 0x46bc <vrt_post_event+0x3e>
        vrt_event_fifo_head = 0;
    46b6:	10 92 e1 11 	sts	0x11E1, r1
    46ba:	03 c0       	rjmp	.+6      	; 0x46c2 <vrt_post_event+0x44>
    } else {
        vrt_event_fifo_head++;
    46bc:	8f 5f       	subi	r24, 0xFF	; 255
    46be:	80 93 e1 11 	sts	0x11E1, r24
    } // END: if (event_fifo_head == (VRT_EVENT_QUEUE_SIZE - 1)) ...
    
    vrt_event_fifo_items_used++;
    46c2:	80 91 e0 11 	lds	r24, 0x11E0
    46c6:	8f 5f       	subi	r24, 0xFF	; 255
    46c8:	80 93 e0 11 	sts	0x11E0, r24
    vrt_event_fifo_items_free--;
    46cc:	80 91 33 12 	lds	r24, 0x1233
    46d0:	81 50       	subi	r24, 0x01	; 1
    46d2:	80 93 33 12 	sts	0x1233, r24
    
    LEAVE_CRITICAL_REGION();
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
    46d8:	8f bf       	out	0x3f, r24	; 63
    
    return true;
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	01 c0       	rjmp	.+2      	; 0x46e0 <vrt_post_event+0x62>
}


bool vrt_post_event(vrt_event_handler_t handler, void* attribute) {
    //Check that there is enough room left to do add an event.
    if (vrt_event_fifo_items_free == 0) { return false;}
    46de:	80 e0       	ldi	r24, 0x00	; 0
    vrt_event_fifo_items_free--;
    
    LEAVE_CRITICAL_REGION();
    
    return true;
}
    46e0:	0f 90       	pop	r0
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	08 95       	ret

000046e8 <vrt_dispatch_event>:


void vrt_dispatch_event(void) {
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	1f 92       	push	r1
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    /* Get next event. */
    ENTER_CRITICAL_REGION();
    46f2:	8f b7       	in	r24, 0x3f	; 63
    46f4:	89 83       	std	Y+1, r24	; 0x01
    46f6:	f8 94       	cli
	/* Check if there are events in the queue. */
    if (0 == vrt_event_fifo_items_used) { 
    46f8:	80 91 e0 11 	lds	r24, 0x11E0
    46fc:	81 11       	cpse	r24, r1
    46fe:	03 c0       	rjmp	.+6      	; 0x4706 <vrt_dispatch_event+0x1e>
        LEAVE_CRITICAL_REGION();
    4700:	89 81       	ldd	r24, Y+1	; 0x01
    4702:	8f bf       	out	0x3f, r24	; 63
        return;
    4704:	26 c0       	rjmp	.+76     	; 0x4752 <vrt_dispatch_event+0x6a>
    }
    
    if ((VRT_EVENT_QUEUE_SIZE - 1) == vrt_event_fifo_tail) {
    4706:	90 91 57 0d 	lds	r25, 0x0D57
    470a:	93 31       	cpi	r25, 0x13	; 19
    470c:	19 f4       	brne	.+6      	; 0x4714 <vrt_dispatch_event+0x2c>
	    vrt_event_fifo_tail = 0;
    470e:	10 92 57 0d 	sts	0x0D57, r1
    4712:	03 c0       	rjmp	.+6      	; 0x471a <vrt_dispatch_event+0x32>
    } else {
	    vrt_event_fifo_tail++;
    4714:	9f 5f       	subi	r25, 0xFF	; 255
    4716:	90 93 57 0d 	sts	0x0D57, r25
    }
    
    vrt_event_fifo_items_used--;
    471a:	81 50       	subi	r24, 0x01	; 1
    471c:	80 93 e0 11 	sts	0x11E0, r24
    vrt_event_fifo_items_free++;
    4720:	80 91 33 12 	lds	r24, 0x1233
    4724:	8f 5f       	subi	r24, 0xFF	; 255
    4726:	80 93 33 12 	sts	0x1233, r24
    
    LEAVE_CRITICAL_REGION();
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	8f bf       	out	0x3f, r24	; 63
    
    /* Extract next event and call the event handler if it is known to the system. */
    vrt_event_t *this_event = &vrt_event_fifo[vrt_event_fifo_tail];
    472e:	a0 91 57 0d 	lds	r26, 0x0D57
    4732:	84 e0       	ldi	r24, 0x04	; 4
    4734:	a8 9f       	mul	r26, r24
    4736:	d0 01       	movw	r26, r0
    4738:	11 24       	eor	r1, r1
    473a:	ae 51       	subi	r26, 0x1E	; 30
    473c:	be 4e       	sbci	r27, 0xEE	; 238
    
    // Dispatch event if possible.
    if (NULL == (this_event->handler)) { 
    473e:	ed 91       	ld	r30, X+
    4740:	fc 91       	ld	r31, X
    4742:	11 97       	sbiw	r26, 0x01	; 1
    4744:	30 97       	sbiw	r30, 0x00	; 0
    4746:	29 f0       	breq	.+10     	; 0x4752 <vrt_dispatch_event+0x6a>
        return;
    }
    
    (this_event->handler)(this_event->attribute);
    4748:	12 96       	adiw	r26, 0x02	; 2
    474a:	8d 91       	ld	r24, X+
    474c:	9c 91       	ld	r25, X
    474e:	13 97       	sbiw	r26, 0x03	; 3
    4750:	09 95       	icall
}
    4752:	0f 90       	pop	r0
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret

0000475a <vrt_mem_init>:
/*================================= LOCAL VARIABLES  =========================*/
static uint8_t nmbr_of_partitions = 0;
static vrt_mem_partition_desc_t *first_partition;
/*================================= PROTOTYPES       =========================*/
bool vrt_mem_init(void) {
    nmbr_of_partitions = 0;
    475a:	10 92 5a 0d 	sts	0x0D5A, r1
    first_partition = NULL;
    475e:	10 92 59 0d 	sts	0x0D59, r1
    4762:	10 92 58 0d 	sts	0x0D58, r1
    
	return true;
}
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	08 95       	ret

0000476a <vrt_mem_add_partition>:


bool vrt_mem_add_partition(uint8_t *address, uint16_t block_size, uint8_t block_count, vrt_mem_partition_desc_t *desc) {
    476a:	bf 92       	push	r11
    476c:	cf 92       	push	r12
    476e:	df 92       	push	r13
    4770:	ef 92       	push	r14
    4772:	ff 92       	push	r15
    4774:	0f 93       	push	r16
    4776:	1f 93       	push	r17
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	1f 92       	push	r1
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	f9 01       	movw	r30, r18
    /* Validate  function parameters. */
    if (NULL == address) { return false; }
    4784:	00 97       	sbiw	r24, 0x00	; 0
    4786:	09 f4       	brne	.+2      	; 0x478a <vrt_mem_add_partition+0x20>
    4788:	6b c0       	rjmp	.+214    	; 0x4860 <vrt_mem_add_partition+0xf6>
    if (block_count < 2) { return false; }
    478a:	42 30       	cpi	r20, 0x02	; 2
    478c:	08 f4       	brcc	.+2      	; 0x4790 <vrt_mem_add_partition+0x26>
    478e:	68 c0       	rjmp	.+208    	; 0x4860 <vrt_mem_add_partition+0xf6>
    if (block_size < sizeof(void *)) { return false; }
    4790:	62 30       	cpi	r22, 0x02	; 2
    4792:	71 05       	cpc	r23, r1
    4794:	08 f4       	brcc	.+2      	; 0x4798 <vrt_mem_add_partition+0x2e>
    4796:	64 c0       	rjmp	.+200    	; 0x4860 <vrt_mem_add_partition+0xf6>
    
    /* Protect the remaining code from interrupts. */
    ENTER_CRITICAL_REGION();
    4798:	2f b7       	in	r18, 0x3f	; 63
    479a:	29 83       	std	Y+1, r18	; 0x01
    479c:	f8 94       	cli
    
    /* Build list of free blocks. */
    void **link = (void **)address;
    uint8_t *block  = (uint8_t *)(address + block_size);
    479e:	9c 01       	movw	r18, r24
    47a0:	26 0f       	add	r18, r22
    47a2:	37 1f       	adc	r19, r23
    
    for (uint8_t i = 0; i < (block_count - 1); i++) {
    47a4:	dc 01       	movw	r26, r24
    47a6:	b1 2c       	mov	r11, r1
    47a8:	04 2f       	mov	r16, r20
    47aa:	10 e0       	ldi	r17, 0x00	; 0
    47ac:	78 01       	movw	r14, r16
    47ae:	51 e0       	ldi	r21, 0x01	; 1
    47b0:	e5 1a       	sub	r14, r21
    47b2:	f1 08       	sbc	r15, r1
    47b4:	cb 2c       	mov	r12, r11
    47b6:	d1 2c       	mov	r13, r1
    47b8:	ce 14       	cp	r12, r14
    47ba:	df 04       	cpc	r13, r15
    47bc:	3c f4       	brge	.+14     	; 0x47cc <vrt_mem_add_partition+0x62>
       *link  = (void *)block;
    47be:	2d 93       	st	X+, r18
    47c0:	3c 93       	st	X, r19
    
    /* Build list of free blocks. */
    void **link = (void **)address;
    uint8_t *block  = (uint8_t *)(address + block_size);
    
    for (uint8_t i = 0; i < (block_count - 1); i++) {
    47c2:	b3 94       	inc	r11
       *link  = (void *)block;
        link  = (void **)block;
    47c4:	d9 01       	movw	r26, r18
        block = (uint8_t *)(block + block_size);
    47c6:	26 0f       	add	r18, r22
    47c8:	37 1f       	adc	r19, r23
    47ca:	f4 cf       	rjmp	.-24     	; 0x47b4 <vrt_mem_add_partition+0x4a>
    }
    
    *link = (void *)NULL;
    47cc:	1d 92       	st	X+, r1
    47ce:	1c 92       	st	X, r1
    
    /* Set-up the partition. */
    desc->block_size = block_size;
    47d0:	71 83       	std	Z+1, r23	; 0x01
    47d2:	60 83       	st	Z, r22
    desc->block_count = block_count;
    47d4:	42 83       	std	Z+2, r20	; 0x02
    desc->free_block_count = block_count;
    47d6:	43 83       	std	Z+3, r20	; 0x03
    desc->partition_start = address;
    47d8:	95 83       	std	Z+5, r25	; 0x05
    47da:	84 83       	std	Z+4, r24	; 0x04
    desc->partition_end = address + (block_size * block_count) - 1;
    47dc:	06 9f       	mul	r16, r22
    47de:	90 01       	movw	r18, r0
    47e0:	07 9f       	mul	r16, r23
    47e2:	30 0d       	add	r19, r0
    47e4:	16 9f       	mul	r17, r22
    47e6:	30 0d       	add	r19, r0
    47e8:	11 24       	eor	r1, r1
    47ea:	21 50       	subi	r18, 0x01	; 1
    47ec:	31 09       	sbc	r19, r1
    47ee:	28 0f       	add	r18, r24
    47f0:	39 1f       	adc	r19, r25
    47f2:	37 83       	std	Z+7, r19	; 0x07
    47f4:	26 83       	std	Z+6, r18	; 0x06
    desc->free_list = address;
    47f6:	91 87       	std	Z+9, r25	; 0x09
    47f8:	80 87       	std	Z+8, r24	; 0x08
    
    /* Add to the list of partitions. The partitions are sorted by ascending block size. */
    if (0 == nmbr_of_partitions) {
    47fa:	40 91 5a 0d 	lds	r20, 0x0D5A
    47fe:	41 11       	cpse	r20, r1
    4800:	07 c0       	rjmp	.+14     	; 0x4810 <vrt_mem_add_partition+0xa6>
        desc->next = (vrt_mem_partition_desc_t *)NULL;
    4802:	13 86       	std	Z+11, r1	; 0x0b
    4804:	12 86       	std	Z+10, r1	; 0x0a
        first_partition = desc;
    4806:	f0 93 59 0d 	sts	0x0D59, r31
    480a:	e0 93 58 0d 	sts	0x0D58, r30
    480e:	21 c0       	rjmp	.+66     	; 0x4852 <vrt_mem_add_partition+0xe8>
    } else {
        vrt_mem_partition_desc_t *current_partition = first_partition;
    4810:	80 91 58 0d 	lds	r24, 0x0D58
    4814:	90 91 59 0d 	lds	r25, 0x0D59
    4818:	54 2f       	mov	r21, r20
    481a:	dc 01       	movw	r26, r24
        vrt_mem_partition_desc_t *previous_partition = first_partition;
        uint8_t partiotions_left = nmbr_of_partitions;
    
        while(0 != partiotions_left) {
            if((current_partition->block_size) >= block_size) {
    481c:	2d 91       	ld	r18, X+
    481e:	3c 91       	ld	r19, X
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	26 17       	cp	r18, r22
    4824:	37 07       	cpc	r19, r23
    4826:	60 f4       	brcc	.+24     	; 0x4840 <vrt_mem_add_partition+0xd6>
                break;
            } else {
                previous_partition = current_partition;
                current_partition = current_partition->next;
    4828:	1a 96       	adiw	r26, 0x0a	; 10
    482a:	3c 91       	ld	r19, X
    482c:	1a 97       	sbiw	r26, 0x0a	; 10
    482e:	1b 96       	adiw	r26, 0x0b	; 11
    4830:	2c 91       	ld	r18, X
    4832:	1b 97       	sbiw	r26, 0x0b	; 11
                partiotions_left--;
    4834:	51 50       	subi	r21, 0x01	; 1
    } else {
        vrt_mem_partition_desc_t *current_partition = first_partition;
        vrt_mem_partition_desc_t *previous_partition = first_partition;
        uint8_t partiotions_left = nmbr_of_partitions;
    
        while(0 != partiotions_left) {
    4836:	cd 01       	movw	r24, r26
    4838:	29 f0       	breq	.+10     	; 0x4844 <vrt_mem_add_partition+0xda>
            if((current_partition->block_size) >= block_size) {
                break;
            } else {
                previous_partition = current_partition;
                current_partition = current_partition->next;
    483a:	a3 2f       	mov	r26, r19
    483c:	b2 2f       	mov	r27, r18
    483e:	ee cf       	rjmp	.-36     	; 0x481c <vrt_mem_add_partition+0xb2>
    4840:	3a 2f       	mov	r19, r26
    4842:	2b 2f       	mov	r18, r27
                partiotions_left--;
            }
        }
        
        previous_partition->next = desc;
    4844:	dc 01       	movw	r26, r24
    4846:	1b 96       	adiw	r26, 0x0b	; 11
    4848:	fc 93       	st	X, r31
    484a:	ee 93       	st	-X, r30
    484c:	1a 97       	sbiw	r26, 0x0a	; 10
        desc->next = current_partition;
    484e:	32 87       	std	Z+10, r19	; 0x0a
    4850:	23 87       	std	Z+11, r18	; 0x0b
    }
    
    nmbr_of_partitions++;
    4852:	4f 5f       	subi	r20, 0xFF	; 255
    4854:	40 93 5a 0d 	sts	0x0D5A, r20
    
    LEAVE_CRITICAL_REGION();
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	8f bf       	out	0x3f, r24	; 63
	return true;
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <vrt_mem_add_partition+0xf8>
}


bool vrt_mem_add_partition(uint8_t *address, uint16_t block_size, uint8_t block_count, vrt_mem_partition_desc_t *desc) {
    /* Validate  function parameters. */
    if (NULL == address) { return false; }
    4860:	80 e0       	ldi	r24, 0x00	; 0
    
    nmbr_of_partitions++;
    
    LEAVE_CRITICAL_REGION();
	return true;
}
    4862:	0f 90       	pop	r0
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	1f 91       	pop	r17
    486a:	0f 91       	pop	r16
    486c:	ff 90       	pop	r15
    486e:	ef 90       	pop	r14
    4870:	df 90       	pop	r13
    4872:	cf 90       	pop	r12
    4874:	bf 90       	pop	r11
    4876:	08 95       	ret

00004878 <vrt_mem_alloc>:


void * vrt_mem_alloc(uint16_t block_size) {
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	1f 92       	push	r1
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
    /* Validate function parameter. */
    if (0 == block_size) { return (void*)NULL; }
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	a1 f1       	breq	.+104    	; 0x48ee <vrt_mem_alloc+0x76>
    /* Check that there is at least one partition available. */
    if (0 == nmbr_of_partitions) { return (void*)NULL; }
    4886:	20 91 5a 0d 	lds	r18, 0x0D5A
    488a:	22 23       	and	r18, r18
    488c:	81 f1       	breq	.+96     	; 0x48ee <vrt_mem_alloc+0x76>
    
    /* Find the smallest block available. */
    ENTER_CRITICAL_REGION();
    488e:	2f b7       	in	r18, 0x3f	; 63
    4890:	29 83       	std	Y+1, r18	; 0x01
    4892:	f8 94       	cli
    vrt_mem_partition_desc_t *partition = first_partition;
    4894:	e0 91 58 0d 	lds	r30, 0x0D58
    4898:	f0 91 59 0d 	lds	r31, 0x0D59
    uint8_t partiotions_left = nmbr_of_partitions;
    489c:	50 91 5a 0d 	lds	r21, 0x0D5A
    
    bool partition_found = false;
    48a0:	40 e0       	ldi	r20, 0x00	; 0
    while((0 != partiotions_left) && (false == partition_found)) {
    48a2:	55 23       	and	r21, r21
    48a4:	e1 f0       	breq	.+56     	; 0x48de <vrt_mem_alloc+0x66>
    48a6:	41 11       	cpse	r20, r1
    48a8:	0f c0       	rjmp	.+30     	; 0x48c8 <vrt_mem_alloc+0x50>
        if(((partition->block_size) >= block_size) && (0 != (partition->free_block_count))) {
    48aa:	20 81       	ld	r18, Z
    48ac:	31 81       	ldd	r19, Z+1	; 0x01
    48ae:	28 17       	cp	r18, r24
    48b0:	39 07       	cpc	r19, r25
    48b2:	18 f0       	brcs	.+6      	; 0x48ba <vrt_mem_alloc+0x42>
    48b4:	23 81       	ldd	r18, Z+3	; 0x03
    48b6:	21 11       	cpse	r18, r1
    48b8:	05 c0       	rjmp	.+10     	; 0x48c4 <vrt_mem_alloc+0x4c>
            partition_found = true;
        } else {
            partition = partition->next;
    48ba:	02 84       	ldd	r0, Z+10	; 0x0a
    48bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    48be:	e0 2d       	mov	r30, r0
            partiotions_left--;
    48c0:	51 50       	subi	r21, 0x01	; 1
    48c2:	ef cf       	rjmp	.-34     	; 0x48a2 <vrt_mem_alloc+0x2a>
    uint8_t partiotions_left = nmbr_of_partitions;
    
    bool partition_found = false;
    while((0 != partiotions_left) && (false == partition_found)) {
        if(((partition->block_size) >= block_size) && (0 != (partition->free_block_count))) {
            partition_found = true;
    48c4:	41 e0       	ldi	r20, 0x01	; 1
    48c6:	ed cf       	rjmp	.-38     	; 0x48a2 <vrt_mem_alloc+0x2a>
    }
    
    void *block = (void *)NULL;
    
    if (true == partition_found) {
        block = partition->free_list;
    48c8:	a0 85       	ldd	r26, Z+8	; 0x08
    48ca:	b1 85       	ldd	r27, Z+9	; 0x09
        partition->free_list = *(void **)block;
    48cc:	8d 91       	ld	r24, X+
    48ce:	9c 91       	ld	r25, X
    48d0:	11 97       	sbiw	r26, 0x01	; 1
    48d2:	91 87       	std	Z+9, r25	; 0x09
    48d4:	80 87       	std	Z+8, r24	; 0x08
        (partition->free_block_count)--;
    48d6:	83 81       	ldd	r24, Z+3	; 0x03
    48d8:	81 50       	subi	r24, 0x01	; 1
    48da:	83 83       	std	Z+3, r24	; 0x03
    48dc:	04 c0       	rjmp	.+8      	; 0x48e6 <vrt_mem_alloc+0x6e>
        }
    }
    
    void *block = (void *)NULL;
    
    if (true == partition_found) {
    48de:	41 11       	cpse	r20, r1
    48e0:	f3 cf       	rjmp	.-26     	; 0x48c8 <vrt_mem_alloc+0x50>
            partition = partition->next;
            partiotions_left--;
        }
    }
    
    void *block = (void *)NULL;
    48e2:	a0 e0       	ldi	r26, 0x00	; 0
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
        block = partition->free_list;
        partition->free_list = *(void **)block;
        (partition->free_block_count)--;
    }
    
    LEAVE_CRITICAL_REGION();
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	8f bf       	out	0x3f, r24	; 63
    
    return block;
    48ea:	cd 01       	movw	r24, r26
    48ec:	02 c0       	rjmp	.+4      	; 0x48f2 <vrt_mem_alloc+0x7a>
}


void * vrt_mem_alloc(uint16_t block_size) {
    /* Validate function parameter. */
    if (0 == block_size) { return (void*)NULL; }
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    LEAVE_CRITICAL_REGION();
    
    return block;
}
    48f2:	0f 90       	pop	r0
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	08 95       	ret

000048fa <vrt_mem_free>:


void vrt_mem_free(void *block) {
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	1f 92       	push	r1
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the function parameter is valid. */
    if (NULL == block) { return; }
    4904:	00 97       	sbiw	r24, 0x00	; 0
    4906:	a9 f1       	breq	.+106    	; 0x4972 <vrt_mem_free+0x78>
    
    /* Check that there is at least one partition available. */
    if (0 == nmbr_of_partitions) { return; }
    4908:	20 91 5a 0d 	lds	r18, 0x0D5A
    490c:	22 23       	and	r18, r18
    490e:	89 f1       	breq	.+98     	; 0x4972 <vrt_mem_free+0x78>
    
    /* Find partition where this block belongs. */
    ENTER_CRITICAL_REGION();
    4910:	2f b7       	in	r18, 0x3f	; 63
    4912:	29 83       	std	Y+1, r18	; 0x01
    4914:	f8 94       	cli
    vrt_mem_partition_desc_t *partition = first_partition;
    4916:	e0 91 58 0d 	lds	r30, 0x0D58
    491a:	f0 91 59 0d 	lds	r31, 0x0D59
    uint8_t partiotions_left = nmbr_of_partitions;
    491e:	70 91 5a 0d 	lds	r23, 0x0D5A
    
    bool partition_found = false;
    4922:	60 e0       	ldi	r22, 0x00	; 0
    while((0 != partiotions_left) && (false == partition_found)) {
    4924:	77 23       	and	r23, r23
    4926:	99 f0       	breq	.+38     	; 0x494e <vrt_mem_free+0x54>
    4928:	61 11       	cpse	r22, r1
    492a:	13 c0       	rjmp	.+38     	; 0x4952 <vrt_mem_free+0x58>
        void *start = partition->partition_start;
        void *end   = partition->partition_end;
    492c:	26 81       	ldd	r18, Z+6	; 0x06
    492e:	37 81       	ldd	r19, Z+7	; 0x07
        
        if((block >= start) && (block <= end)) {
    4930:	44 81       	ldd	r20, Z+4	; 0x04
    4932:	55 81       	ldd	r21, Z+5	; 0x05
    4934:	84 17       	cp	r24, r20
    4936:	95 07       	cpc	r25, r21
    4938:	18 f0       	brcs	.+6      	; 0x4940 <vrt_mem_free+0x46>
    493a:	28 17       	cp	r18, r24
    493c:	39 07       	cpc	r19, r25
    493e:	28 f4       	brcc	.+10     	; 0x494a <vrt_mem_free+0x50>
            partition_found = true;
        } else {
            partition = partition->next;
    4940:	02 84       	ldd	r0, Z+10	; 0x0a
    4942:	f3 85       	ldd	r31, Z+11	; 0x0b
    4944:	e0 2d       	mov	r30, r0
            partiotions_left--;
    4946:	71 50       	subi	r23, 0x01	; 1
    4948:	ed cf       	rjmp	.-38     	; 0x4924 <vrt_mem_free+0x2a>
    while((0 != partiotions_left) && (false == partition_found)) {
        void *start = partition->partition_start;
        void *end   = partition->partition_end;
        
        if((block >= start) && (block <= end)) {
            partition_found = true;
    494a:	61 e0       	ldi	r22, 0x01	; 1
    494c:	eb cf       	rjmp	.-42     	; 0x4924 <vrt_mem_free+0x2a>
            partition = partition->next;
            partiotions_left--;
        }
    }
    
    if (true == partition_found) {
    494e:	66 23       	and	r22, r22
    4950:	71 f0       	breq	.+28     	; 0x496e <vrt_mem_free+0x74>
        /* Check if this partitions is full or not. */
        if ((partition->free_block_count) >= (partition->block_count)) { return; }
    4952:	33 81       	ldd	r19, Z+3	; 0x03
    4954:	22 81       	ldd	r18, Z+2	; 0x02
    4956:	32 17       	cp	r19, r18
    4958:	60 f4       	brcc	.+24     	; 0x4972 <vrt_mem_free+0x78>
        
        *(void **)block = partition->free_list;
    495a:	20 85       	ldd	r18, Z+8	; 0x08
    495c:	31 85       	ldd	r19, Z+9	; 0x09
    495e:	dc 01       	movw	r26, r24
    4960:	2d 93       	st	X+, r18
    4962:	3c 93       	st	X, r19
        partition->free_list = block;
    4964:	91 87       	std	Z+9, r25	; 0x09
    4966:	80 87       	std	Z+8, r24	; 0x08
        (partition->free_block_count)++;
    4968:	83 81       	ldd	r24, Z+3	; 0x03
    496a:	8f 5f       	subi	r24, 0xFF	; 255
    496c:	83 83       	std	Z+3, r24	; 0x03
    }
    
    LEAVE_CRITICAL_REGION();
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	8f bf       	out	0x3f, r24	; 63
}
    4972:	0f 90       	pop	r0
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	08 95       	ret

0000497a <vrt_timer_init>:
/*================================= PROTOTYPES       =========================*/


bool vrt_timer_init(void) {
    /* Initialize local variables. */
    vrt_time_msw          = 0;
    497a:	10 92 35 12 	sts	0x1235, r1
    497e:	10 92 34 12 	sts	0x1234, r1
    high_pri_delay_cb     = (vrt_timer_cb_t)NULL;
    4982:	10 92 66 0d 	sts	0x0D66, r1
    4986:	10 92 65 0d 	sts	0x0D65, r1
    high_pri_delay_param  = (void *)NULL;
    498a:	10 92 64 0d 	sts	0x0D64, r1
    498e:	10 92 63 0d 	sts	0x0D63, r1
    delay_msw             = 0;
    4992:	10 92 62 0d 	sts	0x0D62, r1
    4996:	10 92 61 0d 	sts	0x0D61, r1
    delay_lsw             = 0;
    499a:	10 92 60 0d 	sts	0x0D60, r1
    499e:	10 92 5f 0d 	sts	0x0D5F, r1
    tick_handler          = (vrt_timer_tick_handler_t)NULL;
    49a2:	10 92 5c 0d 	sts	0x0D5C, r1
    49a6:	10 92 5b 0d 	sts	0x0D5B, r1
    ticks_waiting         = 0;
    49aa:	10 92 5e 0d 	sts	0x0D5E, r1
    49ae:	10 92 5d 0d 	sts	0x0D5D, r1
    
	/* Set up timer. */
    VRT_TIME_ENABLE_MODULE();
    49b2:	e4 e6       	ldi	r30, 0x64	; 100
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
    49b8:	87 7f       	andi	r24, 0xF7	; 247
    49ba:	80 83       	st	Z, r24
    
    VRT_TIME_CONF_REG_B = VRT_TIME_TCCRB_CONFIG;
    49bc:	83 e4       	ldi	r24, 0x43	; 67
    49be:	80 93 81 00 	sts	0x0081, r24
    VRT_TIME_OUT_COMP_B = VRT_TIME_TC_VALUE + VRT_TIMER_SLOW_TICK_RELOAD_VALUE;
    49c2:	80 91 84 00 	lds	r24, 0x0084
    49c6:	90 91 85 00 	lds	r25, 0x0085
    49ca:	86 59       	subi	r24, 0x96	; 150
    49cc:	97 4e       	sbci	r25, 0xE7	; 231
    49ce:	90 93 8b 00 	sts	0x008B, r25
    49d2:	80 93 8a 00 	sts	0x008A, r24
    
    VRT_TIME_FLAG_REG = 0xFF;
    49d6:	8f ef       	ldi	r24, 0xFF	; 255
    49d8:	86 bb       	out	0x16, r24	; 22
    VRT_TIME_ISR_MASK_REG = (1 << VT_OCIE_B) | (1 << VT_TOIE);
    49da:	85 e0       	ldi	r24, 0x05	; 5
    49dc:	80 93 6f 00 	sts	0x006F, r24
    
    return true;
}
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	08 95       	ret

000049e4 <vrt_timer_get_tick_cnt>:
    VRT_TIME_DISABLE();
    VRT_TIME_DISABLE_MODULE();
}


uint32_t vrt_timer_get_tick_cnt(void) {
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    
    uint16_t current_time_hi;
    uint32_t current_time;
    
    do {
        current_time_hi = vrt_time_msw;
    49e8:	20 91 34 12 	lds	r18, 0x1234
    49ec:	30 91 35 12 	lds	r19, 0x1235
        current_time = (uint32_t)vrt_time_msw << 16;
    49f0:	60 91 34 12 	lds	r22, 0x1234
    49f4:	70 91 35 12 	lds	r23, 0x1235
        current_time |= VRT_TIME_TC_VALUE;
    49f8:	00 91 84 00 	lds	r16, 0x0084
    49fc:	10 91 85 00 	lds	r17, 0x0085
    } while (current_time_hi != vrt_time_msw);
    4a00:	80 91 34 12 	lds	r24, 0x1234
    4a04:	90 91 35 12 	lds	r25, 0x1235
    4a08:	28 17       	cp	r18, r24
    4a0a:	39 07       	cpc	r19, r25
    4a0c:	69 f7       	brne	.-38     	; 0x49e8 <vrt_timer_get_tick_cnt+0x4>
    uint16_t current_time_hi;
    uint32_t current_time;
    
    do {
        current_time_hi = vrt_time_msw;
        current_time = (uint32_t)vrt_time_msw << 16;
    4a0e:	cb 01       	movw	r24, r22
    4a10:	a0 e0       	ldi	r26, 0x00	; 0
    4a12:	b0 e0       	ldi	r27, 0x00	; 0
    4a14:	77 27       	eor	r23, r23
    4a16:	66 27       	eor	r22, r22
        current_time |= VRT_TIME_TC_VALUE;
    4a18:	20 e0       	ldi	r18, 0x00	; 0
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	60 2b       	or	r22, r16
    4a1e:	71 2b       	or	r23, r17
    4a20:	82 2b       	or	r24, r18
    4a22:	93 2b       	or	r25, r19
    } while (current_time_hi != vrt_time_msw);
    
	return current_time;
}
    4a24:	1f 91       	pop	r17
    4a26:	0f 91       	pop	r16
    4a28:	08 95       	ret

00004a2a <vrt_timer_start_high_pri_delay>:


bool vrt_timer_start_high_pri_delay(uint32_t ticks, vrt_timer_cb_t cb, void *cb_param) {
    4a2a:	0f 93       	push	r16
    4a2c:	1f 93       	push	r17
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29
    4a32:	1f 92       	push	r1
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the function parameters are valid. */
    if (NULL == cb) { 
    4a38:	41 15       	cp	r20, r1
    4a3a:	51 05       	cpc	r21, r1
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <vrt_timer_start_high_pri_delay+0x16>
    4a3e:	44 c0       	rjmp	.+136    	; 0x4ac8 <vrt_timer_start_high_pri_delay+0x9e>
        return false;
    }
  
    /* Enter protected region where the timer is installed. */
    ENTER_CRITICAL_REGION();
    4a40:	ef b7       	in	r30, 0x3f	; 63
    4a42:	e9 83       	std	Y+1, r30	; 0x01
    4a44:	f8 94       	cli
    
    /* Check if the high priority timer is already running. */    
    if (NULL != high_pri_delay_cb) {
    4a46:	e0 91 65 0d 	lds	r30, 0x0D65
    4a4a:	f0 91 66 0d 	lds	r31, 0x0D66
    4a4e:	ef 2b       	or	r30, r31
    4a50:	19 f0       	breq	.+6      	; 0x4a58 <vrt_timer_start_high_pri_delay+0x2e>
        LEAVE_CRITICAL_REGION();
    4a52:	89 81       	ldd	r24, Y+1	; 0x01
    4a54:	8f bf       	out	0x3f, r24	; 63
    4a56:	38 c0       	rjmp	.+112    	; 0x4ac8 <vrt_timer_start_high_pri_delay+0x9e>
        return false;
    }
    
    high_pri_delay_cb = cb;
    4a58:	50 93 66 0d 	sts	0x0D66, r21
    4a5c:	40 93 65 0d 	sts	0x0D65, r20
    high_pri_delay_param = cb_param;
    4a60:	30 93 64 0d 	sts	0x0D64, r19
    4a64:	20 93 63 0d 	sts	0x0D63, r18
    
    /* Check if the delay is small enough to only use the  */
    delay_msw = (ticks >> 16 * 1) & 0xFFFF;
    4a68:	8c 01       	movw	r16, r24
    4a6a:	22 27       	eor	r18, r18
    4a6c:	33 27       	eor	r19, r19
    4a6e:	10 93 62 0d 	sts	0x0D62, r17
    4a72:	00 93 61 0d 	sts	0x0D61, r16
    delay_lsw = (ticks >> 16 * 0) & 0xFFFF;
    4a76:	70 93 60 0d 	sts	0x0D60, r23
    4a7a:	60 93 5f 0d 	sts	0x0D5F, r22
    
    if (0 == delay_msw) {
    4a7e:	01 15       	cp	r16, r1
    4a80:	11 05       	cpc	r17, r1
    4a82:	79 f4       	brne	.+30     	; 0x4aa2 <vrt_timer_start_high_pri_delay+0x78>
        /* Program compare match register, clear pending compare matches and finally
         * enable the compare match interrupt.
         */
        VRT_TIME_OUT_COMP_A =  VRT_TIME_TC_VALUE + delay_lsw;
    4a84:	20 91 84 00 	lds	r18, 0x0084
    4a88:	30 91 85 00 	lds	r19, 0x0085
    4a8c:	26 0f       	add	r18, r22
    4a8e:	37 1f       	adc	r19, r23
    4a90:	30 93 89 00 	sts	0x0089, r19
    4a94:	20 93 88 00 	sts	0x0088, r18
        delay_lsw = 0;
    4a98:	10 92 60 0d 	sts	0x0D60, r1
    4a9c:	10 92 5f 0d 	sts	0x0D5F, r1
    4aa0:	09 c0       	rjmp	.+18     	; 0x4ab4 <vrt_timer_start_high_pri_delay+0x8a>
    } else {
        VRT_TIME_OUT_COMP_A = VRT_TIME_TC_VALUE + 0xFFFF;
    4aa2:	80 91 84 00 	lds	r24, 0x0084
    4aa6:	90 91 85 00 	lds	r25, 0x0085
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	90 93 89 00 	sts	0x0089, r25
    4ab0:	80 93 88 00 	sts	0x0088, r24
    }
    
    VRT_TIME_FLAG_REG |= (1 << VT_OCF_A);
    4ab4:	b1 9a       	sbi	0x16, 1	; 22
    VRT_TIME_ISR_MASK_REG |= (1 << VT_OCIE_A);
    4ab6:	80 91 6f 00 	lds	r24, 0x006F
    4aba:	82 60       	ori	r24, 0x02	; 2
    4abc:	80 93 6f 00 	sts	0x006F, r24
    
    LEAVE_CRITICAL_REGION();
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	8f bf       	out	0x3f, r24	; 63
    
    return true;
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	01 c0       	rjmp	.+2      	; 0x4aca <vrt_timer_start_high_pri_delay+0xa0>


bool vrt_timer_start_high_pri_delay(uint32_t ticks, vrt_timer_cb_t cb, void *cb_param) {
    /* Verify that the function parameters are valid. */
    if (NULL == cb) { 
        return false;
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    VRT_TIME_ISR_MASK_REG |= (1 << VT_OCIE_A);
    
    LEAVE_CRITICAL_REGION();
    
    return true;
}
    4aca:	0f 90       	pop	r0
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	1f 91       	pop	r17
    4ad2:	0f 91       	pop	r16
    4ad4:	08 95       	ret

00004ad6 <vrt_timer_stop_high_pri_delay>:


void vrt_timer_stop_high_pri_delay(void) {
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	1f 92       	push	r1
    4adc:	cd b7       	in	r28, 0x3d	; 61
    4ade:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4ae0:	8f b7       	in	r24, 0x3f	; 63
    4ae2:	89 83       	std	Y+1, r24	; 0x01
    4ae4:	f8 94       	cli
    
    /* Turn off timer1 OCR1C interrupt */
    VRT_TIME_ISR_MASK_REG &= ~(1 << VT_OCIE_A);
    4ae6:	ef e6       	ldi	r30, 0x6F	; 111
    4ae8:	f0 e0       	ldi	r31, 0x00	; 0
    4aea:	80 81       	ld	r24, Z
    4aec:	8d 7f       	andi	r24, 0xFD	; 253
    4aee:	80 83       	st	Z, r24
    high_pri_delay_cb = NULL;
    4af0:	10 92 66 0d 	sts	0x0D66, r1
    4af4:	10 92 65 0d 	sts	0x0D65, r1
    
    LEAVE_CRITICAL_REGION();
    4af8:	89 81       	ldd	r24, Y+1	; 0x01
    4afa:	8f bf       	out	0x3f, r24	; 63
}
    4afc:	0f 90       	pop	r0
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	08 95       	ret

00004b04 <vrt_timer_task>:
    tick_handler = (vrt_timer_tick_handler_t)NULL;
    LEAVE_CRITICAL_REGION();
}


void vrt_timer_task(void) {
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <vrt_timer_task+0x6>
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    /* Check first if any tick handler is installed. */
    if (NULL == tick_handler) {
    4b0e:	80 91 5b 0d 	lds	r24, 0x0D5B
    4b12:	90 91 5c 0d 	lds	r25, 0x0D5C
    4b16:	89 2b       	or	r24, r25
    4b18:	51 f4       	brne	.+20     	; 0x4b2e <vrt_timer_task+0x2a>
        
        ENTER_CRITICAL_REGION();
    4b1a:	8f b7       	in	r24, 0x3f	; 63
    4b1c:	8a 83       	std	Y+2, r24	; 0x02
    4b1e:	f8 94       	cli
        ticks_waiting = 0;
    4b20:	10 92 5e 0d 	sts	0x0D5E, r1
    4b24:	10 92 5d 0d 	sts	0x0D5D, r1
        LEAVE_CRITICAL_REGION();
    4b28:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2a:	8f bf       	out	0x3f, r24	; 63
        
        return;
    4b2c:	1a c0       	rjmp	.+52     	; 0x4b62 <vrt_timer_task+0x5e>
    }
    
    /* Run the installed*/
    while (0 != ticks_waiting) {
    4b2e:	80 91 5d 0d 	lds	r24, 0x0D5D
    4b32:	90 91 5e 0d 	lds	r25, 0x0D5E
    4b36:	89 2b       	or	r24, r25
    4b38:	a1 f0       	breq	.+40     	; 0x4b62 <vrt_timer_task+0x5e>
        tick_handler();
    4b3a:	e0 91 5b 0d 	lds	r30, 0x0D5B
    4b3e:	f0 91 5c 0d 	lds	r31, 0x0D5C
    4b42:	09 95       	icall
        
        ENTER_CRITICAL_REGION();
    4b44:	8f b7       	in	r24, 0x3f	; 63
    4b46:	89 83       	std	Y+1, r24	; 0x01
    4b48:	f8 94       	cli
        ticks_waiting--;
    4b4a:	80 91 5d 0d 	lds	r24, 0x0D5D
    4b4e:	90 91 5e 0d 	lds	r25, 0x0D5E
    4b52:	01 97       	sbiw	r24, 0x01	; 1
    4b54:	90 93 5e 0d 	sts	0x0D5E, r25
    4b58:	80 93 5d 0d 	sts	0x0D5D, r24
        LEAVE_CRITICAL_REGION();
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	8f bf       	out	0x3f, r24	; 63
    4b60:	e6 cf       	rjmp	.-52     	; 0x4b2e <vrt_timer_task+0x2a>
    }
}
    4b62:	0f 90       	pop	r0
    4b64:	0f 90       	pop	r0
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	08 95       	ret

00004b6c <mac_orphan_indication_callback>:


/*                       IEEE 802.15.4 MAC Callbacks.                         */


void mac_orphan_indication_callback(mlme_orphan_ind_t *moi) {
    4b6c:	08 95       	ret

00004b6e <zigbee_init>:
static zigbee_data_indication_t ndi; //!< Pointer function that will be executed upon a NLDE_DATA.indication.
static zigbee_join_indication_t nji; //!< Pointer function that will be executed upon a NLME_JOIN.indication.
static zigbee_leave_indication_t nli; //!< Pointer function that will be executed upon a NLME_LEAVE.indication.
/*================================= PROTOTYPES       =========================*/

bool zigbee_init(uint64_t ieee_address) {
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	cd b7       	in	r28, 0x3d	; 61
    4b74:	de b7       	in	r29, 0x3e	; 62
    4b76:	29 97       	sbiw	r28, 0x09	; 9
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	f8 94       	cli
    4b7c:	de bf       	out	0x3e, r29	; 62
    4b7e:	0f be       	out	0x3f, r0	; 63
    4b80:	cd bf       	out	0x3d, r28	; 61
    /* Set local variables to initial value. */
    ENTER_CRITICAL_REGION();
    4b82:	ef b7       	in	r30, 0x3f	; 63
    4b84:	e9 83       	std	Y+1, r30	; 0x01
    4b86:	f8 94       	cli
    bool init_status = false;
    
    ndi = NULL;
    4b88:	10 92 6c 0d 	sts	0x0D6C, r1
    4b8c:	10 92 6b 0d 	sts	0x0D6B, r1
    nji = NULL;
    4b90:	10 92 6a 0d 	sts	0x0D6A, r1
    4b94:	10 92 69 0d 	sts	0x0D69, r1
    nli = NULL;
    4b98:	10 92 68 0d 	sts	0x0D68, r1
    4b9c:	10 92 67 0d 	sts	0x0D67, r1
    LEAVE_CRITICAL_REGION();
    4ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba2:	ef bf       	out	0x3f, r30	; 63
    
    /* Reset internal variables. */
    zigbee_nib_init();
    4ba4:	2a 83       	std	Y+2, r18	; 0x02
    4ba6:	3b 83       	std	Y+3, r19	; 0x03
    4ba8:	4c 83       	std	Y+4, r20	; 0x04
    4baa:	5d 83       	std	Y+5, r21	; 0x05
    4bac:	6e 83       	std	Y+6, r22	; 0x06
    4bae:	7f 83       	std	Y+7, r23	; 0x07
    4bb0:	88 87       	std	Y+8, r24	; 0x08
    4bb2:	99 87       	std	Y+9, r25	; 0x09
    4bb4:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <zigbee_nib_init>
    zigbee_neighbor_table_init();
    4bb8:	0e 94 c6 2b 	call	0x578c	; 0x578c <zigbee_neighbor_table_init>
    
    if(true != ieee802_15_4_init(ieee_address)) {
    4bbc:	2a 81       	ldd	r18, Y+2	; 0x02
    4bbe:	3b 81       	ldd	r19, Y+3	; 0x03
    4bc0:	4c 81       	ldd	r20, Y+4	; 0x04
    4bc2:	5d 81       	ldd	r21, Y+5	; 0x05
    4bc4:	6e 81       	ldd	r22, Y+6	; 0x06
    4bc6:	7f 81       	ldd	r23, Y+7	; 0x07
    4bc8:	88 85       	ldd	r24, Y+8	; 0x08
    4bca:	99 85       	ldd	r25, Y+9	; 0x09
    4bcc:	0e 94 84 0b 	call	0x1708	; 0x1708 <ieee802_15_4_init>
    4bd0:	88 23       	and	r24, r24
    4bd2:	c1 f0       	breq	.+48     	; 0x4c04 <zigbee_init+0x96>
    } else {
        /* Initialize all necessary callbacks from the IEEE 802.15.4 MAC. */
        ieee802_15_4_set_mcps_data_indication(mac_data_indication_callback);
    4bd4:	8a ea       	ldi	r24, 0xAA	; 170
    4bd6:	97 e2       	ldi	r25, 0x27	; 39
    4bd8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <ieee802_15_4_set_mcps_data_indication>
        ieee802_15_4_set_mlme_associate_indication(mac_associate_indication_callback);
    4bdc:	8e ef       	ldi	r24, 0xFE	; 254
    4bde:	99 e2       	ldi	r25, 0x29	; 41
    4be0:	0e 94 03 0c 	call	0x1806	; 0x1806 <ieee802_15_4_set_mlme_associate_indication>
        ieee802_15_4_set_mlme_disassociate_indication(mac_disassociate_indication_callback);
    4be4:	81 e8       	ldi	r24, 0x81	; 129
    4be6:	9b e2       	ldi	r25, 0x2B	; 43
    4be8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <ieee802_15_4_set_mlme_disassociate_indication>
        ieee802_15_4_set_mlme_orphan_indication(mac_orphan_indication_callback);
    4bec:	86 eb       	ldi	r24, 0xB6	; 182
    4bee:	95 e2       	ldi	r25, 0x25	; 37
    4bf0:	0e 94 31 0c 	call	0x1862	; 0x1862 <ieee802_15_4_set_mlme_orphan_indication>
        ieee802_15_4_set_mlme_comm_status_indication(mac_comm_status_indication_callback);
    4bf4:	82 e5       	ldi	r24, 0x52	; 82
    4bf6:	9a e2       	ldi	r25, 0x2A	; 42
    4bf8:	0e 94 48 0c 	call	0x1890	; 0x1890 <ieee802_15_4_set_mlme_comm_status_indication>

        ZIGBEE_NWK_SET_STATE(NWK_IDLE);
    4bfc:	10 92 86 01 	sts	0x0186, r1
        init_status = true;
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	01 c0       	rjmp	.+2      	; 0x4c06 <zigbee_init+0x98>
/*================================= PROTOTYPES       =========================*/

bool zigbee_init(uint64_t ieee_address) {
    /* Set local variables to initial value. */
    ENTER_CRITICAL_REGION();
    bool init_status = false;
    4c04:	80 e0       	ldi	r24, 0x00	; 0
        ZIGBEE_NWK_SET_STATE(NWK_IDLE);
        init_status = true;
    } // END: if(ieee802_15_4_init(ieee_address)) ...
    
    return init_status;
}
    4c06:	29 96       	adiw	r28, 0x09	; 9
    4c08:	0f b6       	in	r0, 0x3f	; 63
    4c0a:	f8 94       	cli
    4c0c:	de bf       	out	0x3e, r29	; 62
    4c0e:	0f be       	out	0x3f, r0	; 63
    4c10:	cd bf       	out	0x3d, r28	; 61
    4c12:	df 91       	pop	r29
    4c14:	cf 91       	pop	r28
    4c16:	08 95       	ret

00004c18 <zigbee_deinit>:

void zigbee_deinit(void) {
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	1f 92       	push	r1
    4c1e:	cd b7       	in	r28, 0x3d	; 61
    4c20:	de b7       	in	r29, 0x3e	; 62
    if (NWK_UNINITIALIZED == nwk_state) { return; }
    4c22:	80 91 86 01 	lds	r24, 0x0186
    4c26:	81 30       	cpi	r24, 0x01	; 1
    4c28:	b1 f0       	breq	.+44     	; 0x4c56 <zigbee_deinit+0x3e>
    
    ieee802_15_4_deinit();
    4c2a:	0e 94 cd 0b 	call	0x179a	; 0x179a <ieee802_15_4_deinit>
    
    ENTER_CRITICAL_REGION();
    4c2e:	8f b7       	in	r24, 0x3f	; 63
    4c30:	89 83       	std	Y+1, r24	; 0x01
    4c32:	f8 94       	cli
    
    ndi = NULL;
    4c34:	10 92 6c 0d 	sts	0x0D6C, r1
    4c38:	10 92 6b 0d 	sts	0x0D6B, r1
    nji = NULL;
    4c3c:	10 92 6a 0d 	sts	0x0D6A, r1
    4c40:	10 92 69 0d 	sts	0x0D69, r1
    nli = NULL;
    4c44:	10 92 68 0d 	sts	0x0D68, r1
    4c48:	10 92 67 0d 	sts	0x0D67, r1
    
    LEAVE_CRITICAL_REGION();
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	8f bf       	out	0x3f, r24	; 63
    
    nwk_state = NWK_UNINITIALIZED;
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	80 93 86 01 	sts	0x0186, r24
}
    4c56:	0f 90       	pop	r0
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	08 95       	ret

00004c5e <zigbee_get_nlde_data_indication>:


zigbee_data_indication_t zigbee_get_nlde_data_indication(void) {    
    return ndi;
}
    4c5e:	80 91 6b 0d 	lds	r24, 0x0D6B
    4c62:	90 91 6c 0d 	lds	r25, 0x0D6C
    4c66:	08 95       	ret

00004c68 <zigbee_set_nlde_data_indication>:
    ndi = NULL;
    LEAVE_CRITICAL_REGION();
}


void zigbee_set_nlde_data_indication(zigbee_data_indication_t indication) {
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	1f 92       	push	r1
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4c72:	2f b7       	in	r18, 0x3f	; 63
    4c74:	29 83       	std	Y+1, r18	; 0x01
    4c76:	f8 94       	cli
    ndi = indication;
    4c78:	90 93 6c 0d 	sts	0x0D6C, r25
    4c7c:	80 93 6b 0d 	sts	0x0D6B, r24
    LEAVE_CRITICAL_REGION();
    4c80:	89 81       	ldd	r24, Y+1	; 0x01
    4c82:	8f bf       	out	0x3f, r24	; 63
}
    4c84:	0f 90       	pop	r0
    4c86:	df 91       	pop	r29
    4c88:	cf 91       	pop	r28
    4c8a:	08 95       	ret

00004c8c <zigbee_get_nlme_join_indication>:


zigbee_join_indication_t zigbee_get_nlme_join_indication(void) {    
    return nji;
}
    4c8c:	80 91 69 0d 	lds	r24, 0x0D69
    4c90:	90 91 6a 0d 	lds	r25, 0x0D6A
    4c94:	08 95       	ret

00004c96 <zigbee_set_nlme_join_indication>:
    nji = NULL;
    LEAVE_CRITICAL_REGION();
}


void zigbee_set_nlme_join_indication(zigbee_join_indication_t indication) {
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	1f 92       	push	r1
    4c9c:	cd b7       	in	r28, 0x3d	; 61
    4c9e:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4ca0:	2f b7       	in	r18, 0x3f	; 63
    4ca2:	29 83       	std	Y+1, r18	; 0x01
    4ca4:	f8 94       	cli
    nji = indication;
    4ca6:	90 93 6a 0d 	sts	0x0D6A, r25
    4caa:	80 93 69 0d 	sts	0x0D69, r24
    LEAVE_CRITICAL_REGION();
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	8f bf       	out	0x3f, r24	; 63
}
    4cb2:	0f 90       	pop	r0
    4cb4:	df 91       	pop	r29
    4cb6:	cf 91       	pop	r28
    4cb8:	08 95       	ret

00004cba <zigbee_get_nlme_leave_indication>:


zigbee_leave_indication_t zigbee_get_nlme_leave_indication(void) {    
    return nli;
}
    4cba:	80 91 67 0d 	lds	r24, 0x0D67
    4cbe:	90 91 68 0d 	lds	r25, 0x0D68
    4cc2:	08 95       	ret

00004cc4 <zigbee_set_nlme_leave_indication>:
    nli = NULL;
    LEAVE_CRITICAL_REGION();
}


void zigbee_set_nlme_leave_indication(zigbee_leave_indication_t indication) {
    4cc4:	cf 93       	push	r28
    4cc6:	df 93       	push	r29
    4cc8:	1f 92       	push	r1
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4cce:	2f b7       	in	r18, 0x3f	; 63
    4cd0:	29 83       	std	Y+1, r18	; 0x01
    4cd2:	f8 94       	cli
    nli = indication;
    4cd4:	90 93 68 0d 	sts	0x0D68, r25
    4cd8:	80 93 67 0d 	sts	0x0D67, r24
    LEAVE_CRITICAL_REGION();
    4cdc:	89 81       	ldd	r24, Y+1	; 0x01
    4cde:	8f bf       	out	0x3f, r24	; 63
}
    4ce0:	0f 90       	pop	r0
    4ce2:	df 91       	pop	r29
    4ce4:	cf 91       	pop	r28
    4ce6:	08 95       	ret

00004ce8 <mac_data_confirm_callback>:
    ndi_callback((nlde_data_ind_t *)ndi);
    MEM_FREE(ndi);
}


static void mac_data_confirm_callback(mcps_data_conf_t *mdc) {
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    /* Post NLDE_DATA.confirm event. */
    if (NULL == mdc) {
    4cec:	00 97       	sbiw	r24, 0x00	; 0
    4cee:	99 f0       	breq	.+38     	; 0x4d16 <mac_data_confirm_callback+0x2e>
        return;
    }
    
    if (NULL == nlde_callback_data_confirm) {
    4cf0:	e0 91 71 0d 	lds	r30, 0x0D71
    4cf4:	f0 91 72 0d 	lds	r31, 0x0D72
    4cf8:	30 97       	sbiw	r30, 0x00	; 0
    4cfa:	69 f0       	breq	.+26     	; 0x4d16 <mac_data_confirm_callback+0x2e>
        return;
    }
    
    if (NULL == confirm) {
    4cfc:	a0 91 6f 0d 	lds	r26, 0x0D6F
    4d00:	b0 91 70 0d 	lds	r27, 0x0D70
    4d04:	10 97       	sbiw	r26, 0x00	; 0
    4d06:	39 f0       	breq	.+14     	; 0x4d16 <mac_data_confirm_callback+0x2e>
        return;
    }
    
    confirm->Status = mdc->status;
    4d08:	ec 01       	movw	r28, r24
    4d0a:	88 81       	ld	r24, Y
    4d0c:	8c 93       	st	X, r24
    nlde_callback_data_confirm(confirm);
    4d0e:	cd 01       	movw	r24, r26
}
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    if (NULL == confirm) {
        return;
    }
    
    confirm->Status = mdc->status;
    nlde_callback_data_confirm(confirm);
    4d14:	09 94       	ijmp
}
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	08 95       	ret

00004d1c <zigbee_data_indication_do_callback>:
    
    return data_request_status;
}


void zigbee_data_indication_do_callback(void *ndi) {
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	ec 01       	movw	r28, r24
    /* Verify that the */
    if (NULL == ndi) {
    4d22:	00 97       	sbiw	r24, 0x00	; 0
    4d24:	61 f0       	breq	.+24     	; 0x4d3e <zigbee_data_indication_do_callback+0x22>
        return;
    }
    
    /* Check if a callback is registered. */
    zigbee_data_indication_t ndi_callback = zigbee_get_nlde_data_indication();
    4d26:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <zigbee_get_nlde_data_indication>
    4d2a:	fc 01       	movw	r30, r24
    if (NULL == ndi_callback) {
        MEM_FREE(ndi);
    4d2c:	ce 01       	movw	r24, r28
        return;
    }
    
    /* Check if a callback is registered. */
    zigbee_data_indication_t ndi_callback = zigbee_get_nlde_data_indication();
    if (NULL == ndi_callback) {
    4d2e:	30 97       	sbiw	r30, 0x00	; 0
    4d30:	11 f0       	breq	.+4      	; 0x4d36 <zigbee_data_indication_do_callback+0x1a>
        MEM_FREE(ndi);
        return;
    }
    
    /* Execute the callback. */
    ndi_callback((nlde_data_ind_t *)ndi);
    4d32:	09 95       	icall
    MEM_FREE(ndi);
    4d34:	ce 01       	movw	r24, r28
}
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
        return;
    }
    
    /* Execute the callback. */
    ndi_callback((nlde_data_ind_t *)ndi);
    MEM_FREE(ndi);
    4d3a:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>
}
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	08 95       	ret

00004d44 <relay_confirm>:
}


static void relay_confirm(mcps_data_conf_t *mdc) {
    /* Free previously allocated memory. */
    MEM_FREE(relay);
    4d44:	80 91 6d 0d 	lds	r24, 0x0D6D
    4d48:	90 91 6e 0d 	lds	r25, 0x0D6E
    4d4c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
    
    /* Go back to RX_AACK_ON. */
    ieee802_15_4_rx_enable();
    4d50:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <ieee802_15_4_rx_enable>

00004d54 <find_next_address>:

static uint16_t find_next_address(uint16_t destination) {
    uint16_t next_hop_address = 0xFFFF;
    
    /* Check if the destination is a descendant of this node. */
    if (0x0000 == IEEE802_15_4_GET_SHORT_ADDRESS()) {
    4d54:	20 91 d7 11 	lds	r18, 0x11D7
    4d58:	30 91 d8 11 	lds	r19, 0x11D8
    4d5c:	21 15       	cp	r18, r1
    4d5e:	31 05       	cpc	r19, r1
    4d60:	a1 f4       	brne	.+40     	; 0x4d8a <find_next_address+0x36>
        /* Coordinator: All devices are descendants. */
        /* Destination address is a descendant. */
        if (destination <= ((ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
    4d62:	20 91 4e 12 	lds	r18, 0x124E
    4d66:	30 91 4f 12 	lds	r19, 0x124F
    4d6a:	28 17       	cp	r18, r24
    4d6c:	39 07       	cpc	r19, r25
    4d6e:	e0 f1       	brcs	.+120    	; 0x4de8 <find_next_address+0x94>
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = 1 + (((destination - 1) / NWK_NIB_GET_ADDRESS_INCREMENT()) * NWK_NIB_GET_ADDRESS_INCREMENT());
    4d70:	01 97       	sbiw	r24, 0x01	; 1
    4d72:	b9 01       	movw	r22, r18
    4d74:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <__udivmodhi4>
    4d78:	62 9f       	mul	r22, r18
    4d7a:	c0 01       	movw	r24, r0
    4d7c:	63 9f       	mul	r22, r19
    4d7e:	90 0d       	add	r25, r0
    4d80:	72 9f       	mul	r23, r18
    4d82:	90 0d       	add	r25, r0
    4d84:	11 24       	eor	r1, r1
    4d86:	01 96       	adiw	r24, 0x01	; 1
    4d88:	08 95       	ret
        } else {
            next_hop_address = destination;
        }
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
    4d8a:	28 17       	cp	r18, r24
    4d8c:	39 07       	cpc	r19, r25
    4d8e:	40 f5       	brcc	.+80     	; 0x4de0 <find_next_address+0x8c>
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
    4d90:	40 91 4c 12 	lds	r20, 0x124C
    4d94:	50 91 4d 12 	lds	r21, 0x124D
    4d98:	42 0f       	add	r20, r18
    4d9a:	53 1f       	adc	r21, r19
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = 1 + (((destination - 1) / NWK_NIB_GET_ADDRESS_INCREMENT()) * NWK_NIB_GET_ADDRESS_INCREMENT());
        } else {
            next_hop_address = destination;
        }
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
    4d9c:	84 17       	cp	r24, r20
    4d9e:	95 07       	cpc	r25, r21
    4da0:	f8 f4       	brcc	.+62     	; 0x4de0 <find_next_address+0x8c>
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
        /* Destination address is a descendant. */
        if (destination <= (IEEE802_15_4_GET_SHORT_ADDRESS() + (ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
    4da2:	e0 91 4e 12 	lds	r30, 0x124E
    4da6:	f0 91 4f 12 	lds	r31, 0x124F
    4daa:	af 01       	movw	r20, r30
    4dac:	42 0f       	add	r20, r18
    4dae:	53 1f       	adc	r21, r19
    4db0:	48 17       	cp	r20, r24
    4db2:	59 07       	cpc	r21, r25
    4db4:	c8 f0       	brcs	.+50     	; 0x4de8 <find_next_address+0x94>
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = (IEEE802_15_4_GET_SHORT_ADDRESS() + 1 + 
            ((uint16_t)(destination - (IEEE802_15_4_GET_SHORT_ADDRESS() + 1)) / NWK_NIB_GET_ADDRESS_INCREMENT()) * NWK_NIB_GET_ADDRESS_INCREMENT());
    4db6:	a9 01       	movw	r20, r18
    4db8:	40 95       	com	r20
    4dba:	50 95       	com	r21
    4dbc:	48 0f       	add	r20, r24
    4dbe:	59 1f       	adc	r21, r25
    4dc0:	ca 01       	movw	r24, r20
    4dc2:	bf 01       	movw	r22, r30
    4dc4:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <__udivmodhi4>
    4dc8:	6e 9f       	mul	r22, r30
    4dca:	a0 01       	movw	r20, r0
    4dcc:	6f 9f       	mul	r22, r31
    4dce:	50 0d       	add	r21, r0
    4dd0:	7e 9f       	mul	r23, r30
    4dd2:	50 0d       	add	r21, r0
    4dd4:	11 24       	eor	r1, r1
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
        /* Destination address is a descendant. */
        if (destination <= (IEEE802_15_4_GET_SHORT_ADDRESS() + (ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = (IEEE802_15_4_GET_SHORT_ADDRESS() + 1 + 
    4dd6:	c9 01       	movw	r24, r18
    4dd8:	01 96       	adiw	r24, 0x01	; 1
    4dda:	84 0f       	add	r24, r20
    4ddc:	95 1f       	adc	r25, r21
    4dde:	08 95       	ret
        } else {
            next_hop_address = destination;
        }
    } else {
        /* Send frame to parent node. */
        next_hop_address = IEEE802_15_4_GET_COORD_SHORT_ADDRESS();
    4de0:	80 91 c3 11 	lds	r24, 0x11C3
    4de4:	90 91 c4 11 	lds	r25, 0x11C4
    }
        
    return next_hop_address;
}
    4de8:	08 95       	ret

00004dea <zigbee_data_request>:
 *  \returns A number between 0 and 0xFFFF, where 0xFFFF indicates an error.
 */
static uint16_t find_next_address(uint16_t destination);


bool zigbee_data_request(nlde_data_req_t *ndr) {
    4dea:	7f 92       	push	r7
    4dec:	8f 92       	push	r8
    4dee:	9f 92       	push	r9
    4df0:	af 92       	push	r10
    4df2:	bf 92       	push	r11
    4df4:	cf 92       	push	r12
    4df6:	df 92       	push	r13
    4df8:	ef 92       	push	r14
    4dfa:	ff 92       	push	r15
    4dfc:	0f 93       	push	r16
    4dfe:	1f 93       	push	r17
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	ec 01       	movw	r28, r24
    /* Check that the NWK status is either: Formed, started or joined. */
    if ((NWK_FORMED  != ZIGBEE_NWK_GET_STATE()) &&
        (NWK_STARTED != ZIGBEE_NWK_GET_STATE()) && 
    4e06:	80 91 86 01 	lds	r24, 0x0186
    4e0a:	83 50       	subi	r24, 0x03	; 3
static uint16_t find_next_address(uint16_t destination);


bool zigbee_data_request(nlde_data_req_t *ndr) {
    /* Check that the NWK status is either: Formed, started or joined. */
    if ((NWK_FORMED  != ZIGBEE_NWK_GET_STATE()) &&
    4e0c:	83 30       	cpi	r24, 0x03	; 3
    4e0e:	08 f0       	brcs	.+2      	; 0x4e12 <zigbee_data_request+0x28>
    4e10:	57 c0       	rjmp	.+174    	; 0x4ec0 <zigbee_data_request+0xd6>
        (NWK_JOINED  != ZIGBEE_NWK_GET_STATE())) {
        return false;
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == ndr) {
    4e12:	20 97       	sbiw	r28, 0x00	; 0
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <zigbee_data_request+0x2e>
    4e16:	54 c0       	rjmp	.+168    	; 0x4ec0 <zigbee_data_request+0xd6>
        return false;
    }
    
    if (NULL == (ndr->nsdu)) {
    4e18:	8f 81       	ldd	r24, Y+7	; 0x07
    4e1a:	98 85       	ldd	r25, Y+8	; 0x08
    4e1c:	89 2b       	or	r24, r25
    4e1e:	09 f4       	brne	.+2      	; 0x4e22 <zigbee_data_request+0x38>
    4e20:	4f c0       	rjmp	.+158    	; 0x4ec0 <zigbee_data_request+0xd6>
        return false;
    }
    
    if (NULL == (ndr->nlde_callback_data_confirm)) {
    4e22:	89 85       	ldd	r24, Y+9	; 0x09
    4e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e26:	89 2b       	or	r24, r25
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <zigbee_data_request+0x42>
    4e2a:	4a c0       	rjmp	.+148    	; 0x4ec0 <zigbee_data_request+0xd6>
        return false;
    }
    
    if (IEEE802_15_4_GET_SHORT_ADDRESS() == (ndr->dst_addr)) {
    4e2c:	20 91 d7 11 	lds	r18, 0x11D7
    4e30:	30 91 d8 11 	lds	r19, 0x11D8
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	9a 81       	ldd	r25, Y+2	; 0x02
    4e38:	28 17       	cp	r18, r24
    4e3a:	39 07       	cpc	r19, r25
    4e3c:	09 f4       	brne	.+2      	; 0x4e40 <zigbee_data_request+0x56>
    4e3e:	40 c0       	rjmp	.+128    	; 0x4ec0 <zigbee_data_request+0xd6>
    }
    
    /* Verify that the payload to be transmitted is within the defined bounds and 
     * not zero.
     */
    if (0 == (ndr->nsdu_length)) {
    4e40:	8e 81       	ldd	r24, Y+6	; 0x06
    4e42:	9f ef       	ldi	r25, 0xFF	; 255
    4e44:	98 0f       	add	r25, r24
    4e46:	9e 35       	cpi	r25, 0x5E	; 94
    4e48:	d8 f5       	brcc	.+118    	; 0x4ec0 <zigbee_data_request+0xd6>
    if ((aMaxMACFrameSize - NWK_MIN_HEADER_OVERHEAD) < (ndr->nsdu_length)) {
        return false;
    }
    
    /* Try to allocate some memory to build the frame on. */
    uint8_t *nwk_frame = (uint8_t *)MEM_ALLOC_ARRAY(uint8_t, ((ndr->nsdu_length) + NWK_MIN_HEADER_OVERHEAD));
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	08 96       	adiw	r24, 0x08	; 8
    4e4e:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    4e52:	8c 01       	movw	r16, r24
    
    if (NULL == nwk_frame) {
    4e54:	00 97       	sbiw	r24, 0x00	; 0
    4e56:	a1 f1       	breq	.+104    	; 0x4ec0 <zigbee_data_request+0xd6>
    /* 1. Build the NWK layer FCF and add to the frame. */
    uint16_t fcf = NWK_FCF_SET_FRAME_TYPE(NWK_FCF_FRAMETYPE_DATA) | NWK_FCF_SET_PROTOCOL_VERSION(1);
    
    uint8_t index = 0;
    
    nwk_frame[index++] = ((fcf >> 8*0) & 0xFF);
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	f8 01       	movw	r30, r16
    4e5c:	80 83       	st	Z, r24
    nwk_frame[index++] = ((fcf >> 8*1) & 0xFF);
    4e5e:	11 82       	std	Z+1, r1	; 0x01
    
    /* 2. Add destination address. */
    memcpy((void *)(&nwk_frame[index]), (void *)(&(ndr->dst_addr)), sizeof(uint16_t));
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	9a 81       	ldd	r25, Y+2	; 0x02
    4e64:	93 83       	std	Z+3, r25	; 0x03
    4e66:	82 83       	std	Z+2, r24	; 0x02
    index += sizeof(uint16_t);
    
    /* 3. Add source address. */
    memcpy((void *)(&nwk_frame[index]), (void *)(&IEEE802_15_4_GET_SHORT_ADDRESS()), sizeof(uint16_t));
    4e68:	80 91 d7 11 	lds	r24, 0x11D7
    4e6c:	90 91 d8 11 	lds	r25, 0x11D8
    4e70:	95 83       	std	Z+5, r25	; 0x05
    4e72:	84 83       	std	Z+4, r24	; 0x04
    
    /* 4. Next is the radius field. If the radius fiels of the request message
     *    unequal from zero it will be used. Otherwise, the specification says that
     *    it should be set to twice the value of the nwkMaxDepth attribute.
     */
    if (0 == (ndr->radius)) {
    4e74:	8b 81       	ldd	r24, Y+3	; 0x03
    4e76:	81 11       	cpse	r24, r1
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <zigbee_data_request+0x94>
        nwk_frame[index++] = (2 * ZIGBEE_MAX_NWK_DEPTH);
    4e7a:	82 e0       	ldi	r24, 0x02	; 2
    4e7c:	01 c0       	rjmp	.+2      	; 0x4e80 <zigbee_data_request+0x96>
    } else {
        nwk_frame[index++] = ndr->radius;
    4e7e:	f8 01       	movw	r30, r16
    4e80:	86 83       	std	Z+6, r24	; 0x06
    }
    
    /* 5. Add NWK layer sequence number. */
    nwk_frame[index++] = NWK_NIB_GET_SEQUENCE_NMBR();
    4e82:	80 91 67 12 	lds	r24, 0x1267
    4e86:	91 e0       	ldi	r25, 0x01	; 1
    4e88:	98 0f       	add	r25, r24
    4e8a:	90 93 67 12 	sts	0x1267, r25
    4e8e:	f8 01       	movw	r30, r16
    4e90:	87 83       	std	Z+7, r24	; 0x07
    
    /* 6. Copy the user defined data. */
    memcpy((void *)(&nwk_frame[index]), (void *)(ndr->nsdu), ndr->nsdu_length);
    4e92:	4e 81       	ldd	r20, Y+6	; 0x06
    4e94:	50 e0       	ldi	r21, 0x00	; 0
    4e96:	6f 81       	ldd	r22, Y+7	; 0x07
    4e98:	78 85       	ldd	r23, Y+8	; 0x08
    4e9a:	c8 01       	movw	r24, r16
    4e9c:	08 96       	adiw	r24, 0x08	; 8
    4e9e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    index += (ndr->nsdu_length);
    4ea2:	7e 80       	ldd	r7, Y+6	; 0x06
    4ea4:	f8 e0       	ldi	r31, 0x08	; 8
    4ea6:	7f 0e       	add	r7, r31
    
    /* TODO: Use tree routing algorithm to find the first hop destination address. */
    uint16_t next_hop_address = find_next_address(ndr->dst_addr);
    4ea8:	89 81       	ldd	r24, Y+1	; 0x01
    4eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4eac:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <find_next_address>
    4eb0:	4c 01       	movw	r8, r24

    /* Could not find a valid address for the next hop. */
    if (0xFFFF == next_hop_address) {
    4eb2:	8f ef       	ldi	r24, 0xFF	; 255
    4eb4:	88 16       	cp	r8, r24
    4eb6:	98 06       	cpc	r9, r24
    4eb8:	29 f4       	brne	.+10     	; 0x4ec4 <zigbee_data_request+0xda>
        /* Free allocated memory. */
        MEM_FREE(nwk_frame);
    4eba:	c8 01       	movw	r24, r16
    4ebc:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
        return false;
    4ec0:	c0 e0       	ldi	r28, 0x00	; 0
    4ec2:	39 c0       	rjmp	.+114    	; 0x4f36 <zigbee_data_request+0x14c>
    }
    
    /* 7. Build MCPS_DATA.request. */
    ndr->mcps.SrcAddrMode       = WPAN_ADDRMODE_SHORT;
    4ec4:	e2 e0       	ldi	r30, 0x02	; 2
    4ec6:	ec 87       	std	Y+12, r30	; 0x0c
    ndr->mcps.SrcAddr           = IEEE802_15_4_GET_SHORT_ADDRESS();
    4ec8:	20 91 d7 11 	lds	r18, 0x11D7
    4ecc:	30 91 d8 11 	lds	r19, 0x11D8
    4ed0:	2d 87       	std	Y+13, r18	; 0x0d
    4ed2:	3e 87       	std	Y+14, r19	; 0x0e
    4ed4:	1f 86       	std	Y+15, r1	; 0x0f
    4ed6:	18 8a       	std	Y+16, r1	; 0x10
    4ed8:	19 8a       	std	Y+17, r1	; 0x11
    4eda:	1a 8a       	std	Y+18, r1	; 0x12
    4edc:	1b 8a       	std	Y+19, r1	; 0x13
    4ede:	1c 8a       	std	Y+20, r1	; 0x14
    ndr->mcps.DstAddrMode       = WPAN_ADDRMODE_SHORT;
    4ee0:	ed 8b       	std	Y+21, r30	; 0x15
    ndr->mcps.DstPANId          = IEEE802_15_4_GET_PAN_ID();
    4ee2:	80 91 c5 11 	lds	r24, 0x11C5
    4ee6:	90 91 c6 11 	lds	r25, 0x11C6
    4eea:	9f 8b       	std	Y+23, r25	; 0x17
    4eec:	8e 8b       	std	Y+22, r24	; 0x16
    ndr->mcps.DstAddr           = next_hop_address;
    4eee:	88 8e       	std	Y+24, r8	; 0x18
    4ef0:	99 8e       	std	Y+25, r9	; 0x19
    4ef2:	1a 8e       	std	Y+26, r1	; 0x1a
    4ef4:	1b 8e       	std	Y+27, r1	; 0x1b
    4ef6:	1c 8e       	std	Y+28, r1	; 0x1c
    4ef8:	1d 8e       	std	Y+29, r1	; 0x1d
    4efa:	1e 8e       	std	Y+30, r1	; 0x1e
    4efc:	1f 8e       	std	Y+31, r1	; 0x1f
    ndr->mcps.TxOptions         = WPAN_TXOPT_ACK;
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	88 a3       	std	Y+32, r24	; 0x20
    ndr->mcps.msduLength        = index;
    4f02:	79 a2       	std	Y+33, r7	; 0x21
    ndr->mcps.data              = nwk_frame;
    4f04:	1b a3       	std	Y+35, r17	; 0x23
    4f06:	0a a3       	std	Y+34, r16	; 0x22
    ndr->mcps.mcps_data_confirm = mac_data_confirm_callback;
    4f08:	84 e7       	ldi	r24, 0x74	; 116
    4f0a:	96 e2       	ldi	r25, 0x26	; 38
    4f0c:	9d a3       	std	Y+37, r25	; 0x25
    4f0e:	8c a3       	std	Y+36, r24	; 0x24
        
    /* Set NWK layer callbacks. */
    nlde_callback_data_confirm = ndr->nlde_callback_data_confirm;
    4f10:	89 85       	ldd	r24, Y+9	; 0x09
    4f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f14:	90 93 72 0d 	sts	0x0D72, r25
    4f18:	80 93 71 0d 	sts	0x0D71, r24
    confirm = &(ndr->confirm);
    4f1c:	ce 01       	movw	r24, r28
    4f1e:	0b 96       	adiw	r24, 0x0b	; 11
    4f20:	90 93 70 0d 	sts	0x0D70, r25
    4f24:	80 93 6f 0d 	sts	0x0D6F, r24

    /* 8. Issue primitive. */
    bool data_request_status = false;
    if (true != ieee802_15_4_data_request(&(ndr->mcps))) {
    4f28:	01 96       	adiw	r24, 0x01	; 1
    4f2a:	0e 94 c7 13 	call	0x278e	; 0x278e <ieee802_15_4_data_request>
    4f2e:	c8 2f       	mov	r28, r24
    } else {
        data_request_status = true;
    }
    
    /* Free allocated memory. */
    MEM_FREE(nwk_frame);
    4f30:	c8 01       	movw	r24, r16
    4f32:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
    
    return data_request_status;
}
    4f36:	8c 2f       	mov	r24, r28
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	1f 91       	pop	r17
    4f3e:	0f 91       	pop	r16
    4f40:	ff 90       	pop	r15
    4f42:	ef 90       	pop	r14
    4f44:	df 90       	pop	r13
    4f46:	cf 90       	pop	r12
    4f48:	bf 90       	pop	r11
    4f4a:	af 90       	pop	r10
    4f4c:	9f 90       	pop	r9
    4f4e:	8f 90       	pop	r8
    4f50:	7f 90       	pop	r7
    4f52:	08 95       	ret

00004f54 <mac_data_indication_callback>:


/*                         IEEE 802.15.4 MAC Callback.                        */


void mac_data_indication_callback(mcps_data_ind_t *mcdi) {
    4f54:	ef 92       	push	r14
    4f56:	ff 92       	push	r15
    4f58:	0f 93       	push	r16
    4f5a:	1f 93       	push	r17
    4f5c:	cf 93       	push	r28
    4f5e:	df 93       	push	r29
    4f60:	7c 01       	movw	r14, r24
    /* Must at least be enough data available to extract the NWK layer header. */
    if (NWK_MIN_HEADER_OVERHEAD > (mcdi->msduLength)) { return; }
    4f62:	fc 01       	movw	r30, r24
    4f64:	85 89       	ldd	r24, Z+21	; 0x15
    4f66:	88 30       	cpi	r24, 0x08	; 8
    4f68:	08 f4       	brcc	.+2      	; 0x4f6c <mac_data_indication_callback+0x18>
    4f6a:	8d c0       	rjmp	.+282    	; 0x5086 <mac_data_indication_callback+0x132>
    
    uint16_t fcf = (nwk_header[0] << 8 * 0); // Read FCF LSB.
    fcf         |= (nwk_header[1] << 8 * 1); // Read FCF MSB.
    
    uint16_t nwk_dest_addr = (nwk_header[2] << 8 * 0); // Read Destination Address LSB.
    nwk_dest_addr         |= (nwk_header[3] << 8 * 1); // Read Destination Address MSB.;
    4f6c:	01 8d       	ldd	r16, Z+25	; 0x19
    4f6e:	10 e0       	ldi	r17, 0x00	; 0
    4f70:	10 2f       	mov	r17, r16
    4f72:	00 27       	eor	r16, r16
    uint8_t *nwk_header = mcdi->msdu;
    
    uint16_t fcf = (nwk_header[0] << 8 * 0); // Read FCF LSB.
    fcf         |= (nwk_header[1] << 8 * 1); // Read FCF MSB.
    
    uint16_t nwk_dest_addr = (nwk_header[2] << 8 * 0); // Read Destination Address LSB.
    4f74:	90 8d       	ldd	r25, Z+24	; 0x18
    nwk_dest_addr         |= (nwk_header[3] << 8 * 1); // Read Destination Address MSB.;
    4f76:	09 2b       	or	r16, r25
    
    if (nwk_dest_addr != IEEE802_15_4_GET_SHORT_ADDRESS()) {
    4f78:	20 91 d7 11 	lds	r18, 0x11D7
    4f7c:	30 91 d8 11 	lds	r19, 0x11D8
    4f80:	02 17       	cp	r16, r18
    4f82:	13 07       	cpc	r17, r19
    4f84:	09 f4       	brne	.+2      	; 0x4f88 <mac_data_indication_callback+0x34>
    4f86:	53 c0       	rjmp	.+166    	; 0x502e <mac_data_indication_callback+0xda>
        /* Route to another device. */
        /* Route along the three. */
        /* Update destination MAC destination address and send. */
        
        relay = (mcps_data_req_t *)MEM_ALLOC(mcps_data_req_t);
    4f88:	8b e1       	ldi	r24, 0x1B	; 27
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    4f90:	ec 01       	movw	r28, r24
    4f92:	90 93 6e 0d 	sts	0x0D6E, r25
    4f96:	80 93 6d 0d 	sts	0x0D6D, r24
        /* Verify that memory was allocated. */
        if (NULL == relay) {
    4f9a:	00 97       	sbiw	r24, 0x00	; 0
    4f9c:	59 f0       	breq	.+22     	; 0x4fb4 <mac_data_indication_callback+0x60>
        }
        
        /* TODO: Use tree routing algorithm to find the first hop destination address. */
        /* Send top parent or to one of the childs if this is a coordinator or router. */
        /* For now always send to parent. */
        uint16_t next_hop_address = find_next_address(nwk_dest_addr);
    4f9e:	c8 01       	movw	r24, r16
    4fa0:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <find_next_address>
    4fa4:	8c 01       	movw	r16, r24
    
        /* Could not find a valid address for the next hop. */
        if (0xFFFF == next_hop_address) {
    4fa6:	8f 3f       	cpi	r24, 0xFF	; 255
    4fa8:	ff ef       	ldi	r31, 0xFF	; 255
    4faa:	9f 07       	cpc	r25, r31
    4fac:	59 f4       	brne	.+22     	; 0x4fc4 <mac_data_indication_callback+0x70>
            /* Free allocated memory. */
            MEM_FREE(relay);
    4fae:	ce 01       	movw	r24, r28
    4fb0:	0e 94 7d 24 	call	0x48fa	; 0x48fa <vrt_mem_free>
        }
    }
    
    /* Go back to RX_AACK_ON. */
    ieee802_15_4_rx_enable();
}
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	ff 90       	pop	r15
    4fbe:	ef 90       	pop	r14
        if (0xFFFF == next_hop_address) {
            /* Free allocated memory. */
            MEM_FREE(relay);
            
            /* Go back to RX_AACK_ON. */
            ieee802_15_4_rx_enable();
    4fc0:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <ieee802_15_4_rx_enable>
            return;
        }
    
        /* 7. Build MCPS_DATA.request. */
        relay->SrcAddrMode       = WPAN_ADDRMODE_SHORT;
    4fc4:	e2 e0       	ldi	r30, 0x02	; 2
    4fc6:	e8 83       	st	Y, r30
        relay->SrcAddr           = IEEE802_15_4_GET_SHORT_ADDRESS();
    4fc8:	20 91 d7 11 	lds	r18, 0x11D7
    4fcc:	30 91 d8 11 	lds	r19, 0x11D8
    4fd0:	29 83       	std	Y+1, r18	; 0x01
    4fd2:	3a 83       	std	Y+2, r19	; 0x02
    4fd4:	1b 82       	std	Y+3, r1	; 0x03
    4fd6:	1c 82       	std	Y+4, r1	; 0x04
    4fd8:	1d 82       	std	Y+5, r1	; 0x05
    4fda:	1e 82       	std	Y+6, r1	; 0x06
    4fdc:	1f 82       	std	Y+7, r1	; 0x07
    4fde:	18 86       	std	Y+8, r1	; 0x08
        relay->DstAddrMode       = WPAN_ADDRMODE_SHORT;
    4fe0:	e9 87       	std	Y+9, r30	; 0x09
        relay->DstPANId          = IEEE802_15_4_GET_PAN_ID();
    4fe2:	80 91 c5 11 	lds	r24, 0x11C5
    4fe6:	90 91 c6 11 	lds	r25, 0x11C6
    4fea:	9b 87       	std	Y+11, r25	; 0x0b
    4fec:	8a 87       	std	Y+10, r24	; 0x0a
        relay->DstAddr           = next_hop_address;
    4fee:	0c 87       	std	Y+12, r16	; 0x0c
    4ff0:	1d 87       	std	Y+13, r17	; 0x0d
    4ff2:	1e 86       	std	Y+14, r1	; 0x0e
    4ff4:	1f 86       	std	Y+15, r1	; 0x0f
    4ff6:	18 8a       	std	Y+16, r1	; 0x10
    4ff8:	19 8a       	std	Y+17, r1	; 0x11
    4ffa:	1a 8a       	std	Y+18, r1	; 0x12
    4ffc:	1b 8a       	std	Y+19, r1	; 0x13
        relay->TxOptions         = WPAN_TXOPT_ACK;
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	8c 8b       	std	Y+20, r24	; 0x14
        relay->msduLength        = mcdi->msduLength;
    5002:	f7 01       	movw	r30, r14
    5004:	85 89       	ldd	r24, Z+21	; 0x15
    5006:	8d 8b       	std	Y+21, r24	; 0x15

void mac_data_indication_callback(mcps_data_ind_t *mcdi) {
    /* Must at least be enough data available to extract the NWK layer header. */
    if (NWK_MIN_HEADER_OVERHEAD > (mcdi->msduLength)) { return; }
    
    uint8_t *nwk_header = mcdi->msdu;
    5008:	f6 e1       	ldi	r31, 0x16	; 22
    500a:	ef 0e       	add	r14, r31
    500c:	f1 1c       	adc	r15, r1
        relay->DstAddrMode       = WPAN_ADDRMODE_SHORT;
        relay->DstPANId          = IEEE802_15_4_GET_PAN_ID();
        relay->DstAddr           = next_hop_address;
        relay->TxOptions         = WPAN_TXOPT_ACK;
        relay->msduLength        = mcdi->msduLength;
        relay->data              = nwk_header;
    500e:	ff 8a       	std	Y+23, r15	; 0x17
    5010:	ee 8a       	std	Y+22, r14	; 0x16
        relay->mcps_data_confirm = relay_confirm;
    5012:	82 ea       	ldi	r24, 0xA2	; 162
    5014:	96 e2       	ldi	r25, 0x26	; 38
    5016:	99 8f       	std	Y+25, r25	; 0x19
    5018:	88 8f       	std	Y+24, r24	; 0x18

        /* 8. Issue primitive. */
        if (true != ieee802_15_4_data_request(relay)) {
    501a:	ce 01       	movw	r24, r28
    501c:	0e 94 c7 13 	call	0x278e	; 0x278e <ieee802_15_4_data_request>
    5020:	81 11       	cpse	r24, r1
    5022:	c8 cf       	rjmp	.-112    	; 0x4fb4 <mac_data_indication_callback+0x60>
            MEM_FREE(relay);
    5024:	80 91 6d 0d 	lds	r24, 0x0D6D
    5028:	90 91 6e 0d 	lds	r25, 0x0D6E
    502c:	c1 cf       	rjmp	.-126    	; 0x4fb0 <mac_data_indication_callback+0x5c>
    } else {
        /* Message is for this device. */
        
        /* Allocate memory to build and NLDE_DATA.indication message. */
        /* Try to allocate some memory to build the NLDE_DATA.indication message. */
        nlde_data_ind_t *ndi = (nlde_data_ind_t *)MEM_ALLOC_ARRAY(uint8_t, sizeof(nlde_data_ind_t) + (mcdi->msduLength) - NWK_MIN_HEADER_OVERHEAD);
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	01 97       	sbiw	r24, 0x01	; 1
    5032:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    5036:	ec 01       	movw	r28, r24
        if (NULL == ndi) { return; }
    5038:	00 97       	sbiw	r24, 0x00	; 0
    503a:	29 f1       	breq	.+74     	; 0x5086 <mac_data_indication_callback+0x132>
        
        /* Build indication. */
        ndi->DstAddrMode = 0x01;
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	88 83       	st	Y, r24
        
        memcpy((void *)(&(ndi->DstAddr)), (void *)(&nwk_dest_addr), sizeof(uint16_t));
    5040:	1a 83       	std	Y+2, r17	; 0x02
    5042:	09 83       	std	Y+1, r16	; 0x01
        
        uint16_t nwk_src_addr = (nwk_header[4] << 8 * 0); // Read Source Address LSB.
        nwk_src_addr         |= (nwk_header[5] << 8 * 1); // Read Source Address MSB.;
    5044:	f7 01       	movw	r30, r14
    5046:	83 8d       	ldd	r24, Z+27	; 0x1b
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	98 2f       	mov	r25, r24
    504c:	88 27       	eor	r24, r24
        /* Build indication. */
        ndi->DstAddrMode = 0x01;
        
        memcpy((void *)(&(ndi->DstAddr)), (void *)(&nwk_dest_addr), sizeof(uint16_t));
        
        uint16_t nwk_src_addr = (nwk_header[4] << 8 * 0); // Read Source Address LSB.
    504e:	22 8d       	ldd	r18, Z+26	; 0x1a
        nwk_src_addr         |= (nwk_header[5] << 8 * 1); // Read Source Address MSB.;
    5050:	82 2b       	or	r24, r18
        
        memcpy((void *)(&(ndi->SrcAddr)), (void *)(&nwk_src_addr), sizeof(uint16_t));
    5052:	9c 83       	std	Y+4, r25	; 0x04
    5054:	8b 83       	std	Y+3, r24	; 0x03
        
        ndi->LinkQuality = mcdi->mpduLinkQuality;
    5056:	84 89       	ldd	r24, Z+20	; 0x14
    5058:	8d 83       	std	Y+5, r24	; 0x05
        ndi->NsduLength = (mcdi->msduLength) - NWK_MIN_HEADER_OVERHEAD;
    505a:	85 89       	ldd	r24, Z+21	; 0x15
    505c:	88 50       	subi	r24, 0x08	; 8
    505e:	8e 83       	std	Y+6, r24	; 0x06
        memcpy((void *)(ndi->Nsdu), (void *)(&nwk_header[8]), ((mcdi->msduLength) - NWK_MIN_HEADER_OVERHEAD));
    5060:	45 89       	ldd	r20, Z+21	; 0x15
    5062:	50 e0       	ldi	r21, 0x00	; 0
    5064:	48 50       	subi	r20, 0x08	; 8
    5066:	51 09       	sbc	r21, r1
    5068:	b7 01       	movw	r22, r14
    506a:	62 5e       	subi	r22, 0xE2	; 226
    506c:	7f 4f       	sbci	r23, 0xFF	; 255
    506e:	ce 01       	movw	r24, r28
    5070:	07 96       	adiw	r24, 0x07	; 7
    5072:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
        
        /* Post this event. */
        if (true != vrt_post_event(zigbee_data_indication_do_callback, (uint8_t *)ndi)) {
    5076:	be 01       	movw	r22, r28
    5078:	8e e8       	ldi	r24, 0x8E	; 142
    507a:	96 e2       	ldi	r25, 0x26	; 38
    507c:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
    5080:	81 11       	cpse	r24, r1
    5082:	98 cf       	rjmp	.-208    	; 0x4fb4 <mac_data_indication_callback+0x60>
    5084:	94 cf       	rjmp	.-216    	; 0x4fae <mac_data_indication_callback+0x5a>
        }
    }
    
    /* Go back to RX_AACK_ON. */
    ieee802_15_4_rx_enable();
}
    5086:	df 91       	pop	r29
    5088:	cf 91       	pop	r28
    508a:	1f 91       	pop	r17
    508c:	0f 91       	pop	r16
    508e:	ff 90       	pop	r15
    5090:	ef 90       	pop	r14
    5092:	08 95       	ret

00005094 <zigbee_network_discovery_confirm_do_callback>:


void zigbee_network_discovery_confirm_do_callback(void *ndc) {
    /* Cast the ndc to a NLME-NETWORK-DISCOVERY.confirm message. */
    
    ZIGBEE_NWK_SET_STATE(NWK_IDLE);
    5094:	10 92 86 01 	sts	0x0186, r1
    
    /* Execute the event handler. */
    nwk_param.discovery.nlme_callback_discovery_confirm((nlme_network_discovery_conf_t *)ndc);
    5098:	e0 91 36 12 	lds	r30, 0x1236
    509c:	f0 91 37 12 	lds	r31, 0x1237
    50a0:	09 94       	ijmp

000050a2 <mac_scan_confirm_callback>:


/*                     IEEE802.15.4 MAC Callbacks                             */


static void mac_scan_confirm_callback(mlme_scan_conf_t *msc) {
    50a2:	cf 93       	push	r28
    50a4:	df 93       	push	r29
    50a6:	ec 01       	movw	r28, r24
    /* Check result of the scan. If any PANs were found, there must be copied into
     * the Neighbor table.
     */
    
    /* Clear the MLME_BEACON_NOTIFY.indication callback. */
    ieee802_15_4_clear_mlme_beacon_notify_indication();
    50a8:	0e 94 5f 0c 	call	0x18be	; 0x18be <ieee802_15_4_clear_mlme_beacon_notify_indication>
    
    /* Build the NLME_NETWORK_DISCOVERY.confirm messsage. This is done by simply
     * copying the Network Descriptors from the Neighbor Table.
     */
    
    nlme_network_discovery_conf_t *ndc = nwk_param.discovery.ndc;
    50ac:	60 91 38 12 	lds	r22, 0x1238
    50b0:	70 91 39 12 	lds	r23, 0x1239
    ndc->Status = msc->status;
    50b4:	88 81       	ld	r24, Y
    50b6:	fb 01       	movw	r30, r22
    50b8:	ef 5b       	subi	r30, 0xBF	; 191
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	80 83       	st	Z, r24
    ndc->NetworkCount = NEIGHBOR_TABLE_GET_SIZE();
    50be:	80 91 44 12 	lds	r24, 0x1244
    50c2:	eb 01       	movw	r28, r22
    50c4:	89 93       	st	Y+, r24
        
    network_desc_t * nd_list = (network_desc_t *)(&(ndc->NetworkDescriptor[0]));
    
    for(zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST(); \
    50c6:	80 91 45 12 	lds	r24, 0x1245
    50ca:	90 91 46 12 	lds	r25, 0x1246
        true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item); nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item)) {
        memcpy((void *)(nd_list), (void *)(&(nb_item->ndesc)), sizeof(network_desc_t));
    50ce:	20 e1       	ldi	r18, 0x10	; 16
    ndc->Status = msc->status;
    ndc->NetworkCount = NEIGHBOR_TABLE_GET_SIZE();
        
    network_desc_t * nd_list = (network_desc_t *)(&(ndc->NetworkDescriptor[0]));
    
    for(zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST(); \
    50d0:	00 97       	sbiw	r24, 0x00	; 0
    50d2:	69 f0       	breq	.+26     	; 0x50ee <mac_scan_confirm_callback+0x4c>
        true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item); nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item)) {
        memcpy((void *)(nd_list), (void *)(&(nb_item->ndesc)), sizeof(network_desc_t));
    50d4:	fc 01       	movw	r30, r24
    50d6:	34 96       	adiw	r30, 0x04	; 4
    50d8:	de 01       	movw	r26, r28
    50da:	32 2f       	mov	r19, r18
    50dc:	01 90       	ld	r0, Z+
    50de:	0d 92       	st	X+, r0
    50e0:	3a 95       	dec	r19
    50e2:	e1 f7       	brne	.-8      	; 0x50dc <mac_scan_confirm_callback+0x3a>
        nd_list++;
    50e4:	60 96       	adiw	r28, 0x10	; 16
    ndc->NetworkCount = NEIGHBOR_TABLE_GET_SIZE();
        
    network_desc_t * nd_list = (network_desc_t *)(&(ndc->NetworkDescriptor[0]));
    
    for(zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST(); \
        true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item); nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item)) {
    50e6:	fc 01       	movw	r30, r24
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	f1 cf       	rjmp	.-30     	; 0x50d0 <mac_scan_confirm_callback+0x2e>
        memcpy((void *)(nd_list), (void *)(&(nb_item->ndesc)), sizeof(network_desc_t));
        nd_list++;
    }
    
    /* Post the confirm event. */
    (bool)vrt_post_event(zigbee_network_discovery_confirm_do_callback, (uint8_t *)(ndc));
    50ee:	8a e4       	ldi	r24, 0x4A	; 74
    50f0:	98 e2       	ldi	r25, 0x28	; 40
}
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
        memcpy((void *)(nd_list), (void *)(&(nb_item->ndesc)), sizeof(network_desc_t));
        nd_list++;
    }
    
    /* Post the confirm event. */
    (bool)vrt_post_event(zigbee_network_discovery_confirm_do_callback, (uint8_t *)(ndc));
    50f6:	0c 94 3f 23 	jmp	0x467e	; 0x467e <vrt_post_event>

000050fa <mac_beacon_notify_callback>:
}


static void mac_beacon_notify_callback(mlme_beacon_notify_ind_t *mnbi) {
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	ec 01       	movw	r28, r24
    /* Check that short address is used, and if the node with this beacon is 
     * already known.
     */
    if (WPAN_ADDRMODE_SHORT != (mnbi->PANDescriptor.CoordAddrMode)) {
    5100:	89 81       	ldd	r24, Y+1	; 0x01
    5102:	82 30       	cpi	r24, 0x02	; 2
    5104:	09 f0       	breq	.+2      	; 0x5108 <mac_beacon_notify_callback+0xe>
    5106:	4d c0       	rjmp	.+154    	; 0x51a2 <mac_beacon_notify_callback+0xa8>
        return;
    }
    
    if (NULL != zigbee_neighbor_table_find(mnbi->PANDescriptor.CoordAddress)) {
    5108:	8c 81       	ldd	r24, Y+4	; 0x04
    510a:	9d 81       	ldd	r25, Y+5	; 0x05
    510c:	0e 94 b2 2c 	call	0x5964	; 0x5964 <zigbee_neighbor_table_find>
    5110:	89 2b       	or	r24, r25
    5112:	09 f0       	breq	.+2      	; 0x5116 <mac_beacon_notify_callback+0x1c>
    5114:	46 c0       	rjmp	.+140    	; 0x51a2 <mac_beacon_notify_callback+0xa8>
        return;
    }
    
    /* Add PANDescriptor into the neighbor table. */
    zigbee_neighbor_table_item_t *nbi = zigbee_neighbor_table_get();
    5116:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <zigbee_neighbor_table_get>
    511a:	fc 01       	movw	r30, r24
        
    /* Verify that an item was available. */
    if (NULL == nbi) {
    511c:	00 97       	sbiw	r24, 0x00	; 0
    511e:	31 f4       	brne	.+12     	; 0x512c <mac_beacon_notify_callback+0x32>
        zigbee_neighbor_table_put(nbi);
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    nbi->PotentialParent = true;
    nbi->LQI = pd->LinkQuality;
    
    /* Add Neighbor Table item. */
    zigbee_neighbor_table_append(nbi);
}
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    /* Add PANDescriptor into the neighbor table. */
    zigbee_neighbor_table_item_t *nbi = zigbee_neighbor_table_get();
        
    /* Verify that an item was available. */
    if (NULL == nbi) {
        zigbee_neighbor_table_put(nbi);
    5128:	0c 94 17 2c 	jmp	0x582e	; 0x582e <zigbee_neighbor_table_put>
    }
    
    /* Transfer all items to the Network table. */
    ieee802_15_4_pan_descriptor_t *pd = &(mnbi->PANDescriptor);
    
    nbi->ndesc.PanID = pd->CoordPANId;
    512c:	8a 81       	ldd	r24, Y+2	; 0x02
    512e:	9b 81       	ldd	r25, Y+3	; 0x03
    5130:	95 83       	std	Z+5, r25	; 0x05
    5132:	84 83       	std	Z+4, r24	; 0x04
    nbi->ndesc.ExtendedPanID = 0;
    5134:	16 82       	std	Z+6, r1	; 0x06
    5136:	17 82       	std	Z+7, r1	; 0x07
    5138:	10 86       	std	Z+8, r1	; 0x08
    513a:	11 86       	std	Z+9, r1	; 0x09
    513c:	12 86       	std	Z+10, r1	; 0x0a
    513e:	13 86       	std	Z+11, r1	; 0x0b
    5140:	14 86       	std	Z+12, r1	; 0x0c
    5142:	15 86       	std	Z+13, r1	; 0x0d
    nbi->ndesc.LogicalChannel = pd->LogicalChannel;;
    5144:	8c 85       	ldd	r24, Y+12	; 0x0c
    5146:	86 87       	std	Z+14, r24	; 0x0e
    nbi->ndesc.StackProfile = 0;
    5148:	17 86       	std	Z+15, r1	; 0x0f
    nbi->ndesc.ZigBeeVersion = 0;
    514a:	10 8a       	std	Z+16, r1	; 0x10
    
    uint16_t superframe_spec = pd->SuperframeSpec;
    514c:	8d 85       	ldd	r24, Y+13	; 0x0d
    514e:	9e 85       	ldd	r25, Y+14	; 0x0e
    
    nbi->ndesc.BeaconOrder = ((uint8_t)superframe_spec) & 0x0F;
    5150:	28 2f       	mov	r18, r24
    5152:	2f 70       	andi	r18, 0x0F	; 15
    5154:	21 8b       	std	Z+17, r18	; 0x11
    nbi->ndesc.SuperframeOrder = (((uint8_t)superframe_spec) >> 4) & 0x0F;;
    5156:	28 2f       	mov	r18, r24
    5158:	22 95       	swap	r18
    515a:	2f 70       	andi	r18, 0x0F	; 15
    515c:	22 8b       	std	Z+18, r18	; 0x12
    
    if (((superframe_spec & (1U << 15)) != (1U << 15))) {
    515e:	97 fd       	sbrc	r25, 7
    5160:	02 c0       	rjmp	.+4      	; 0x5166 <mac_beacon_notify_callback+0x6c>
        nbi->ndesc.PermitJoining = false;
    5162:	13 8a       	std	Z+19, r1	; 0x13
    5164:	02 c0       	rjmp	.+4      	; 0x516a <mac_beacon_notify_callback+0x70>
    } else {
        nbi->ndesc.PermitJoining = true;
    5166:	81 e0       	ldi	r24, 0x01	; 1
    5168:	83 8b       	std	Z+19, r24	; 0x13
    }
    
    nbi->ExtendedAddress = 0;
    516a:	14 8a       	std	Z+20, r1	; 0x14
    516c:	15 8a       	std	Z+21, r1	; 0x15
    516e:	16 8a       	std	Z+22, r1	; 0x16
    5170:	17 8a       	std	Z+23, r1	; 0x17
    5172:	10 8e       	std	Z+24, r1	; 0x18
    5174:	11 8e       	std	Z+25, r1	; 0x19
    5176:	12 8e       	std	Z+26, r1	; 0x1a
    5178:	13 8e       	std	Z+27, r1	; 0x1b
    nbi->NetworkAddress = pd->CoordAddress;
    517a:	8c 81       	ldd	r24, Y+4	; 0x04
    517c:	9d 81       	ldd	r25, Y+5	; 0x05
    517e:	95 8f       	std	Z+29, r25	; 0x1d
    5180:	84 8f       	std	Z+28, r24	; 0x1c
    nbi->DeviceType = ZIGBEE_TYPE_DEVICE;
    5182:	83 e0       	ldi	r24, 0x03	; 3
    5184:	86 8f       	std	Z+30, r24	; 0x1e
    nbi->RxOnWhenIdle = false;
    5186:	17 8e       	std	Z+31, r1	; 0x1f
    nbi->Relationship = ZIGBEE_REL_UNKNOWN;
    5188:	80 a3       	std	Z+32, r24	; 0x20
    nbi->Depth = NWK_MAX_DEPTH;
    518a:	8f e0       	ldi	r24, 0x0F	; 15
    518c:	81 a3       	std	Z+33, r24	; 0x21
    nbi->TransmitFailure = 0;
    518e:	12 a2       	std	Z+34, r1	; 0x22
    nbi->PotentialParent = true;
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	83 a3       	std	Z+35, r24	; 0x23
    nbi->LQI = pd->LinkQuality;
    5194:	8f 85       	ldd	r24, Y+15	; 0x0f
    5196:	84 a3       	std	Z+36, r24	; 0x24
    
    /* Add Neighbor Table item. */
    zigbee_neighbor_table_append(nbi);
    5198:	cf 01       	movw	r24, r30
}
    519a:	df 91       	pop	r29
    519c:	cf 91       	pop	r28
    nbi->TransmitFailure = 0;
    nbi->PotentialParent = true;
    nbi->LQI = pd->LinkQuality;
    
    /* Add Neighbor Table item. */
    zigbee_neighbor_table_append(nbi);
    519e:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <zigbee_neighbor_table_append>
}
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	08 95       	ret

000051a8 <zigbee_network_discovery_request>:
 *
 */
static void mac_beacon_notify_callback(mlme_beacon_notify_ind_t *mnbi);


bool zigbee_network_discovery_request(nlme_network_discovery_req_t *ndr) {
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	fc 01       	movw	r30, r24
    /* Verify that the device is in IDLE state. */
    if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
    51ae:	80 91 86 01 	lds	r24, 0x0186
    51b2:	88 23       	and	r24, r24
    51b4:	11 f0       	breq	.+4      	; 0x51ba <zigbee_network_discovery_request+0x12>
        return false;
    51b6:	80 e0       	ldi	r24, 0x00	; 0
    51b8:	29 c0       	rjmp	.+82     	; 0x520c <zigbee_network_discovery_request+0x64>
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == ndr) {
    51ba:	30 97       	sbiw	r30, 0x00	; 0
    51bc:	e1 f3       	breq	.-8      	; 0x51b6 <zigbee_network_discovery_request+0xe>
        return false;
    }
    
    if (NULL == (ndr->nlme_callback_discovery_confirm)) {
    51be:	82 81       	ldd	r24, Z+2	; 0x02
    51c0:	93 81       	ldd	r25, Z+3	; 0x03
    51c2:	00 97       	sbiw	r24, 0x00	; 0
    51c4:	c1 f3       	breq	.-16     	; 0x51b6 <zigbee_network_discovery_request+0xe>
        return false;
    }
    
    /* Store NWK parameters. */
    nwk_param.discovery.nlme_callback_discovery_confirm = ndr->nlme_callback_discovery_confirm;
    51c6:	90 93 37 12 	sts	0x1237, r25
    51ca:	80 93 36 12 	sts	0x1236, r24
    nwk_param.discovery.ndc = &(ndr->ndc);
    51ce:	cf 01       	movw	r24, r30
    51d0:	04 96       	adiw	r24, 0x04	; 4
    51d2:	90 93 39 12 	sts	0x1239, r25
    51d6:	80 93 38 12 	sts	0x1238, r24
    
    /* Build and send MLME_SCAN.request. */
    mlme_scan_req_t *msr = &(ndr->msr);
    msr->ScanType = MLME_SCAN_TYPE_ACTIVE;
    51da:	ef 01       	movw	r28, r30
    51dc:	ca 5b       	subi	r28, 0xBA	; 186
    51de:	df 4f       	sbci	r29, 0xFF	; 255
    51e0:	81 e0       	ldi	r24, 0x01	; 1
    51e2:	88 83       	st	Y, r24
    msr->ScanChannel = ndr->ChannelToScan;
    51e4:	80 81       	ld	r24, Z
    51e6:	89 83       	std	Y+1, r24	; 0x01
    msr->ScanDuration = ndr->ScanDuration; 
    51e8:	81 81       	ldd	r24, Z+1	; 0x01
    51ea:	8a 83       	std	Y+2, r24	; 0x02
    msr->mlme_scan_confirm = mac_scan_confirm_callback;
    51ec:	81 e5       	ldi	r24, 0x51	; 81
    51ee:	98 e2       	ldi	r25, 0x28	; 40
    51f0:	9c 83       	std	Y+4, r25	; 0x04
    51f2:	8b 83       	std	Y+3, r24	; 0x03
    
    /* Set the MLME_BEACON_NOTIFY.indication callback. */
    ieee802_15_4_set_mlme_beacon_notify_indication(mac_beacon_notify_callback);
    51f4:	8d e7       	ldi	r24, 0x7D	; 125
    51f6:	98 e2       	ldi	r25, 0x28	; 40
    51f8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ieee802_15_4_set_mlme_beacon_notify_indication>
    
    /* Issue MLME_SCAN.request primitive. */
    bool discovery_status = false;
    if (true != ieee802_15_4_scan_request(msr)) {
    51fc:	ce 01       	movw	r24, r28
    51fe:	0e 94 10 18 	call	0x3020	; 0x3020 <ieee802_15_4_scan_request>
    5202:	88 23       	and	r24, r24
    5204:	c1 f2       	breq	.-80     	; 0x51b6 <zigbee_network_discovery_request+0xe>
    } else {
        ZIGBEE_NWK_SET_STATE(NWK_BUSY_DISCOVERING);
    5206:	92 e0       	ldi	r25, 0x02	; 2
    5208:	90 93 86 01 	sts	0x0186, r25
        discovery_status = true;
    }
    
    return discovery_status;
}
    520c:	df 91       	pop	r29
    520e:	cf 91       	pop	r28
    5210:	08 95       	ret

00005212 <zigbee_formation_request>:
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool zigbee_formation_request(nlme_formation_req_t *nfr) {
    /* Add check of current state. */
    if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
    5212:	20 91 86 01 	lds	r18, 0x0186
    5216:	22 23       	and	r18, r18
    5218:	11 f0       	breq	.+4      	; 0x521e <zigbee_formation_request+0xc>
        return false;
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	08 95       	ret
    }
    
    /* Peform sanity check on the function arguments. */
    if (NULL == nfr) {
    521e:	00 97       	sbiw	r24, 0x00	; 0
    5220:	e1 f3       	breq	.-8      	; 0x521a <zigbee_formation_request+0x8>
    
    /* Form the newtork by issuing the MLME_START.request primitive to the
     * the IEEE 802.15.4 MAC. If this primitive is successful, set the device's
     * short address to 0x0000. Finally enable the receiver.
     */
    if (MAC_SUCCESS != ieee802_15_4_start_request((nfr->pan_id), (nfr->channel), true)) {
    5222:	41 e0       	ldi	r20, 0x01	; 1
    5224:	fc 01       	movw	r30, r24
    5226:	60 81       	ld	r22, Z
    5228:	81 81       	ldd	r24, Z+1	; 0x01
    522a:	92 81       	ldd	r25, Z+2	; 0x02
    522c:	0e 94 79 19 	call	0x32f2	; 0x32f2 <ieee802_15_4_start_request>
    5230:	81 11       	cpse	r24, r1
    5232:	f3 cf       	rjmp	.-26     	; 0x521a <zigbee_formation_request+0x8>
    } else if (MAC_SUCCESS != ieee802_15_4_set_short_address(0x0000)) {
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <ieee802_15_4_set_short_address>
    523c:	81 11       	cpse	r24, r1
    523e:	ed cf       	rjmp	.-38     	; 0x521a <zigbee_formation_request+0x8>
    } else if (MAC_SUCCESS != ieee802_15_4_rx_enable()) {
    5240:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <ieee802_15_4_rx_enable>
    5244:	81 11       	cpse	r24, r1
    5246:	e9 cf       	rjmp	.-46     	; 0x521a <zigbee_formation_request+0x8>
    } else {
        /* Network Formation is only used to start a Coordinator. Set network
         * depth to zero, calculate Cskip and set next nwkAddress.
         */
        
        NWK_NIB_SET_NWK_ADDRESS(0);
    5248:	10 92 63 12 	sts	0x1263, r1
    524c:	10 92 62 12 	sts	0x1262, r1
            
        uint16_t c_skip = zigbee_nib_c_skip(0);
    5250:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <zigbee_nib_c_skip>
        NWK_NIB_SET_ADDRESS_INCREMENT(c_skip);
    5254:	90 93 4f 12 	sts	0x124F, r25
    5258:	80 93 4e 12 	sts	0x124E, r24
        NWK_NIB_SET_PARENT_ADDRESS_INCREMENT(c_skip);
    525c:	90 93 4d 12 	sts	0x124D, r25
    5260:	80 93 4c 12 	sts	0x124C, r24
        
        ZIGBEE_NWK_SET_STATE(NWK_FORMED);
    5264:	83 e0       	ldi	r24, 0x03	; 3
    5266:	80 93 86 01 	sts	0x0186, r24
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_ROUTER);
    526a:	82 e0       	ldi	r24, 0x02	; 2
    526c:	80 93 50 12 	sts	0x1250, r24
        
        formation_status = true;
    5270:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    return formation_status;
}
    5272:	08 95       	ret

00005274 <mac_associate_confim_callback>:
        MEM_FREE(nji);
    }
}


static void mac_associate_confim_callback(mlme_associate_conf_t *mac) {
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	fc 01       	movw	r30, r24
    /* Build NLME_JOIN.confirm. */
    nlme_join_conf_t *njc = nwk_param.join.njc;
    527a:	c0 91 3a 12 	lds	r28, 0x123A
    527e:	d0 91 3b 12 	lds	r29, 0x123B
    memcpy((void *)(&(njc->ShortAddress)), (void *)(&(mac->AssocShortAddress)), sizeof(uint16_t));
    5282:	80 81       	ld	r24, Z
    5284:	91 81       	ldd	r25, Z+1	; 0x01
    5286:	99 83       	std	Y+1, r25	; 0x01
    5288:	88 83       	st	Y, r24
    memcpy((void *)(&(njc->PANId)), (void *)(&IEEE802_15_4_GET_PAN_ID()), sizeof(uint16_t));
    528a:	80 91 c5 11 	lds	r24, 0x11C5
    528e:	90 91 c6 11 	lds	r25, 0x11C6
    5292:	9b 83       	std	Y+3, r25	; 0x03
    5294:	8a 83       	std	Y+2, r24	; 0x02
    njc->Status = mac->status;
    5296:	82 81       	ldd	r24, Z+2	; 0x02
    5298:	8c 83       	std	Y+4, r24	; 0x04
    
    /* Set state to NWK_JOINED if the association process was successful. */
    if (ASSOCIATION_SUCCESSFUL == (mac->status)) {
    529a:	82 81       	ldd	r24, Z+2	; 0x02
    529c:	81 11       	cpse	r24, r1
    529e:	22 c0       	rjmp	.+68     	; 0x52e4 <mac_associate_confim_callback+0x70>
        NWK_NIB_SET_NWK_ADDRESS(mac->AssocShortAddress);
    52a0:	80 81       	ld	r24, Z
    52a2:	91 81       	ldd	r25, Z+1	; 0x01
    52a4:	90 93 63 12 	sts	0x1263, r25
    52a8:	80 93 62 12 	sts	0x1262, r24
        NWK_NIB_SET_ADDRESS_INCREMENT(0);
    52ac:	10 92 4f 12 	sts	0x124F, r1
    52b0:	10 92 4e 12 	sts	0x124E, r1
        
        uint8_t depth = zigbee_neighbor_table_find_depth(IEEE802_15_4_GET_COORD_SHORT_ADDRESS(), \
    52b4:	60 91 d7 11 	lds	r22, 0x11D7
    52b8:	70 91 d8 11 	lds	r23, 0x11D8
    52bc:	80 91 c3 11 	lds	r24, 0x11C3
    52c0:	90 91 c4 11 	lds	r25, 0x11C4
    52c4:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <zigbee_neighbor_table_find_depth>
                                                         IEEE802_15_4_GET_SHORT_ADDRESS());
        
        uint16_t c_skip = zigbee_nib_c_skip(depth - 1);
    52c8:	81 50       	subi	r24, 0x01	; 1
    52ca:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <zigbee_nib_c_skip>
        NWK_NIB_SET_PARENT_ADDRESS_INCREMENT(c_skip); 
    52ce:	90 93 4d 12 	sts	0x124D, r25
    52d2:	80 93 4c 12 	sts	0x124C, r24
        
        ZIGBEE_NWK_SET_STATE(NWK_JOINED);
    52d6:	85 e0       	ldi	r24, 0x05	; 5
    52d8:	80 93 86 01 	sts	0x0186, r24
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_DEVICE);
    52dc:	83 e0       	ldi	r24, 0x03	; 3
    52de:	80 93 50 12 	sts	0x1250, r24
    52e2:	0a c0       	rjmp	.+20     	; 0x52f8 <mac_associate_confim_callback+0x84>
    } else {
        /* Remove this node from the Neighbor Table. */
        zigbee_neighbor_table_item_t *nb = zigbee_neighbor_table_find(nwk_param.join.parent_address);
    52e4:	80 91 36 12 	lds	r24, 0x1236
    52e8:	90 91 37 12 	lds	r25, 0x1237
    52ec:	0e 94 b2 2c 	call	0x5964	; 0x5964 <zigbee_neighbor_table_find>
        if (NULL != nb) { zigbee_neighbor_table_delete(nb); }
    52f0:	00 97       	sbiw	r24, 0x00	; 0
    52f2:	11 f0       	breq	.+4      	; 0x52f8 <mac_associate_confim_callback+0x84>
    52f4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <zigbee_neighbor_table_delete>
    }
    
    /* Execute callback. */
    nwk_param.join.nlme_callback_join_confirm(njc);
    52f8:	e0 91 38 12 	lds	r30, 0x1238
    52fc:	f0 91 39 12 	lds	r31, 0x1239
    5300:	ce 01       	movw	r24, r28
}
    5302:	df 91       	pop	r29
    5304:	cf 91       	pop	r28
        zigbee_neighbor_table_item_t *nb = zigbee_neighbor_table_find(nwk_param.join.parent_address);
        if (NULL != nb) { zigbee_neighbor_table_delete(nb); }
    }
    
    /* Execute callback. */
    nwk_param.join.nlme_callback_join_confirm(njc);
    5306:	09 94       	ijmp

00005308 <zigbee_join_indication_do_callback>:
        return false;
    }
}


void zigbee_join_indication_do_callback(void *nji) {
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	ec 01       	movw	r28, r24
    /* Verify that the */
    if (NULL == nji) {
    530e:	00 97       	sbiw	r24, 0x00	; 0
    5310:	61 f0       	breq	.+24     	; 0x532a <zigbee_join_indication_do_callback+0x22>
        return;
    }
    
    /* Check if a callback is registered. */
    zigbee_join_indication_t nji_callback = zigbee_get_nlme_join_indication();
    5312:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <zigbee_get_nlme_join_indication>
    5316:	fc 01       	movw	r30, r24
    if (NULL == nji_callback) {
        MEM_FREE(nji);
    5318:	ce 01       	movw	r24, r28
        return;
    }
    
    /* Check if a callback is registered. */
    zigbee_join_indication_t nji_callback = zigbee_get_nlme_join_indication();
    if (NULL == nji_callback) {
    531a:	30 97       	sbiw	r30, 0x00	; 0
    531c:	11 f0       	breq	.+4      	; 0x5322 <zigbee_join_indication_do_callback+0x1a>
        MEM_FREE(nji);
        return;
    }
    
    /* Execute the callback. */
    nji_callback((nlme_join_ind_t *)nji);
    531e:	09 95       	icall
    MEM_FREE(nji);
    5320:	ce 01       	movw	r24, r28
}
    5322:	df 91       	pop	r29
    5324:	cf 91       	pop	r28
        return;
    }
    
    /* Execute the callback. */
    nji_callback((nlme_join_ind_t *)nji);
    MEM_FREE(nji);
    5326:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>
}
    532a:	df 91       	pop	r29
    532c:	cf 91       	pop	r28
    532e:	08 95       	ret

00005330 <zigbee_join_request>:
 *  \param[in] mac Pointer to MLME-ASSOCIATE.confirm message.
 */
static void mac_associate_confim_callback(mlme_associate_conf_t *mac);


bool zigbee_join_request(nlme_join_req_t *njr) {
    5330:	0f 93       	push	r16
    5332:	1f 93       	push	r17
    5334:	fc 01       	movw	r30, r24
    /* Perform sanity check on parameter set. */
    if (NULL == njr) {
    5336:	00 97       	sbiw	r24, 0x00	; 0
    5338:	09 f4       	brne	.+2      	; 0x533c <zigbee_join_request+0xc>
    533a:	5c c0       	rjmp	.+184    	; 0x53f4 <zigbee_join_request+0xc4>
        return false;
    }
    
    if (NULL == (njr->nlme_callback_join_confirm)) {
    533c:	86 81       	ldd	r24, Z+6	; 0x06
    533e:	97 81       	ldd	r25, Z+7	; 0x07
    5340:	00 97       	sbiw	r24, 0x00	; 0
    5342:	09 f4       	brne	.+2      	; 0x5346 <zigbee_join_request+0x16>
    5344:	57 c0       	rjmp	.+174    	; 0x53f4 <zigbee_join_request+0xc4>
        return false;
    }
    
    if (NWK_JOIN_THROUGH_ASSOCIATION == (njr->RejoinNetwork)) {
    5346:	22 81       	ldd	r18, Z+2	; 0x02
    5348:	21 11       	cpse	r18, r1
    534a:	54 c0       	rjmp	.+168    	; 0x53f4 <zigbee_join_request+0xc4>
        /* Association. */
        
        /* Verify that the device is in idle mode. */
        if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
    534c:	20 91 86 01 	lds	r18, 0x0186
    5350:	21 11       	cpse	r18, r1
    5352:	50 c0       	rjmp	.+160    	; 0x53f4 <zigbee_join_request+0xc4>
        /* Serach the Neighbor Table for a potential item with the suggested
         * PAN ID.
         */
        bool join_candidate_found = false;
        
        zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST();
    5354:	a0 91 45 12 	lds	r26, 0x1245
    5358:	b0 91 46 12 	lds	r27, 0x1246
        
        while ((true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item)) && (true != join_candidate_found)) {
    535c:	10 97       	sbiw	r26, 0x00	; 0
    535e:	09 f4       	brne	.+2      	; 0x5362 <zigbee_join_request+0x32>
    5360:	49 c0       	rjmp	.+146    	; 0x53f4 <zigbee_join_request+0xc4>
            
            if (((nb_item->ndesc.PanID) == (njr->PANId)) && (true == nb_item->ndesc.PermitJoining)) {
    5362:	14 96       	adiw	r26, 0x04	; 4
    5364:	2d 91       	ld	r18, X+
    5366:	3c 91       	ld	r19, X
    5368:	15 97       	sbiw	r26, 0x05	; 5
    536a:	40 81       	ld	r20, Z
    536c:	51 81       	ldd	r21, Z+1	; 0x01
    536e:	24 17       	cp	r18, r20
    5370:	35 07       	cpc	r19, r21
    5372:	29 f4       	brne	.+10     	; 0x537e <zigbee_join_request+0x4e>
    5374:	53 96       	adiw	r26, 0x13	; 19
    5376:	4c 91       	ld	r20, X
    5378:	53 97       	sbiw	r26, 0x13	; 19
    537a:	41 11       	cpse	r20, r1
    537c:	04 c0       	rjmp	.+8      	; 0x5386 <zigbee_join_request+0x56>
                join_candidate_found = true;
                break;
            } else {
                nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item);
    537e:	0d 90       	ld	r0, X+
    5380:	bc 91       	ld	r27, X
    5382:	a0 2d       	mov	r26, r0
    5384:	eb cf       	rjmp	.-42     	; 0x535c <zigbee_join_request+0x2c>
        if (true != join_candidate_found) {
            return false;
        }
        
        /* Build MLME_ASSOCIATE.request. */
        njr->mar.LogicalChannel = nb_item->ndesc.LogicalChannel;
    5386:	1e 96       	adiw	r26, 0x0e	; 14
    5388:	4c 91       	ld	r20, X
    538a:	1e 97       	sbiw	r26, 0x0e	; 14
    538c:	45 87       	std	Z+13, r20	; 0x0d
        njr->mar.CoordAddrMode = WPAN_ADDRMODE_SHORT;
    538e:	42 e0       	ldi	r20, 0x02	; 2
    5390:	46 87       	std	Z+14, r20	; 0x0e
        njr->mar.CoordPANId = njr->PANId;
    5392:	30 8b       	std	Z+16, r19	; 0x10
    5394:	27 87       	std	Z+15, r18	; 0x0f
        njr->mar.CoordAddress = 0;
        njr->mar.CoordAddress = nb_item->NetworkAddress;
    5396:	5c 96       	adiw	r26, 0x1c	; 28
    5398:	0d 90       	ld	r0, X+
    539a:	bc 91       	ld	r27, X
    539c:	a0 2d       	mov	r26, r0
    539e:	8d 01       	movw	r16, r26
    53a0:	a1 8b       	std	Z+17, r26	; 0x11
    53a2:	12 8b       	std	Z+18, r17	; 0x12
    53a4:	13 8a       	std	Z+19, r1	; 0x13
    53a6:	14 8a       	std	Z+20, r1	; 0x14
    53a8:	15 8a       	std	Z+21, r1	; 0x15
    53aa:	16 8a       	std	Z+22, r1	; 0x16
    53ac:	17 8a       	std	Z+23, r1	; 0x17
    53ae:	10 8e       	std	Z+24, r1	; 0x18
        
        uint8_t capabilities = 0;                  
        if (true == (njr->JoinAsRouter)) { capabilities |= (1 << 1); }
    53b0:	23 81       	ldd	r18, Z+3	; 0x03
    53b2:	21 11       	cpse	r18, r1
    53b4:	22 e0       	ldi	r18, 0x02	; 2
        if (0x01 == (njr->PowerSource))  { capabilities |= (1 << 2); }
    53b6:	34 81       	ldd	r19, Z+4	; 0x04
    53b8:	31 30       	cpi	r19, 0x01	; 1
    53ba:	09 f4       	brne	.+2      	; 0x53be <zigbee_join_request+0x8e>
    53bc:	24 60       	ori	r18, 0x04	; 4
        if (true == (njr->RxOnWhenIdle)) { capabilities |= (1 << 3); }
    53be:	35 81       	ldd	r19, Z+5	; 0x05
    53c0:	31 11       	cpse	r19, r1
    53c2:	28 60       	ori	r18, 0x08	; 8
        
        njr->mar.CapabilityInformation = capabilities;
    53c4:	21 8f       	std	Z+25, r18	; 0x19
        
        njr->mar.mlme_associate_confirm = mac_associate_confim_callback;
    53c6:	2a e3       	ldi	r18, 0x3A	; 58
    53c8:	39 e2       	ldi	r19, 0x29	; 41
    53ca:	33 8f       	std	Z+27, r19	; 0x1b
    53cc:	22 8f       	std	Z+26, r18	; 0x1a
        
        /* Set some of the internal storage pointers. */
        nwk_param.join.nlme_callback_join_confirm = njr->nlme_callback_join_confirm;
    53ce:	90 93 39 12 	sts	0x1239, r25
    53d2:	80 93 38 12 	sts	0x1238, r24
        nwk_param.join.njc = &(njr->njc);
    53d6:	cf 01       	movw	r24, r30
    53d8:	08 96       	adiw	r24, 0x08	; 8
    53da:	90 93 3b 12 	sts	0x123B, r25
    53de:	80 93 3a 12 	sts	0x123A, r24
        nwk_param.join.parent_address = njr->mar.CoordAddress;
    53e2:	b0 93 37 12 	sts	0x1237, r27
    53e6:	a0 93 36 12 	sts	0x1236, r26
        
        /* Issue request. */
        if (true != ieee802_15_4_associate_request(&(njr->mar))) {
    53ea:	05 96       	adiw	r24, 0x05	; 5
        return false;
    } else {
        /* Unknown option. */
        return false;
    }
}
    53ec:	1f 91       	pop	r17
    53ee:	0f 91       	pop	r16
        nwk_param.join.nlme_callback_join_confirm = njr->nlme_callback_join_confirm;
        nwk_param.join.njc = &(njr->njc);
        nwk_param.join.parent_address = njr->mar.CoordAddress;
        
        /* Issue request. */
        if (true != ieee802_15_4_associate_request(&(njr->mar))) {
    53f0:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <ieee802_15_4_associate_request>
        return false;
    } else {
        /* Unknown option. */
        return false;
    }
}
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	1f 91       	pop	r17
    53f8:	0f 91       	pop	r16
    53fa:	08 95       	ret

000053fc <mac_associate_indication_callback>:


/*                            IEEE 802.15.4 MAC Callbacks                     */


void mac_associate_indication_callback(mlme_associate_ind_t *mai) {
    53fc:	0f 93       	push	r16
    53fe:	1f 93       	push	r17
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	ec 01       	movw	r28, r24
    /* Allcoate some memory to build the MLME_ASSOCIATE.response on. */
    mlme_associate_resp_t *response = (mlme_associate_resp_t *)MEM_ALLOC(mlme_associate_resp_t);
    5406:	8b e0       	ldi	r24, 0x0B	; 11
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    540e:	8c 01       	movw	r16, r24
    
    if (NULL == response) {
    5410:	00 97       	sbiw	r24, 0x00	; 0
    5412:	09 f4       	brne	.+2      	; 0x5416 <mac_associate_indication_callback+0x1a>
    5414:	42 c0       	rjmp	.+132    	; 0x549a <mac_associate_indication_callback+0x9e>
        return;
    }
    
    memcpy((void *)(&(response->DeviceAddress)), (void *)(&(mai->DeviceAddress)), sizeof(uint64_t));
    5416:	88 e0       	ldi	r24, 0x08	; 8
    5418:	fe 01       	movw	r30, r28
    541a:	d8 01       	movw	r26, r16
    541c:	01 90       	ld	r0, Z+
    541e:	0d 92       	st	X+, r0
    5420:	8a 95       	dec	r24
    5422:	e1 f7       	brne	.-8      	; 0x541c <mac_associate_indication_callback+0x20>
    nwk_param.join_ind.capability_information = mai->CapabilityInformation;
    5424:	88 85       	ldd	r24, Y+8	; 0x08
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	90 93 39 12 	sts	0x1239, r25
    542c:	80 93 38 12 	sts	0x1238, r24
    
    /* Check if the device with this long address has been given a short address
     * already. That is this device is the parent.
     */
    zigbee_neighbor_table_item_t *child = zigbee_neighbor_table_find_long(mai->DeviceAddress);
    5430:	28 81       	ld	r18, Y
    5432:	39 81       	ldd	r19, Y+1	; 0x01
    5434:	4a 81       	ldd	r20, Y+2	; 0x02
    5436:	5b 81       	ldd	r21, Y+3	; 0x03
    5438:	6c 81       	ldd	r22, Y+4	; 0x04
    543a:	7d 81       	ldd	r23, Y+5	; 0x05
    543c:	8e 81       	ldd	r24, Y+6	; 0x06
    543e:	9f 81       	ldd	r25, Y+7	; 0x07
    5440:	0e 94 cb 2c 	call	0x5996	; 0x5996 <zigbee_neighbor_table_find_long>
    if (NULL != child) {
    5444:	00 97       	sbiw	r24, 0x00	; 0
    5446:	a1 f4       	brne	.+40     	; 0x5470 <mac_associate_indication_callback+0x74>
        nwk_param.join_ind.allocted_address = child->NetworkAddress;
    
        response->status = ASSOCIATION_SUCCESSFUL;
    } else {
        /* Check if the joining device is an End device or Router. */
        if (((mai->CapabilityInformation) & (0x02)) != (0x02)) {
    5448:	88 85       	ldd	r24, Y+8	; 0x08
    544a:	81 fd       	sbrc	r24, 1
    544c:	03 c0       	rjmp	.+6      	; 0x5454 <mac_associate_indication_callback+0x58>
            /* Check if it is possible to join the end device. */
            child = zigbee_neighbor_table_add_device();
    544e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <zigbee_neighbor_table_add_device>
    5452:	02 c0       	rjmp	.+4      	; 0x5458 <mac_associate_indication_callback+0x5c>
        } else {
            /* Check if it is possible to join the router. */
            child = zigbee_neighbor_table_add_router();
    5454:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <zigbee_neighbor_table_add_router>
        }
        
        if (NULL == child) {
    5458:	00 97       	sbiw	r24, 0x00	; 0
    545a:	51 f4       	brne	.+20     	; 0x5470 <mac_associate_indication_callback+0x74>
            response->AssocShortAddress = 0xFFFF;
    545c:	8f ef       	ldi	r24, 0xFF	; 255
    545e:	9f ef       	ldi	r25, 0xFF	; 255
    5460:	f8 01       	movw	r30, r16
    5462:	91 87       	std	Z+9, r25	; 0x09
    5464:	80 87       	std	Z+8, r24	; 0x08
            response->status = PAN_AT_CAPACITY;
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	82 87       	std	Z+10, r24	; 0x0a
            /* Also upate the permit joining PIB in the IEEE 802.15.4 MAC to
             * reflect that the system is now not to associate more devices.
             */
            IEEE802_15_4_SET_ASSOCIATION_PERMITTED(false);
    546a:	10 92 bc 11 	sts	0x11BC, r1
    546e:	0b c0       	rjmp	.+22     	; 0x5486 <mac_associate_indication_callback+0x8a>
        } else {
            response->AssocShortAddress = child->NetworkAddress;
    5470:	fc 01       	movw	r30, r24
    5472:	84 8d       	ldd	r24, Z+28	; 0x1c
    5474:	95 8d       	ldd	r25, Z+29	; 0x1d
    5476:	f8 01       	movw	r30, r16
    5478:	91 87       	std	Z+9, r25	; 0x09
    547a:	80 87       	std	Z+8, r24	; 0x08
            nwk_param.join_ind.allocted_address = child->NetworkAddress;
    547c:	90 93 37 12 	sts	0x1237, r25
    5480:	80 93 36 12 	sts	0x1236, r24
            response->status = ASSOCIATION_SUCCESSFUL;
    5484:	12 86       	std	Z+10, r1	; 0x0a
        }
    }
    
    (bool)ieee802_15_4_associate_response(response);
    5486:	c8 01       	movw	r24, r16
    5488:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <ieee802_15_4_associate_response>
    MEM_FREE(response);
    548c:	c8 01       	movw	r24, r16
}
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	1f 91       	pop	r17
    5494:	0f 91       	pop	r16
            response->status = ASSOCIATION_SUCCESSFUL;
        }
    }
    
    (bool)ieee802_15_4_associate_response(response);
    MEM_FREE(response);
    5496:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>
}
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	1f 91       	pop	r17
    54a0:	0f 91       	pop	r16
    54a2:	08 95       	ret

000054a4 <mac_comm_status_indication_callback>:


void mac_comm_status_indication_callback(mlme_comm_status_ind_t *mcsi) {
    54a4:	0f 93       	push	r16
    54a6:	1f 93       	push	r17
    54a8:	cf 93       	push	r28
    54aa:	df 93       	push	r29
    54ac:	8c 01       	movw	r16, r24
    /* Only generate NLME_JOIN.indication if the association was successful. */
    if (MAC_SUCCESS != (mcsi->status)) {
    54ae:	fc 01       	movw	r30, r24
    54b0:	84 89       	ldd	r24, Z+20	; 0x14
    54b2:	81 11       	cpse	r24, r1
    54b4:	3e c0       	rjmp	.+124    	; 0x5532 <mac_comm_status_indication_callback+0x8e>
        return;
    }
    
    /* Try to allocate some memory to build the indication on. */
    nlme_join_ind_t *nji = (nlme_join_ind_t *)MEM_ALLOC(nlme_join_ind_t);
    54b6:	8b e0       	ldi	r24, 0x0B	; 11
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    54be:	ec 01       	movw	r28, r24
    
    /* Verify that memory was allocated. */
    if (NULL == nji) {
    54c0:	00 97       	sbiw	r24, 0x00	; 0
    54c2:	b9 f1       	breq	.+110    	; 0x5532 <mac_comm_status_indication_callback+0x8e>
        return;
    }
    
    /* Build the NLME_JOIN.indication. */
    nji->ShortAddress = nwk_param.join_ind.allocted_address;
    54c4:	80 91 36 12 	lds	r24, 0x1236
    54c8:	90 91 37 12 	lds	r25, 0x1237
    54cc:	de 01       	movw	r26, r28
    54ce:	8d 93       	st	X+, r24
    54d0:	9d 93       	st	X+, r25
    memcpy((void *)(&(nji->ExtendedAddress)), (void *)(&(mcsi->DstAddr)),sizeof(uint64_t));
    54d2:	04 5f       	subi	r16, 0xF4	; 244
    54d4:	1f 4f       	sbci	r17, 0xFF	; 255
    54d6:	88 e0       	ldi	r24, 0x08	; 8
    54d8:	f8 01       	movw	r30, r16
    54da:	01 90       	ld	r0, Z+
    54dc:	0d 92       	st	X+, r0
    54de:	8a 95       	dec	r24
    54e0:	e1 f7       	brne	.-8      	; 0x54da <mac_comm_status_indication_callback+0x36>
    nji->CapabilityInformation = nwk_param.join_ind.capability_information;
    54e2:	80 91 38 12 	lds	r24, 0x1238
    54e6:	8a 87       	std	Y+10, r24	; 0x0a
    
    /* Add information about the newly added node in the Neighbor Table. */
    zigbee_neighbor_table_item_t *child = zigbee_neighbor_table_find(nwk_param.join_ind.allocted_address);
    54e8:	80 91 36 12 	lds	r24, 0x1236
    54ec:	90 91 37 12 	lds	r25, 0x1237
    54f0:	0e 94 b2 2c 	call	0x5964	; 0x5964 <zigbee_neighbor_table_find>
    if (NULL != child) { 
    54f4:	00 97       	sbiw	r24, 0x00	; 0
    54f6:	79 f0       	breq	.+30     	; 0x5516 <mac_comm_status_indication_callback+0x72>
        memcpy((void *)(&(child->ExtendedAddress)), (void *)(&(mcsi->DstAddr)), sizeof(uint64_t));
    54f8:	dc 01       	movw	r26, r24
    54fa:	54 96       	adiw	r26, 0x14	; 20
    54fc:	28 e0       	ldi	r18, 0x08	; 8
    54fe:	f8 01       	movw	r30, r16
    5500:	01 90       	ld	r0, Z+
    5502:	0d 92       	st	X+, r0
    5504:	2a 95       	dec	r18
    5506:	e1 f7       	brne	.-8      	; 0x5500 <mac_comm_status_indication_callback+0x5c>
        memcpy((void *)(&(child->NetworkAddress)), (void *)(&(nwk_param.join_ind.allocted_address)), sizeof(uint16_t));
    5508:	20 91 36 12 	lds	r18, 0x1236
    550c:	30 91 37 12 	lds	r19, 0x1237
    5510:	fc 01       	movw	r30, r24
    5512:	35 8f       	std	Z+29, r19	; 0x1d
    5514:	24 8f       	std	Z+28, r18	; 0x1c
    }
    
    /* Post event. */
    if (true != vrt_post_event(zigbee_join_indication_do_callback, (uint8_t *)nji)) {
    5516:	be 01       	movw	r22, r28
    5518:	84 e8       	ldi	r24, 0x84	; 132
    551a:	99 e2       	ldi	r25, 0x29	; 41
    551c:	0e 94 3f 23 	call	0x467e	; 0x467e <vrt_post_event>
    5520:	81 11       	cpse	r24, r1
    5522:	07 c0       	rjmp	.+14     	; 0x5532 <mac_comm_status_indication_callback+0x8e>
        MEM_FREE(nji);
    5524:	ce 01       	movw	r24, r28
    }
}
    5526:	df 91       	pop	r29
    5528:	cf 91       	pop	r28
    552a:	1f 91       	pop	r17
    552c:	0f 91       	pop	r16
        memcpy((void *)(&(child->NetworkAddress)), (void *)(&(nwk_param.join_ind.allocted_address)), sizeof(uint16_t));
    }
    
    /* Post event. */
    if (true != vrt_post_event(zigbee_join_indication_do_callback, (uint8_t *)nji)) {
        MEM_FREE(nji);
    552e:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>
    }
}
    5532:	df 91       	pop	r29
    5534:	cf 91       	pop	r28
    5536:	1f 91       	pop	r17
    5538:	0f 91       	pop	r16
    553a:	08 95       	ret

0000553c <mac_disassociate_confirm_callback>:
    /* Release allocated memory. */
    MEM_FREE(nli);
}


static void mac_disassociate_confirm_callback(mlme_disassociate_conf_t *mdc) {
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	ec 01       	movw	r28, r24
    /* Check if the MLME_DISASSOCIATE.request was initiated by a ZigBee Coordinator,
     * Router or End-device.
     */
    if (ZIGBEE_TYPE_DEVICE == NWK_NIB_GET_NODE_ROLE()) {
    5542:	80 91 50 12 	lds	r24, 0x1250
    5546:	83 30       	cpi	r24, 0x03	; 3
    5548:	39 f4       	brne	.+14     	; 0x5558 <mac_disassociate_confirm_callback+0x1c>
        /* ZigBee End-device that asked to be relinquished from the network. */
        
        /* Do a full node reset. */
        zigbee_nib_init();
    554a:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <zigbee_nib_init>
        zigbee_neighbor_table_init();
    554e:	0e 94 c6 2b 	call	0x578c	; 0x578c <zigbee_neighbor_table_init>
        ZIGBEE_NWK_SET_STATE(NWK_IDLE);
    5552:	10 92 86 01 	sts	0x0186, r1
    5556:	07 c0       	rjmp	.+14     	; 0x5566 <mac_disassociate_confirm_callback+0x2a>
    } else if (ZIGBEE_TYPE_COORD == NWK_NIB_GET_NODE_ROLE()) {
    5558:	81 30       	cpi	r24, 0x01	; 1
    555a:	11 f4       	brne	.+4      	; 0x5560 <mac_disassociate_confirm_callback+0x24>
        ZIGBEE_NWK_SET_STATE(NWK_FORMED);
    555c:	83 e0       	ldi	r24, 0x03	; 3
    555e:	01 c0       	rjmp	.+2      	; 0x5562 <mac_disassociate_confirm_callback+0x26>
    } else {
        ZIGBEE_NWK_SET_STATE(NWK_STARTED);
    5560:	84 e0       	ldi	r24, 0x04	; 4
    5562:	80 93 86 01 	sts	0x0186, r24
    }
    
    memcpy((void *)(&(nwk_param.leave.confirm->DeviceAddress)), (void *)(&(nwk_param.leave.node_to_leave)), sizeof(uint64_t));
    5566:	e0 91 38 12 	lds	r30, 0x1238
    556a:	f0 91 39 12 	lds	r31, 0x1239
    556e:	70 91 3a 12 	lds	r23, 0x123A
    5572:	60 91 3b 12 	lds	r22, 0x123B
    5576:	50 91 3c 12 	lds	r21, 0x123C
    557a:	40 91 3d 12 	lds	r20, 0x123D
    557e:	30 91 3e 12 	lds	r19, 0x123E
    5582:	20 91 3f 12 	lds	r18, 0x123F
    5586:	90 91 40 12 	lds	r25, 0x1240
    558a:	80 91 41 12 	lds	r24, 0x1241
    558e:	70 83       	st	Z, r23
    5590:	61 83       	std	Z+1, r22	; 0x01
    5592:	52 83       	std	Z+2, r21	; 0x02
    5594:	43 83       	std	Z+3, r20	; 0x03
    5596:	34 83       	std	Z+4, r19	; 0x04
    5598:	25 83       	std	Z+5, r18	; 0x05
    559a:	96 83       	std	Z+6, r25	; 0x06
    559c:	87 83       	std	Z+7, r24	; 0x07
    nwk_param.leave.confirm->Status = mdc->status;
    559e:	a0 91 38 12 	lds	r26, 0x1238
    55a2:	b0 91 39 12 	lds	r27, 0x1239
    55a6:	88 81       	ld	r24, Y
    55a8:	18 96       	adiw	r26, 0x08	; 8
    55aa:	8c 93       	st	X, r24
    55ac:	18 97       	sbiw	r26, 0x08	; 8
    
    nwk_param.leave.nlme_callback_leave_confirm(nwk_param.leave.confirm);
    55ae:	e0 91 36 12 	lds	r30, 0x1236
    55b2:	f0 91 37 12 	lds	r31, 0x1237
    55b6:	cd 01       	movw	r24, r26
}
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    }
    
    memcpy((void *)(&(nwk_param.leave.confirm->DeviceAddress)), (void *)(&(nwk_param.leave.node_to_leave)), sizeof(uint64_t));
    nwk_param.leave.confirm->Status = mdc->status;
    
    nwk_param.leave.nlme_callback_leave_confirm(nwk_param.leave.confirm);
    55bc:	09 94       	ijmp

000055be <zigbee_leave_request>:
 *                 lower layer.
 */
static void mac_disassociate_confirm_callback(mlme_disassociate_conf_t *mdc); 


bool zigbee_leave_request(nlme_leave_req_t *nlr) {
    55be:	af 92       	push	r10
    55c0:	bf 92       	push	r11
    55c2:	cf 92       	push	r12
    55c4:	df 92       	push	r13
    55c6:	ef 92       	push	r14
    55c8:	ff 92       	push	r15
    55ca:	0f 93       	push	r16
    55cc:	1f 93       	push	r17
    55ce:	cf 93       	push	r28
    55d0:	df 93       	push	r29
    55d2:	ec 01       	movw	r28, r24
    /* Perform sanity check on function parameters. */
    if (NULL == nlr) {
    55d4:	00 97       	sbiw	r24, 0x00	; 0
    55d6:	11 f4       	brne	.+4      	; 0x55dc <zigbee_leave_request+0x1e>
        return false;
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	88 c0       	rjmp	.+272    	; 0x56ec <zigbee_leave_request+0x12e>
    }
    
    if (NULL == (nlr->nlme_callback_leave_confirm)) {
    55dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    55de:	9d 85       	ldd	r25, Y+13	; 0x0d
    55e0:	89 2b       	or	r24, r25
    55e2:	d1 f3       	breq	.-12     	; 0x55d8 <zigbee_leave_request+0x1a>
        return false;
    }
    
    mlme_disassociate_req_t* mdr = &nlr->mdr;
    55e4:	8e 01       	movw	r16, r28
    55e6:	09 5e       	subi	r16, 0xE9	; 233
    55e8:	1f 4f       	sbci	r17, 0xFF	; 255
    
    /* Validate the DeviceAddress parameter. */
    if (0 == (nlr->DeviceAddress)) {
    55ea:	b8 80       	ld	r11, Y
    55ec:	c9 80       	ldd	r12, Y+1	; 0x01
    55ee:	da 80       	ldd	r13, Y+2	; 0x02
    55f0:	eb 80       	ldd	r14, Y+3	; 0x03
    55f2:	fc 80       	ldd	r15, Y+4	; 0x04
    55f4:	bd 81       	ldd	r27, Y+5	; 0x05
    55f6:	fe 81       	ldd	r31, Y+6	; 0x06
    55f8:	ef 81       	ldd	r30, Y+7	; 0x07
    55fa:	2b 2d       	mov	r18, r11
    55fc:	3c 2d       	mov	r19, r12
    55fe:	4d 2d       	mov	r20, r13
    5600:	5e 2d       	mov	r21, r14
    5602:	6f 2d       	mov	r22, r15
    5604:	7b 2f       	mov	r23, r27
    5606:	8f 2f       	mov	r24, r31
    5608:	9e 2f       	mov	r25, r30
    560a:	a0 e0       	ldi	r26, 0x00	; 0
    560c:	a0 90 50 12 	lds	r10, 0x1250
    5610:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpdi2_s8>
    5614:	e9 f4       	brne	.+58     	; 0x5650 <zigbee_leave_request+0x92>
        /* The node must be an end device to remove itself. In this implementation
         * it is not possible for a router or coordinator to leave.
         */
        if (ZIGBEE_TYPE_DEVICE != NWK_NIB_GET_NODE_ROLE()) { return false; }
    5616:	83 e0       	ldi	r24, 0x03	; 3
    5618:	a8 12       	cpse	r10, r24
    561a:	de cf       	rjmp	.-68     	; 0x55d8 <zigbee_leave_request+0x1a>
        memcpy((void *)(&(mdr->DeviceAddress)), (void *)(&(IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS())), sizeof(uint64_t));
    561c:	80 91 cf 11 	lds	r24, 0x11CF
    5620:	8f 8b       	std	Y+23, r24	; 0x17
    5622:	80 91 d0 11 	lds	r24, 0x11D0
    5626:	88 8f       	std	Y+24, r24	; 0x18
    5628:	80 91 d1 11 	lds	r24, 0x11D1
    562c:	89 8f       	std	Y+25, r24	; 0x19
    562e:	80 91 d2 11 	lds	r24, 0x11D2
    5632:	8a 8f       	std	Y+26, r24	; 0x1a
    5634:	80 91 d3 11 	lds	r24, 0x11D3
    5638:	8b 8f       	std	Y+27, r24	; 0x1b
    563a:	80 91 d4 11 	lds	r24, 0x11D4
    563e:	8c 8f       	std	Y+28, r24	; 0x1c
    5640:	80 91 d5 11 	lds	r24, 0x11D5
    5644:	8d 8f       	std	Y+29, r24	; 0x1d
    5646:	80 91 d6 11 	lds	r24, 0x11D6
    564a:	8e 8f       	std	Y+30, r24	; 0x1e
        mdr->DisassociateReason = 0x02; // Device wishes to leave the pan.
    564c:	82 e0       	ldi	r24, 0x02	; 2
    564e:	1c c0       	rjmp	.+56     	; 0x5688 <zigbee_leave_request+0xca>
    } else {
        /* Only a ZigBee Coordinator or Router can force other nodes to leave
         * the network.
         */
        if ((ZIGBEE_TYPE_COORD != NWK_NIB_GET_NODE_ROLE()) && 
    5650:	8f ef       	ldi	r24, 0xFF	; 255
    5652:	8a 0d       	add	r24, r10
    5654:	82 30       	cpi	r24, 0x02	; 2
    5656:	08 f0       	brcs	.+2      	; 0x565a <zigbee_leave_request+0x9c>
    5658:	bf cf       	rjmp	.-130    	; 0x55d8 <zigbee_leave_request+0x1a>
        }
        
        /* Check that the node to be relinquished from the network is child of
         * this node, and hence is known in the Neighbor Table.
         */
        zigbee_neighbor_table_item_t *nb_item = zigbee_neighbor_table_find_long(nlr->DeviceAddress);
    565a:	2b 2d       	mov	r18, r11
    565c:	3c 2d       	mov	r19, r12
    565e:	4d 2d       	mov	r20, r13
    5660:	5e 2d       	mov	r21, r14
    5662:	6f 2d       	mov	r22, r15
    5664:	7b 2f       	mov	r23, r27
    5666:	8f 2f       	mov	r24, r31
    5668:	9e 2f       	mov	r25, r30
    566a:	0e 94 cb 2c 	call	0x5996	; 0x5996 <zigbee_neighbor_table_find_long>
        
        if (NULL == nb_item) {
    566e:	00 97       	sbiw	r24, 0x00	; 0
    5670:	09 f4       	brne	.+2      	; 0x5674 <zigbee_leave_request+0xb6>
    5672:	b2 cf       	rjmp	.-156    	; 0x55d8 <zigbee_leave_request+0x1a>
            return false;
        } else {
            /* Delete node. */
            zigbee_neighbor_table_delete(nb_item);
    5674:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <zigbee_neighbor_table_delete>
            memcpy((void *)(&(mdr->DeviceAddress)), (void *)(&(nlr->DeviceAddress)), sizeof(uint64_t));
    5678:	88 e0       	ldi	r24, 0x08	; 8
    567a:	fe 01       	movw	r30, r28
    567c:	d8 01       	movw	r26, r16
    567e:	01 90       	ld	r0, Z+
    5680:	0d 92       	st	X+, r0
    5682:	8a 95       	dec	r24
    5684:	e1 f7       	brne	.-8      	; 0x567e <zigbee_leave_request+0xc0>
            mdr->DisassociateReason = 0x01; // Coordinator wishes that device leaves the pan.
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	8f 8f       	std	Y+31, r24	; 0x1f
     * Coordinator or Router that wishes another node to leave, or a ZigBee
     * End-device that wishes to leave the network. It is time to build the 
     * MLME_DISASSOCIATE.request message, and post it.
     */
    
    mdr->mlme_disassociate_confirm = mac_disassociate_confirm_callback;
    568a:	8e e9       	ldi	r24, 0x9E	; 158
    568c:	9a e2       	ldi	r25, 0x2A	; 42
    568e:	99 a3       	std	Y+33, r25	; 0x21
    5690:	88 a3       	std	Y+32, r24	; 0x20
        
    /* Store some local variable that will be used during the confirm part of
     * this primitive.
     */
    nwk_param.leave.nlme_callback_leave_confirm = nlr->nlme_callback_leave_confirm;
    5692:	8c 85       	ldd	r24, Y+12	; 0x0c
    5694:	9d 85       	ldd	r25, Y+13	; 0x0d
    5696:	90 93 37 12 	sts	0x1237, r25
    569a:	80 93 36 12 	sts	0x1236, r24
    nwk_param.leave.confirm = &(nlr->nlc);
    569e:	ce 01       	movw	r24, r28
    56a0:	0e 96       	adiw	r24, 0x0e	; 14
    56a2:	90 93 39 12 	sts	0x1239, r25
    56a6:	80 93 38 12 	sts	0x1238, r24
    memcpy((void *)(&(nwk_param.leave.node_to_leave)), (void *)(&(nlr->DeviceAddress)), sizeof(uint64_t));
    56aa:	78 81       	ld	r23, Y
    56ac:	69 81       	ldd	r22, Y+1	; 0x01
    56ae:	5a 81       	ldd	r21, Y+2	; 0x02
    56b0:	4b 81       	ldd	r20, Y+3	; 0x03
    56b2:	3c 81       	ldd	r19, Y+4	; 0x04
    56b4:	2d 81       	ldd	r18, Y+5	; 0x05
    56b6:	9e 81       	ldd	r25, Y+6	; 0x06
    56b8:	8f 81       	ldd	r24, Y+7	; 0x07
    56ba:	70 93 3a 12 	sts	0x123A, r23
    56be:	60 93 3b 12 	sts	0x123B, r22
    56c2:	50 93 3c 12 	sts	0x123C, r21
    56c6:	40 93 3d 12 	sts	0x123D, r20
    56ca:	30 93 3e 12 	sts	0x123E, r19
    56ce:	20 93 3f 12 	sts	0x123F, r18
    56d2:	90 93 40 12 	sts	0x1240, r25
    56d6:	80 93 41 12 	sts	0x1241, r24
    
    bool leave_status = false;
    if (true != ieee802_15_4_disassociate_request(mdr)) {
    56da:	c8 01       	movw	r24, r16
    56dc:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <ieee802_15_4_disassociate_request>
    56e0:	88 23       	and	r24, r24
    56e2:	09 f4       	brne	.+2      	; 0x56e6 <zigbee_leave_request+0x128>
    56e4:	79 cf       	rjmp	.-270    	; 0x55d8 <zigbee_leave_request+0x1a>
    } else {
        ZIGBEE_NWK_SET_STATE(NWK_LEAVING);       
    56e6:	96 e0       	ldi	r25, 0x06	; 6
    56e8:	90 93 86 01 	sts	0x0186, r25
        return true;
    }
    
    return leave_status;
}
    56ec:	df 91       	pop	r29
    56ee:	cf 91       	pop	r28
    56f0:	1f 91       	pop	r17
    56f2:	0f 91       	pop	r16
    56f4:	ff 90       	pop	r15
    56f6:	ef 90       	pop	r14
    56f8:	df 90       	pop	r13
    56fa:	cf 90       	pop	r12
    56fc:	bf 90       	pop	r11
    56fe:	af 90       	pop	r10
    5700:	08 95       	ret

00005702 <mac_disassociate_indication_callback>:


/*                            IEEE 802.15.4 MAC Callbacks                     */


void mac_disassociate_indication_callback(mlme_disassociate_ind_t *mdi) {
    5702:	ef 92       	push	r14
    5704:	ff 92       	push	r15
    5706:	0f 93       	push	r16
    5708:	1f 93       	push	r17
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	ec 01       	movw	r28, r24
    /* This message can be received by a ZigBee Coordinator or Router that a
     * a child ZigBee End-device wishes to leave the network. Or by a ZigBee
     * End-device that is asked to leave the newtork.
     */
    if ((ZIGBEE_TYPE_COORD == NWK_NIB_GET_NODE_ROLE()) ||
    5710:	80 91 50 12 	lds	r24, 0x1250
    5714:	81 50       	subi	r24, 0x01	; 1
    5716:	82 30       	cpi	r24, 0x02	; 2
    5718:	88 f4       	brcc	.+34     	; 0x573c <mac_disassociate_indication_callback+0x3a>
        (ZIGBEE_TYPE_ROUTER == NWK_NIB_GET_NODE_ROLE())) {
        /* The ZigBee Coordinator or Router must remove this node from its
         * Neighbor Table.
         */
        zigbee_neighbor_table_item_t *nb_item = zigbee_neighbor_table_find_long(mdi->DeviceAddress);
    571a:	28 81       	ld	r18, Y
    571c:	39 81       	ldd	r19, Y+1	; 0x01
    571e:	4a 81       	ldd	r20, Y+2	; 0x02
    5720:	5b 81       	ldd	r21, Y+3	; 0x03
    5722:	6c 81       	ldd	r22, Y+4	; 0x04
    5724:	7d 81       	ldd	r23, Y+5	; 0x05
    5726:	8e 81       	ldd	r24, Y+6	; 0x06
    5728:	9f 81       	ldd	r25, Y+7	; 0x07
    572a:	0e 94 cb 2c 	call	0x5996	; 0x5996 <zigbee_neighbor_table_find_long>
        if (NULL != nb_item) {
    572e:	00 97       	sbiw	r24, 0x00	; 0
    5730:	29 f0       	breq	.+10     	; 0x573c <mac_disassociate_indication_callback+0x3a>
            /* Delete node, and allow joining again. */
            zigbee_neighbor_table_delete(nb_item);
    5732:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <zigbee_neighbor_table_delete>
            IEEE802_15_4_SET_ASSOCIATION_PERMITTED(true);
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	80 93 bc 11 	sts	0x11BC, r24
    } else {
        /* The ZigBee End-device should reset itself and go to idle. */
    }
    
    /* Now build the NLME_LEAVE_indication and call the appropriate callback. */
    zigbee_leave_indication_t nli_ind = zigbee_get_nlme_leave_indication();
    573c:	0e 94 5d 26 	call	0x4cba	; 0x4cba <zigbee_get_nlme_leave_indication>
    5740:	7c 01       	movw	r14, r24
    
    if (NULL == nli_ind) {
    5742:	00 97       	sbiw	r24, 0x00	; 0
    5744:	e1 f0       	breq	.+56     	; 0x577e <mac_disassociate_indication_callback+0x7c>
        return;
    }
    
    /* Try to allocate some memory to build the indication on. */
    nlme_leave_ind_t *nli = (nlme_leave_ind_t *)MEM_ALLOC(nlme_leave_ind_t);
    5746:	89 e0       	ldi	r24, 0x09	; 9
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	0e 94 3c 24 	call	0x4878	; 0x4878 <vrt_mem_alloc>
    574e:	8c 01       	movw	r16, r24
    
    /* Verify that memory was allocated. */
    if (NULL == nli) {
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	a9 f0       	breq	.+42     	; 0x577e <mac_disassociate_indication_callback+0x7c>
        return;
    }
    
    /* Build indication message. */
    
    memcpy((void *)(&(nli->DeviceAddress)), (void *)(&(mdi->DeviceAddress)), sizeof(uint64_t));
    5754:	88 e0       	ldi	r24, 0x08	; 8
    5756:	fe 01       	movw	r30, r28
    5758:	d8 01       	movw	r26, r16
    575a:	01 90       	ld	r0, Z+
    575c:	0d 92       	st	X+, r0
    575e:	8a 95       	dec	r24
    5760:	e1 f7       	brne	.-8      	; 0x575a <mac_disassociate_indication_callback+0x58>
    nli->Rejoin = false;
    5762:	f8 01       	movw	r30, r16
    5764:	10 86       	std	Z+8, r1	; 0x08
    
    /* Execute the callback. */
    nli_ind(nli);
    5766:	c8 01       	movw	r24, r16
    5768:	f7 01       	movw	r30, r14
    576a:	09 95       	icall
    
    /* Release allocated memory. */
    MEM_FREE(nli);
    576c:	c8 01       	movw	r24, r16
}
    576e:	df 91       	pop	r29
    5770:	cf 91       	pop	r28
    5772:	1f 91       	pop	r17
    5774:	0f 91       	pop	r16
    5776:	ff 90       	pop	r15
    5778:	ef 90       	pop	r14
    
    /* Execute the callback. */
    nli_ind(nli);
    
    /* Release allocated memory. */
    MEM_FREE(nli);
    577a:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <vrt_mem_free>
}
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	1f 91       	pop	r17
    5784:	0f 91       	pop	r16
    5786:	ff 90       	pop	r15
    5788:	ef 90       	pop	r14
    578a:	08 95       	ret

0000578c <zigbee_neighbor_table_init>:
static uint8_t devices_joined; //!< Total number of end devices the node has joined.
/*================================= PROTOTYPES       =========================*/

void zigbee_neighbor_table_init(void) {
    /* Initialize the linked list. */
    neighbors = 0;
    578c:	10 92 44 12 	sts	0x1244, r1
    
    last = NULL;
    5790:	10 92 43 12 	sts	0x1243, r1
    5794:	10 92 42 12 	sts	0x1242, r1
    first = NULL;
    5798:	10 92 46 12 	sts	0x1246, r1
    579c:	10 92 45 12 	sts	0x1245, r1
    
    /* Initialize the list of free zigbee_neighbor_table_item_t's */
    free_list = neighbor_table;
    57a0:	88 e7       	ldi	r24, 0x78	; 120
    57a2:	9d e0       	ldi	r25, 0x0D	; 13
    57a4:	90 93 77 0d 	sts	0x0D77, r25
    57a8:	80 93 76 0d 	sts	0x0D76, r24
    zigbee_neighbor_table_item_t **link = (zigbee_neighbor_table_item_t **)neighbor_table;
    zigbee_neighbor_table_item_t *next_item  = (zigbee_neighbor_table_item_t *)((uint16_t)neighbor_table + sizeof(zigbee_neighbor_table_item_t));
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    last = NULL;
    first = NULL;
    
    /* Initialize the list of free zigbee_neighbor_table_item_t's */
    free_list = neighbor_table;
    zigbee_neighbor_table_item_t **link = (zigbee_neighbor_table_item_t **)neighbor_table;
    57b0:	e8 e7       	ldi	r30, 0x78	; 120
    57b2:	fd e0       	ldi	r31, 0x0D	; 13
    57b4:	9c 01       	movw	r18, r24
    57b6:	23 56       	subi	r18, 0x63	; 99
    57b8:	32 4f       	sbci	r19, 0xF2	; 242
    zigbee_neighbor_table_item_t *next_item  = (zigbee_neighbor_table_item_t *)((uint16_t)neighbor_table + sizeof(zigbee_neighbor_table_item_t));
    
    /* Set-up links between the free items in the queue. */
    for (uint8_t i = 0; i < (ZIGBEE_MAX_NMBR_OF_CHILDREN - 1); i++) {
        *link = (zigbee_neighbor_table_item_t *)next_item;
    57ba:	31 83       	std	Z+1, r19	; 0x01
    57bc:	20 83       	st	Z, r18
    57be:	85 96       	adiw	r24, 0x25	; 37
    free_list = neighbor_table;
    zigbee_neighbor_table_item_t **link = (zigbee_neighbor_table_item_t **)neighbor_table;
    zigbee_neighbor_table_item_t *next_item  = (zigbee_neighbor_table_item_t *)((uint16_t)neighbor_table + sizeof(zigbee_neighbor_table_item_t));
    
    /* Set-up links between the free items in the queue. */
    for (uint8_t i = 0; i < (ZIGBEE_MAX_NMBR_OF_CHILDREN - 1); i++) {
    57c0:	88 37       	cpi	r24, 0x78	; 120
    57c2:	43 e0       	ldi	r20, 0x03	; 3
    57c4:	94 07       	cpc	r25, r20
    57c6:	11 f0       	breq	.+4      	; 0x57cc <zigbee_neighbor_table_init+0x40>
    57c8:	f9 01       	movw	r30, r18
    57ca:	f4 cf       	rjmp	.-24     	; 0x57b4 <zigbee_neighbor_table_init+0x28>
        link = (zigbee_neighbor_table_item_t **)next_item;
        next_item++;
    }
    
    /* Set the last link to NULL and the number of free items.  */
    *link = NULL;
    57cc:	10 92 f1 10 	sts	0x10F1, r1
    57d0:	10 92 f0 10 	sts	0x10F0, r1
    items_in_free_list = ZIGBEE_MAX_NMBR_OF_CHILDREN;
    57d4:	89 e1       	ldi	r24, 0x19	; 25
    57d6:	80 93 75 0d 	sts	0x0D75, r24
    
    routers_joined = 0;
    57da:	10 92 74 0d 	sts	0x0D74, r1
    devices_joined = 0;
    57de:	10 92 73 0d 	sts	0x0D73, r1
    57e2:	08 95       	ret

000057e4 <zigbee_neighbor_table_get>:
}


zigbee_neighbor_table_item_t* zigbee_neighbor_table_get(void) {
    57e4:	cf 93       	push	r28
    57e6:	df 93       	push	r29
    57e8:	1f 92       	push	r1
    57ea:	cd b7       	in	r28, 0x3d	; 61
    57ec:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is any packets left to allocate. */
    ENTER_CRITICAL_REGION();
    57ee:	8f b7       	in	r24, 0x3f	; 63
    57f0:	89 83       	std	Y+1, r24	; 0x01
    57f2:	f8 94       	cli

    if (0 == items_in_free_list) {
    57f4:	20 91 75 0d 	lds	r18, 0x0D75
    57f8:	21 11       	cpse	r18, r1
    57fa:	05 c0       	rjmp	.+10     	; 0x5806 <zigbee_neighbor_table_get+0x22>
        LEAVE_CRITICAL_REGION();
    57fc:	89 81       	ldd	r24, Y+1	; 0x01
    57fe:	8f bf       	out	0x3f, r24	; 63
        return (zigbee_neighbor_table_item_t*)NULL;
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	90 e0       	ldi	r25, 0x00	; 0
    5804:	10 c0       	rjmp	.+32     	; 0x5826 <zigbee_neighbor_table_get+0x42>
    }
    
    /* Get hold of the first free packet available from the queue. */
    zigbee_neighbor_table_item_t *allocated = free_list;
    5806:	e0 91 76 0d 	lds	r30, 0x0D76
    580a:	f0 91 77 0d 	lds	r31, 0x0D77
    free_list = *(zigbee_neighbor_table_item_t **)allocated;
    580e:	80 81       	ld	r24, Z
    5810:	91 81       	ldd	r25, Z+1	; 0x01
    5812:	90 93 77 0d 	sts	0x0D77, r25
    5816:	80 93 76 0d 	sts	0x0D76, r24
    items_in_free_list--;
    581a:	21 50       	subi	r18, 0x01	; 1
    581c:	20 93 75 0d 	sts	0x0D75, r18
    
    LEAVE_CRITICAL_REGION();
    5820:	89 81       	ldd	r24, Y+1	; 0x01
    5822:	8f bf       	out	0x3f, r24	; 63
    
    return allocated;
    5824:	cf 01       	movw	r24, r30
}
    5826:	0f 90       	pop	r0
    5828:	df 91       	pop	r29
    582a:	cf 91       	pop	r28
    582c:	08 95       	ret

0000582e <zigbee_neighbor_table_put>:


void zigbee_neighbor_table_put(zigbee_neighbor_table_item_t *nb_item) {
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	1f 92       	push	r1
    5834:	cd b7       	in	r28, 0x3d	; 61
    5836:	de b7       	in	r29, 0x3e	; 62
    /* Check if all memory already has been freed, and that it is not NULL. */
    ENTER_CRITICAL_REGION();
    5838:	2f b7       	in	r18, 0x3f	; 63
    583a:	29 83       	std	Y+1, r18	; 0x01
    583c:	f8 94       	cli
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN == items_in_free_list) {
    583e:	40 91 75 0d 	lds	r20, 0x0D75
    5842:	49 31       	cpi	r20, 0x19	; 25
    5844:	81 f0       	breq	.+32     	; 0x5866 <zigbee_neighbor_table_put+0x38>
        LEAVE_CRITICAL_REGION();
        return;
    }
    
    if (((zigbee_neighbor_table_item_t *)NULL) == nb_item) {
    5846:	00 97       	sbiw	r24, 0x00	; 0
    5848:	71 f0       	breq	.+28     	; 0x5866 <zigbee_neighbor_table_put+0x38>
        LEAVE_CRITICAL_REGION();
        return;
    }
    
    /* There is room for this packet. Added it to the list of free packets. */
    *(zigbee_neighbor_table_item_t **)nb_item = free_list;
    584a:	20 91 76 0d 	lds	r18, 0x0D76
    584e:	30 91 77 0d 	lds	r19, 0x0D77
    5852:	fc 01       	movw	r30, r24
    5854:	31 83       	std	Z+1, r19	; 0x01
    5856:	20 83       	st	Z, r18
    free_list = nb_item;
    5858:	90 93 77 0d 	sts	0x0D77, r25
    585c:	80 93 76 0d 	sts	0x0D76, r24
    items_in_free_list++;
    5860:	4f 5f       	subi	r20, 0xFF	; 255
    5862:	40 93 75 0d 	sts	0x0D75, r20
    LEAVE_CRITICAL_REGION();
    5866:	89 81       	ldd	r24, Y+1	; 0x01
    5868:	8f bf       	out	0x3f, r24	; 63
}
    586a:	0f 90       	pop	r0
    586c:	df 91       	pop	r29
    586e:	cf 91       	pop	r28
    5870:	08 95       	ret

00005872 <zigbee_neighbor_table_append>:


void zigbee_neighbor_table_append(zigbee_neighbor_table_item_t *nb_item) {
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	1f 92       	push	r1
    5878:	cd b7       	in	r28, 0x3d	; 61
    587a:	de b7       	in	r29, 0x3e	; 62
    587c:	fc 01       	movw	r30, r24
    if (NULL == nb_item) { return; }
    587e:	00 97       	sbiw	r24, 0x00	; 0
    5880:	31 f1       	breq	.+76     	; 0x58ce <zigbee_neighbor_table_append+0x5c>
    
    /* Insert at the end of the neighbor table. */
    ENTER_CRITICAL_REGION();
    5882:	8f b7       	in	r24, 0x3f	; 63
    5884:	89 83       	std	Y+1, r24	; 0x01
    5886:	f8 94       	cli
    
    if (NULL == last) {
    5888:	a0 91 42 12 	lds	r26, 0x1242
    588c:	b0 91 43 12 	lds	r27, 0x1243
    5890:	10 97       	sbiw	r26, 0x00	; 0
    5892:	59 f4       	brne	.+22     	; 0x58aa <zigbee_neighbor_table_append+0x38>
        last = nb_item;
    5894:	f0 93 43 12 	sts	0x1243, r31
    5898:	e0 93 42 12 	sts	0x1242, r30
        first = nb_item;
    589c:	f0 93 46 12 	sts	0x1246, r31
    58a0:	e0 93 45 12 	sts	0x1245, r30
        
        nb_item->prev = NULL;
    58a4:	13 82       	std	Z+3, r1	; 0x03
    58a6:	12 82       	std	Z+2, r1	; 0x02
    58a8:	09 c0       	rjmp	.+18     	; 0x58bc <zigbee_neighbor_table_append+0x4a>
    } else {
        last->next = nb_item;
    58aa:	11 96       	adiw	r26, 0x01	; 1
    58ac:	fc 93       	st	X, r31
    58ae:	ee 93       	st	-X, r30
        nb_item->prev = last;
    58b0:	b3 83       	std	Z+3, r27	; 0x03
    58b2:	a2 83       	std	Z+2, r26	; 0x02
        last = nb_item;
    58b4:	f0 93 43 12 	sts	0x1243, r31
    58b8:	e0 93 42 12 	sts	0x1242, r30
    }
    
    nb_item->next = NULL;
    58bc:	11 82       	std	Z+1, r1	; 0x01
    58be:	10 82       	st	Z, r1
    
    LEAVE_CRITICAL_REGION();
    58c0:	89 81       	ldd	r24, Y+1	; 0x01
    58c2:	8f bf       	out	0x3f, r24	; 63
    neighbors++;
    58c4:	80 91 44 12 	lds	r24, 0x1244
    58c8:	8f 5f       	subi	r24, 0xFF	; 255
    58ca:	80 93 44 12 	sts	0x1244, r24
}
    58ce:	0f 90       	pop	r0
    58d0:	df 91       	pop	r29
    58d2:	cf 91       	pop	r28
    58d4:	08 95       	ret

000058d6 <zigbee_neighbor_table_delete>:


void zigbee_neighbor_table_delete(zigbee_neighbor_table_item_t *nb_item) {
    58d6:	cf 93       	push	r28
    58d8:	df 93       	push	r29
    58da:	1f 92       	push	r1
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    if (NULL == nb_item) {
    58e0:	00 97       	sbiw	r24, 0x00	; 0
    58e2:	e1 f1       	breq	.+120    	; 0x595c <zigbee_neighbor_table_delete+0x86>
        return;
    }
    
    ENTER_CRITICAL_REGION();
    58e4:	2f b7       	in	r18, 0x3f	; 63
    58e6:	29 83       	std	Y+1, r18	; 0x01
    58e8:	f8 94       	cli
    
    if (ZIGBEE_TYPE_ROUTER == (nb_item->DeviceType)) {
    58ea:	dc 01       	movw	r26, r24
    58ec:	5e 96       	adiw	r26, 0x1e	; 30
    58ee:	2c 91       	ld	r18, X
    58f0:	22 30       	cpi	r18, 0x02	; 2
    58f2:	31 f4       	brne	.+12     	; 0x5900 <zigbee_neighbor_table_delete+0x2a>
        routers_joined--;          
    58f4:	20 91 74 0d 	lds	r18, 0x0D74
    58f8:	21 50       	subi	r18, 0x01	; 1
    58fa:	20 93 74 0d 	sts	0x0D74, r18
    58fe:	05 c0       	rjmp	.+10     	; 0x590a <zigbee_neighbor_table_delete+0x34>
    } else {
        devices_joined--;      
    5900:	20 91 73 0d 	lds	r18, 0x0D73
    5904:	21 50       	subi	r18, 0x01	; 1
    5906:	20 93 73 0d 	sts	0x0D73, r18
    }
    
    if (NULL == (nb_item->prev)) {
    590a:	dc 01       	movw	r26, r24
    590c:	12 96       	adiw	r26, 0x02	; 2
    590e:	ed 91       	ld	r30, X+
    5910:	fc 91       	ld	r31, X
    5912:	13 97       	sbiw	r26, 0x03	; 3
    5914:	2d 91       	ld	r18, X+
    5916:	3c 91       	ld	r19, X
    5918:	30 97       	sbiw	r30, 0x00	; 0
    591a:	29 f4       	brne	.+10     	; 0x5926 <zigbee_neighbor_table_delete+0x50>
        first = nb_item->next;
    591c:	30 93 46 12 	sts	0x1246, r19
    5920:	20 93 45 12 	sts	0x1245, r18
    5924:	02 c0       	rjmp	.+4      	; 0x592a <zigbee_neighbor_table_delete+0x54>
    } else {
        nb_item->prev->next = nb_item->next;    
    5926:	31 83       	std	Z+1, r19	; 0x01
    5928:	20 83       	st	Z, r18
    }
    
    if (NULL == (nb_item->next)) {
    592a:	dc 01       	movw	r26, r24
    592c:	2d 91       	ld	r18, X+
    592e:	3c 91       	ld	r19, X
    5930:	21 15       	cp	r18, r1
    5932:	31 05       	cpc	r19, r1
    5934:	29 f4       	brne	.+10     	; 0x5940 <zigbee_neighbor_table_delete+0x6a>
        last = nb_item->prev;
    5936:	f0 93 43 12 	sts	0x1243, r31
    593a:	e0 93 42 12 	sts	0x1242, r30
    593e:	05 c0       	rjmp	.+10     	; 0x594a <zigbee_neighbor_table_delete+0x74>
    } else {
        nb_item->next->prev = nb_item->prev;
    5940:	d9 01       	movw	r26, r18
    5942:	13 96       	adiw	r26, 0x03	; 3
    5944:	fc 93       	st	X, r31
    5946:	ee 93       	st	-X, r30
    5948:	12 97       	sbiw	r26, 0x02	; 2
    }
    
    LEAVE_CRITICAL_REGION();
    594a:	29 81       	ldd	r18, Y+1	; 0x01
    594c:	2f bf       	out	0x3f, r18	; 63
    
    neighbors--;
    594e:	20 91 44 12 	lds	r18, 0x1244
    5952:	21 50       	subi	r18, 0x01	; 1
    5954:	20 93 44 12 	sts	0x1244, r18
    
    /* Free the item as well into the list of free Neighbor Table Items. */
    zigbee_neighbor_table_put(nb_item);
    5958:	0e 94 17 2c 	call	0x582e	; 0x582e <zigbee_neighbor_table_put>
}
    595c:	0f 90       	pop	r0
    595e:	df 91       	pop	r29
    5960:	cf 91       	pop	r28
    5962:	08 95       	ret

00005964 <zigbee_neighbor_table_find>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find(uint16_t short_address) {
    if (0 == neighbors) {
    5964:	50 91 44 12 	lds	r21, 0x1244
    5968:	55 23       	and	r21, r21
    596a:	81 f0       	breq	.+32     	; 0x598c <zigbee_neighbor_table_find+0x28>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *link = first;
    596c:	e0 91 45 12 	lds	r30, 0x1245
    5970:	f0 91 46 12 	lds	r31, 0x1246
    
    zigbee_neighbor_table_item_t *scan_result = NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    5974:	40 e0       	ldi	r20, 0x00	; 0
        if (short_address == (link->NetworkAddress)) {
    5976:	24 8d       	ldd	r18, Z+28	; 0x1c
    5978:	35 8d       	ldd	r19, Z+29	; 0x1d
    597a:	82 17       	cp	r24, r18
    597c:	93 07       	cpc	r25, r19
    597e:	49 f0       	breq	.+18     	; 0x5992 <zigbee_neighbor_table_find+0x2e>
            scan_result = link;
            break;
        }
        
        link = link->next;
    5980:	01 90       	ld	r0, Z+
    5982:	f0 81       	ld	r31, Z
    5984:	e0 2d       	mov	r30, r0
    }
    
    zigbee_neighbor_table_item_t *link = first;
    
    zigbee_neighbor_table_item_t *scan_result = NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    5986:	4f 5f       	subi	r20, 0xFF	; 255
    5988:	45 13       	cpse	r20, r21
    598a:	f5 cf       	rjmp	.-22     	; 0x5976 <zigbee_neighbor_table_find+0x12>
}


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find(uint16_t short_address) {
    if (0 == neighbors) {
        return (zigbee_neighbor_table_item_t *)NULL;
    598c:	80 e0       	ldi	r24, 0x00	; 0
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	08 95       	ret
    5992:	cf 01       	movw	r24, r30
        
        link = link->next;
    }
    
    return scan_result;
}
    5994:	08 95       	ret

00005996 <zigbee_neighbor_table_find_long>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find_long(uint64_t long_address) {
    5996:	4f 92       	push	r4
    5998:	5f 92       	push	r5
    599a:	6f 92       	push	r6
    599c:	7f 92       	push	r7
    599e:	8f 92       	push	r8
    59a0:	9f 92       	push	r9
    59a2:	af 92       	push	r10
    59a4:	bf 92       	push	r11
    59a6:	cf 92       	push	r12
    59a8:	df 92       	push	r13
    59aa:	ef 92       	push	r14
    59ac:	ff 92       	push	r15
    59ae:	0f 93       	push	r16
    59b0:	1f 93       	push	r17
    59b2:	cf 93       	push	r28
    59b4:	df 93       	push	r29
    59b6:	e9 01       	movw	r28, r18
    59b8:	94 2e       	mov	r9, r20
    59ba:	85 2e       	mov	r8, r21
    59bc:	76 2e       	mov	r7, r22
    59be:	67 2e       	mov	r6, r23
    59c0:	58 2e       	mov	r5, r24
    59c2:	49 2e       	mov	r4, r25
    if (0 == neighbors) {
    59c4:	b0 91 44 12 	lds	r27, 0x1244
    59c8:	bb 23       	and	r27, r27
    59ca:	e9 f0       	breq	.+58     	; 0x5a06 <zigbee_neighbor_table_find_long+0x70>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *link = first;
    59cc:	e0 91 45 12 	lds	r30, 0x1245
    59d0:	f0 91 46 12 	lds	r31, 0x1246
    
    zigbee_neighbor_table_item_t *scan_result = (zigbee_neighbor_table_item_t *)NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    59d4:	a0 e0       	ldi	r26, 0x00	; 0
        if (long_address == (link->ExtendedAddress)) {
    59d6:	a4 88       	ldd	r10, Z+20	; 0x14
    59d8:	b5 88       	ldd	r11, Z+21	; 0x15
    59da:	c6 88       	ldd	r12, Z+22	; 0x16
    59dc:	d7 88       	ldd	r13, Z+23	; 0x17
    59de:	e0 8c       	ldd	r14, Z+24	; 0x18
    59e0:	f1 8c       	ldd	r15, Z+25	; 0x19
    59e2:	02 8d       	ldd	r16, Z+26	; 0x1a
    59e4:	13 8d       	ldd	r17, Z+27	; 0x1b
    59e6:	9e 01       	movw	r18, r28
    59e8:	49 2d       	mov	r20, r9
    59ea:	58 2d       	mov	r21, r8
    59ec:	67 2d       	mov	r22, r7
    59ee:	76 2d       	mov	r23, r6
    59f0:	85 2d       	mov	r24, r5
    59f2:	94 2d       	mov	r25, r4
    59f4:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__cmpdi2>
    59f8:	49 f0       	breq	.+18     	; 0x5a0c <zigbee_neighbor_table_find_long+0x76>
            scan_result = link;
            break;
        }
        
        link = link->next;
    59fa:	01 90       	ld	r0, Z+
    59fc:	f0 81       	ld	r31, Z
    59fe:	e0 2d       	mov	r30, r0
    }
    
    zigbee_neighbor_table_item_t *link = first;
    
    zigbee_neighbor_table_item_t *scan_result = (zigbee_neighbor_table_item_t *)NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    5a00:	af 5f       	subi	r26, 0xFF	; 255
    5a02:	ab 13       	cpse	r26, r27
    5a04:	e8 cf       	rjmp	.-48     	; 0x59d6 <zigbee_neighbor_table_find_long+0x40>
}


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find_long(uint64_t long_address) {
    if (0 == neighbors) {
        return (zigbee_neighbor_table_item_t *)NULL;
    5a06:	80 e0       	ldi	r24, 0x00	; 0
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	01 c0       	rjmp	.+2      	; 0x5a0e <zigbee_neighbor_table_find_long+0x78>
    5a0c:	cf 01       	movw	r24, r30
        
        link = link->next;
    }
    
    return scan_result;
}
    5a0e:	df 91       	pop	r29
    5a10:	cf 91       	pop	r28
    5a12:	1f 91       	pop	r17
    5a14:	0f 91       	pop	r16
    5a16:	ff 90       	pop	r15
    5a18:	ef 90       	pop	r14
    5a1a:	df 90       	pop	r13
    5a1c:	cf 90       	pop	r12
    5a1e:	bf 90       	pop	r11
    5a20:	af 90       	pop	r10
    5a22:	9f 90       	pop	r9
    5a24:	8f 90       	pop	r8
    5a26:	7f 90       	pop	r7
    5a28:	6f 90       	pop	r6
    5a2a:	5f 90       	pop	r5
    5a2c:	4f 90       	pop	r4
    5a2e:	08 95       	ret

00005a30 <zigbee_neighbor_table_add_router>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_add_router(void) {
    5a30:	cf 93       	push	r28
    5a32:	df 93       	push	r29
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN <= (devices_joined + routers_joined)) {
    5a34:	20 91 74 0d 	lds	r18, 0x0D74
    5a38:	30 91 73 0d 	lds	r19, 0x0D73
    5a3c:	82 2f       	mov	r24, r18
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	83 0f       	add	r24, r19
    5a42:	91 1d       	adc	r25, r1
    5a44:	49 97       	sbiw	r24, 0x19	; 25
    5a46:	c4 f4       	brge	.+48     	; 0x5a78 <zigbee_neighbor_table_add_router+0x48>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS <= routers_joined) {
    5a48:	21 11       	cpse	r18, r1
    5a4a:	16 c0       	rjmp	.+44     	; 0x5a78 <zigbee_neighbor_table_add_router+0x48>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *router = zigbee_neighbor_table_get();
    5a4c:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <zigbee_neighbor_table_get>
    5a50:	ec 01       	movw	r28, r24
    
    if (NULL == router) {
    5a52:	00 97       	sbiw	r24, 0x00	; 0
    5a54:	89 f0       	breq	.+34     	; 0x5a78 <zigbee_neighbor_table_add_router+0x48>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    /* Allocate short address. */
    uint16_t router_address = 1 + NWK_NIB_GET_NWK_ADDRESS();
    5a56:	80 91 62 12 	lds	r24, 0x1262
    5a5a:	90 91 63 12 	lds	r25, 0x1263
    5a5e:	01 96       	adiw	r24, 0x01	; 1
        
        router_address += NWK_NIB_GET_ADDRESS_INCREMENT();
    }
    
    /* Set address and router information. */
    router->NetworkAddress = router_address;
    5a60:	9d 8f       	std	Y+29, r25	; 0x1d
    5a62:	8c 8f       	std	Y+28, r24	; 0x1c
    router->DeviceType = ZIGBEE_TYPE_ROUTER;
    5a64:	82 e0       	ldi	r24, 0x02	; 2
    5a66:	8e 8f       	std	Y+30, r24	; 0x1e
        
    /* Update number of routers joined. */
    routers_joined++;
    5a68:	81 e0       	ldi	r24, 0x01	; 1
    5a6a:	80 93 74 0d 	sts	0x0D74, r24
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(router);
    5a6e:	ce 01       	movw	r24, r28
    5a70:	0e 94 39 2c 	call	0x5872	; 0x5872 <zigbee_neighbor_table_append>
    
    return router;
    5a74:	ce 01       	movw	r24, r28
    5a76:	02 c0       	rjmp	.+4      	; 0x5a7c <zigbee_neighbor_table_add_router+0x4c>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
}
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	08 95       	ret

00005a82 <zigbee_neighbor_table_add_device>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_add_device(void) {
    5a82:	df 92       	push	r13
    5a84:	ef 92       	push	r14
    5a86:	ff 92       	push	r15
    5a88:	0f 93       	push	r16
    5a8a:	1f 93       	push	r17
    5a8c:	cf 93       	push	r28
    5a8e:	df 93       	push	r29
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN <= (devices_joined + routers_joined)) {
    5a90:	d0 90 73 0d 	lds	r13, 0x0D73
    5a94:	80 91 74 0d 	lds	r24, 0x0D74
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	8d 0d       	add	r24, r13
    5a9c:	91 1d       	adc	r25, r1
    5a9e:	49 97       	sbiw	r24, 0x19	; 25
    5aa0:	1c f0       	brlt	.+6      	; 0x5aa8 <zigbee_neighbor_table_add_device+0x26>
        return (zigbee_neighbor_table_item_t *)NULL;
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	2b c0       	rjmp	.+86     	; 0x5afe <zigbee_neighbor_table_add_device+0x7c>
    }
    
    zigbee_neighbor_table_item_t *device = zigbee_neighbor_table_get();
    5aa8:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <zigbee_neighbor_table_get>
    5aac:	ec 01       	movw	r28, r24
    
    if (NULL == device) {
    5aae:	00 97       	sbiw	r24, 0x00	; 0
    5ab0:	c1 f3       	breq	.-16     	; 0x5aa2 <zigbee_neighbor_table_add_device+0x20>
        return device;
    }
    
    /* Allocate short address. */
    uint16_t device_address = 1 + NWK_NIB_GET_NWK_ADDRESS() + \
    5ab2:	00 91 4e 12 	lds	r16, 0x124E
    5ab6:	10 91 4f 12 	lds	r17, 0x124F
    5aba:	80 91 62 12 	lds	r24, 0x1262
    5abe:	90 91 63 12 	lds	r25, 0x1263
    5ac2:	08 0f       	add	r16, r24
    5ac4:	19 1f       	adc	r17, r25
    5ac6:	0f 5f       	subi	r16, 0xFF	; 255
    5ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    5aca:	78 01       	movw	r14, r16
    5acc:	8e 2d       	mov	r24, r14
    5ace:	80 1b       	sub	r24, r16
                              (NWK_NIB_GET_ADDRESS_INCREMENT() * ZIGBEE_MAX_NMBR_OF_ROUTERS);
        
    /* Look for potential holes in the tree addressing scheme. Ex. a node that  */
    for (uint8_t i = 0; i < devices_joined; i++) {
    5ad0:	8d 15       	cp	r24, r13
    5ad2:	28 f4       	brcc	.+10     	; 0x5ade <zigbee_neighbor_table_add_device+0x5c>
        zigbee_neighbor_table_item_t *this_device = zigbee_neighbor_table_find(device_address);
    5ad4:	c7 01       	movw	r24, r14
    5ad6:	0e 94 b2 2c 	call	0x5964	; 0x5964 <zigbee_neighbor_table_find>
            
        if (NULL == this_device) {
    5ada:	89 2b       	or	r24, r25
    5adc:	61 f4       	brne	.+24     	; 0x5af6 <zigbee_neighbor_table_add_device+0x74>
        }
        
        device_address++;
    }
    
    device->NetworkAddress = device_address;
    5ade:	fd 8e       	std	Y+29, r15	; 0x1d
    5ae0:	ec 8e       	std	Y+28, r14	; 0x1c
    device->DeviceType = ZIGBEE_TYPE_DEVICE;
    5ae2:	83 e0       	ldi	r24, 0x03	; 3
    5ae4:	8e 8f       	std	Y+30, r24	; 0x1e
        
    /* Update number of devices joined. */
    devices_joined++;
    5ae6:	d3 94       	inc	r13
    5ae8:	d0 92 73 0d 	sts	0x0D73, r13
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(device);
    5aec:	ce 01       	movw	r24, r28
    5aee:	0e 94 39 2c 	call	0x5872	; 0x5872 <zigbee_neighbor_table_append>
    
    return device;
    5af2:	ce 01       	movw	r24, r28
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <zigbee_neighbor_table_add_device+0x7c>
            
        if (NULL == this_device) {
            break;
        }
        
        device_address++;
    5af6:	8f ef       	ldi	r24, 0xFF	; 255
    5af8:	e8 1a       	sub	r14, r24
    5afa:	f8 0a       	sbc	r15, r24
    5afc:	e7 cf       	rjmp	.-50     	; 0x5acc <zigbee_neighbor_table_add_device+0x4a>
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(device);
    
    return device;
}
    5afe:	df 91       	pop	r29
    5b00:	cf 91       	pop	r28
    5b02:	1f 91       	pop	r17
    5b04:	0f 91       	pop	r16
    5b06:	ff 90       	pop	r15
    5b08:	ef 90       	pop	r14
    5b0a:	df 90       	pop	r13
    5b0c:	08 95       	ret

00005b0e <zigbee_neighbor_table_find_depth>:
uint8_t zigbee_neighbor_table_find_depth(uint16_t parent_address, uint16_t node_address) {
#if (ZIGBEE_MAX_NMBR_OF_ROUTERS == 0)
    return 1;
#else
    /* Check if the parent is the network coordinator. */
    if (0x0000 == parent_address) {
    5b0e:	21 e0       	ldi	r18, 0x01	; 1
    5b10:	89 2b       	or	r24, r25
    5b12:	09 f0       	breq	.+2      	; 0x5b16 <zigbee_neighbor_table_find_depth+0x8>
    5b14:	20 e0       	ldi	r18, 0x00	; 0
        }
    }
    
    return 0;
#endif
}
    5b16:	82 2f       	mov	r24, r18
    5b18:	08 95       	ret

00005b1a <zigbee_nib_init>:
zigbee_device_t nwkRole;
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

void zigbee_nib_init(void) {
    nwkPassiveAckTimeout = 0x03;
    5b1a:	83 e0       	ldi	r24, 0x03	; 3
    5b1c:	80 93 68 12 	sts	0x1268, r24
    nwkMaxBroadcastRetries = 0x03;
    5b20:	80 93 49 12 	sts	0x1249, r24
    nwkReportConstantCost = false;
    5b24:	10 92 61 12 	sts	0x1261, r1
    nwkRouteDiscoveryRetriesPermitted = NWK_DISCOVERY_RETRY_LIMIT;
    5b28:	80 93 5e 12 	sts	0x125E, r24
    nwkSymLink = false;
    5b2c:	10 92 65 12 	sts	0x1265, r1
    nwkCapabilityInformation = 0x00;
    5b30:	10 92 5d 12 	sts	0x125D, r1
    nwkUseTreeAddrAlloc = true;
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	80 93 5f 12 	sts	0x125F, r24
    nwkUseTreeRouting = true;
    5b3a:	80 93 59 12 	sts	0x1259, r24
    nwkNextAddress = 0x0000;
    5b3e:	10 92 4b 12 	sts	0x124B, r1
    5b42:	10 92 4a 12 	sts	0x124A, r1
    nwkAvailableAddresses = 0x0000;
    5b46:	10 92 5c 12 	sts	0x125C, r1
    5b4a:	10 92 5b 12 	sts	0x125B, r1
    nwkAddressIncrement = 0x0001;
    5b4e:	81 e0       	ldi	r24, 0x01	; 1
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	90 93 4f 12 	sts	0x124F, r25
    5b56:	80 93 4e 12 	sts	0x124E, r24
    nwkTransactionPersistenceTime = 0x01f4;
    5b5a:	84 ef       	ldi	r24, 0xF4	; 244
    5b5c:	91 e0       	ldi	r25, 0x01	; 1
    5b5e:	90 93 48 12 	sts	0x1248, r25
    5b62:	80 93 47 12 	sts	0x1247, r24
    nwkShortAddress = 0xFFFF;
    5b66:	8f ef       	ldi	r24, 0xFF	; 255
    5b68:	9f ef       	ldi	r25, 0xFF	; 255
    5b6a:	90 93 63 12 	sts	0x1263, r25
    5b6e:	80 93 62 12 	sts	0x1262, r24
    nwkStackProfile = 0;
    5b72:	10 92 5a 12 	sts	0x125A, r1
    nwkExtendedPANID = 0x0000000000000000;
    5b76:	10 92 51 12 	sts	0x1251, r1
    5b7a:	10 92 52 12 	sts	0x1252, r1
    5b7e:	10 92 53 12 	sts	0x1253, r1
    5b82:	10 92 54 12 	sts	0x1254, r1
    5b86:	10 92 55 12 	sts	0x1255, r1
    5b8a:	10 92 56 12 	sts	0x1256, r1
    5b8e:	10 92 57 12 	sts	0x1257, r1
    5b92:	10 92 58 12 	sts	0x1258, r1
    
    c_skip_parent = 0;
    5b96:	10 92 4d 12 	sts	0x124D, r1
    5b9a:	10 92 4c 12 	sts	0x124C, r1
    nwkRole = ZIGBEE_TYPE_UNKNOWN;
    5b9e:	10 92 50 12 	sts	0x1250, r1
    5ba2:	08 95       	ret

00005ba4 <zigbee_nib_c_skip>:
}


uint16_t zigbee_nib_c_skip(uint8_t depth) {
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS == depth) { return 0; }
    5ba4:	81 30       	cpi	r24, 0x01	; 1
    5ba6:	39 f0       	breq	.+14     	; 0x5bb6 <zigbee_nib_c_skip+0x12>
    
    uint16_t c_skip = 0;
    
#if (1 == ZIGBEE_MAX_NMBR_OF_ROUTERS)
        c_skip = 1 + (ZIGBEE_MAX_NMBR_OF_CHILDREN * (ZIGBEE_MAX_NMBR_OF_ROUTERS - depth - 1));
    5ba8:	28 2f       	mov	r18, r24
    5baa:	37 ee       	ldi	r19, 0xE7	; 231
    5bac:	32 03       	mulsu	r19, r18
    5bae:	c0 01       	movw	r24, r0
    5bb0:	11 24       	eor	r1, r1
        c_skip *= ZIGBEE_MAX_NMBR_OF_CHILDREN;
        c_skip /= ZIGBEE_MAX_NMBR_OF_ROUTERS - 1;
        c_skip += 1;
#endif
    
    return c_skip;
    5bb2:	01 96       	adiw	r24, 0x01	; 1
    5bb4:	08 95       	ret
    nwkRole = ZIGBEE_TYPE_UNKNOWN;
}


uint16_t zigbee_nib_c_skip(uint8_t depth) {
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS == depth) { return 0; }
    5bb6:	80 e0       	ldi	r24, 0x00	; 0
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
        c_skip /= ZIGBEE_MAX_NMBR_OF_ROUTERS - 1;
        c_skip += 1;
#endif
    
    return c_skip;
}
    5bba:	08 95       	ret

00005bbc <zigbee_permit_joining>:
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool zigbee_permit_joining(bool join_permitted) {
    /* Check that the device is operating either as router or coordinator. */
    if ((NWK_FORMED != ZIGBEE_NWK_GET_STATE()) && 
    5bbc:	90 91 86 01 	lds	r25, 0x0186
    5bc0:	93 50       	subi	r25, 0x03	; 3
    5bc2:	92 30       	cpi	r25, 0x02	; 2
    5bc4:	20 f4       	brcc	.+8      	; 0x5bce <zigbee_permit_joining+0x12>
        (NWK_STARTED != ZIGBEE_NWK_GET_STATE())) {
        return false;
    }
    
    /* Set the Associate Permitted flag in the IEEE 802.15.4 MAC. */
    IEEE802_15_4_SET_ASSOCIATION_PERMITTED(join_permitted);
    5bc6:	80 93 bc 11 	sts	0x11BC, r24
    return true;
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	08 95       	ret

bool zigbee_permit_joining(bool join_permitted) {
    /* Check that the device is operating either as router or coordinator. */
    if ((NWK_FORMED != ZIGBEE_NWK_GET_STATE()) && 
        (NWK_STARTED != ZIGBEE_NWK_GET_STATE())) {
        return false;
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    /* Set the Associate Permitted flag in the IEEE 802.15.4 MAC. */
    IEEE802_15_4_SET_ASSOCIATION_PERMITTED(join_permitted);
    return true;
}
    5bd0:	08 95       	ret

00005bd2 <zigbee_start_router_request>:
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool zigbee_start_router_request(void) {
    /* The device must be joined before it can be started as a router. */
    if (NWK_JOINED != ZIGBEE_NWK_GET_STATE()) { return false; }
    5bd2:	80 91 86 01 	lds	r24, 0x0186
    5bd6:	85 30       	cpi	r24, 0x05	; 5
    5bd8:	11 f0       	breq	.+4      	; 0x5bde <zigbee_start_router_request+0xc>
    5bda:	80 e0       	ldi	r24, 0x00	; 0
    5bdc:	08 95       	ret
    
    /* The device is joined to a coordinator or another router. */
    bool start_router_status = false;
    if (MAC_SUCCESS != ieee802_15_4_start_request(IEEE802_15_4_GET_PAN_ID(), IEEE802_15_4_GET_CHANNEL(), true)) {    
    5bde:	41 e0       	ldi	r20, 0x01	; 1
    5be0:	60 91 c2 11 	lds	r22, 0x11C2
    5be4:	80 91 c5 11 	lds	r24, 0x11C5
    5be8:	90 91 c6 11 	lds	r25, 0x11C6
    5bec:	0e 94 79 19 	call	0x32f2	; 0x32f2 <ieee802_15_4_start_request>
    5bf0:	81 11       	cpse	r24, r1
    5bf2:	f3 cf       	rjmp	.-26     	; 0x5bda <zigbee_start_router_request+0x8>
    } else if (MAC_SUCCESS != ieee802_15_4_rx_enable()) {
    5bf4:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <ieee802_15_4_rx_enable>
    5bf8:	81 11       	cpse	r24, r1
    5bfa:	ef cf       	rjmp	.-34     	; 0x5bda <zigbee_start_router_request+0x8>
    } else {
        
        /* Calculate the router's depth in the network and set up the Cskip algorithm. */
        uint8_t depth = zigbee_neighbor_table_find_depth(IEEE802_15_4_GET_COORD_SHORT_ADDRESS(), \
    5bfc:	60 91 d7 11 	lds	r22, 0x11D7
    5c00:	70 91 d8 11 	lds	r23, 0x11D8
    5c04:	80 91 c3 11 	lds	r24, 0x11C3
    5c08:	90 91 c4 11 	lds	r25, 0x11C4
    5c0c:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <zigbee_neighbor_table_find_depth>
                                                         IEEE802_15_4_GET_SHORT_ADDRESS());
        
        uint16_t c_skip = zigbee_nib_c_skip(depth);
    5c10:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <zigbee_nib_c_skip>
        NWK_NIB_SET_ADDRESS_INCREMENT(c_skip);
    5c14:	90 93 4f 12 	sts	0x124F, r25
    5c18:	80 93 4e 12 	sts	0x124E, r24
         
        ZIGBEE_NWK_SET_STATE(NWK_STARTED);
    5c1c:	84 e0       	ldi	r24, 0x04	; 4
    5c1e:	80 93 86 01 	sts	0x0186, r24
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_COORD);
    5c22:	81 e0       	ldi	r24, 0x01	; 1
    5c24:	80 93 50 12 	sts	0x1250, r24
        start_router_status = true;
    }
    
    return start_router_status; 
}
    5c28:	08 95       	ret

00005c2a <exit>:
    5c2a:	f8 94       	cli
    5c2c:	0c 94 9a 2e 	jmp	0x5d34	; 0x5d34 <_exit>

00005c30 <memcpy>:
    5c30:	fb 01       	movw	r30, r22
    5c32:	dc 01       	movw	r26, r24
    5c34:	02 c0       	rjmp	.+4      	; 0x5c3a <memcpy+0xa>
    5c36:	01 90       	ld	r0, Z+
    5c38:	0d 92       	st	X+, r0
    5c3a:	41 50       	subi	r20, 0x01	; 1
    5c3c:	50 40       	sbci	r21, 0x00	; 0
    5c3e:	d8 f7       	brcc	.-10     	; 0x5c36 <memcpy+0x6>
    5c40:	08 95       	ret

00005c42 <__eerd_byte_usb1287>:
    5c42:	f9 99       	sbic	0x1f, 1	; 31
    5c44:	fe cf       	rjmp	.-4      	; 0x5c42 <__eerd_byte_usb1287>
    5c46:	92 bd       	out	0x22, r25	; 34
    5c48:	81 bd       	out	0x21, r24	; 33
    5c4a:	f8 9a       	sbi	0x1f, 0	; 31
    5c4c:	99 27       	eor	r25, r25
    5c4e:	80 b5       	in	r24, 0x20	; 32
    5c50:	08 95       	ret

00005c52 <__eewr_byte_usb1287>:
    5c52:	26 2f       	mov	r18, r22

00005c54 <__eewr_r18_usb1287>:
    5c54:	f9 99       	sbic	0x1f, 1	; 31
    5c56:	fe cf       	rjmp	.-4      	; 0x5c54 <__eewr_r18_usb1287>
    5c58:	1f ba       	out	0x1f, r1	; 31
    5c5a:	92 bd       	out	0x22, r25	; 34
    5c5c:	81 bd       	out	0x21, r24	; 33
    5c5e:	20 bd       	out	0x20, r18	; 32
    5c60:	0f b6       	in	r0, 0x3f	; 63
    5c62:	f8 94       	cli
    5c64:	fa 9a       	sbi	0x1f, 2	; 31
    5c66:	f9 9a       	sbi	0x1f, 1	; 31
    5c68:	0f be       	out	0x3f, r0	; 63
    5c6a:	01 96       	adiw	r24, 0x01	; 1
    5c6c:	08 95       	ret

00005c6e <__udivmodhi4>:
    5c6e:	aa 1b       	sub	r26, r26
    5c70:	bb 1b       	sub	r27, r27
    5c72:	51 e1       	ldi	r21, 0x11	; 17
    5c74:	07 c0       	rjmp	.+14     	; 0x5c84 <__udivmodhi4_ep>

00005c76 <__udivmodhi4_loop>:
    5c76:	aa 1f       	adc	r26, r26
    5c78:	bb 1f       	adc	r27, r27
    5c7a:	a6 17       	cp	r26, r22
    5c7c:	b7 07       	cpc	r27, r23
    5c7e:	10 f0       	brcs	.+4      	; 0x5c84 <__udivmodhi4_ep>
    5c80:	a6 1b       	sub	r26, r22
    5c82:	b7 0b       	sbc	r27, r23

00005c84 <__udivmodhi4_ep>:
    5c84:	88 1f       	adc	r24, r24
    5c86:	99 1f       	adc	r25, r25
    5c88:	5a 95       	dec	r21
    5c8a:	a9 f7       	brne	.-22     	; 0x5c76 <__udivmodhi4_loop>
    5c8c:	80 95       	com	r24
    5c8e:	90 95       	com	r25
    5c90:	bc 01       	movw	r22, r24
    5c92:	cd 01       	movw	r24, r26
    5c94:	08 95       	ret

00005c96 <__tablejump2__>:
    5c96:	ee 0f       	add	r30, r30
    5c98:	ff 1f       	adc	r31, r31

00005c9a <__tablejump__>:
    5c9a:	05 90       	lpm	r0, Z+
    5c9c:	f4 91       	lpm	r31, Z
    5c9e:	e0 2d       	mov	r30, r0
    5ca0:	09 94       	ijmp

00005ca2 <__usmulhisi3>:
    5ca2:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__umulhisi3>

00005ca6 <__usmulhisi3_tail>:
    5ca6:	b7 ff       	sbrs	r27, 7
    5ca8:	08 95       	ret
    5caa:	82 1b       	sub	r24, r18
    5cac:	93 0b       	sbc	r25, r19
    5cae:	08 95       	ret

00005cb0 <__ashrdi3>:
    5cb0:	97 fb       	bst	r25, 7
    5cb2:	10 f8       	bld	r1, 0

00005cb4 <__lshrdi3>:
    5cb4:	16 94       	lsr	r1
    5cb6:	00 08       	sbc	r0, r0
    5cb8:	0f 93       	push	r16
    5cba:	08 30       	cpi	r16, 0x08	; 8
    5cbc:	98 f0       	brcs	.+38     	; 0x5ce4 <__lshrdi3+0x30>
    5cbe:	08 50       	subi	r16, 0x08	; 8
    5cc0:	23 2f       	mov	r18, r19
    5cc2:	34 2f       	mov	r19, r20
    5cc4:	45 2f       	mov	r20, r21
    5cc6:	56 2f       	mov	r21, r22
    5cc8:	67 2f       	mov	r22, r23
    5cca:	78 2f       	mov	r23, r24
    5ccc:	89 2f       	mov	r24, r25
    5cce:	90 2d       	mov	r25, r0
    5cd0:	f4 cf       	rjmp	.-24     	; 0x5cba <__lshrdi3+0x6>
    5cd2:	05 94       	asr	r0
    5cd4:	97 95       	ror	r25
    5cd6:	87 95       	ror	r24
    5cd8:	77 95       	ror	r23
    5cda:	67 95       	ror	r22
    5cdc:	57 95       	ror	r21
    5cde:	47 95       	ror	r20
    5ce0:	37 95       	ror	r19
    5ce2:	27 95       	ror	r18
    5ce4:	0a 95       	dec	r16
    5ce6:	aa f7       	brpl	.-22     	; 0x5cd2 <__lshrdi3+0x1e>
    5ce8:	0f 91       	pop	r16
    5cea:	08 95       	ret

00005cec <__cmpdi2>:
    5cec:	2a 15       	cp	r18, r10
    5cee:	3b 05       	cpc	r19, r11
    5cf0:	4c 05       	cpc	r20, r12
    5cf2:	5d 05       	cpc	r21, r13
    5cf4:	6e 05       	cpc	r22, r14
    5cf6:	7f 05       	cpc	r23, r15
    5cf8:	80 07       	cpc	r24, r16
    5cfa:	91 07       	cpc	r25, r17
    5cfc:	08 95       	ret

00005cfe <__cmpdi2_s8>:
    5cfe:	00 24       	eor	r0, r0
    5d00:	a7 fd       	sbrc	r26, 7
    5d02:	00 94       	com	r0
    5d04:	2a 17       	cp	r18, r26
    5d06:	30 05       	cpc	r19, r0
    5d08:	40 05       	cpc	r20, r0
    5d0a:	50 05       	cpc	r21, r0
    5d0c:	60 05       	cpc	r22, r0
    5d0e:	70 05       	cpc	r23, r0
    5d10:	80 05       	cpc	r24, r0
    5d12:	90 05       	cpc	r25, r0
    5d14:	08 95       	ret

00005d16 <__umulhisi3>:
    5d16:	a2 9f       	mul	r26, r18
    5d18:	b0 01       	movw	r22, r0
    5d1a:	b3 9f       	mul	r27, r19
    5d1c:	c0 01       	movw	r24, r0
    5d1e:	a3 9f       	mul	r26, r19
    5d20:	70 0d       	add	r23, r0
    5d22:	81 1d       	adc	r24, r1
    5d24:	11 24       	eor	r1, r1
    5d26:	91 1d       	adc	r25, r1
    5d28:	b2 9f       	mul	r27, r18
    5d2a:	70 0d       	add	r23, r0
    5d2c:	81 1d       	adc	r24, r1
    5d2e:	11 24       	eor	r1, r1
    5d30:	91 1d       	adc	r25, r1
    5d32:	08 95       	ret

00005d34 <_exit>:
    5d34:	f8 94       	cli

00005d36 <__stop_program>:
    5d36:	ff cf       	rjmp	.-2      	; 0x5d36 <__stop_program>
